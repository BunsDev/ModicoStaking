{
    "contractName": "DiamondFacet",
    "abi": [
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "bytes[]",
                    "name": "_diamondCut",
                    "type": "bytes[]"
                },
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "_init",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "bytes",
                    "name": "_calldata",
                    "type": "bytes"
                }
            ],
            "name": "DiamondCut",
            "type": "event"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes[]",
                    "name": "_diamondCut",
                    "type": "bytes[]"
                },
                {
                    "internalType": "address",
                    "name": "_init",
                    "type": "address"
                },
                {
                    "internalType": "bytes",
                    "name": "_calldata",
                    "type": "bytes"
                }
            ],
            "name": "diamondCut",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ],
    "bytecode": "0x608060405234801561001057600080fd5b50610c72806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80637c696fea14610030575b600080fd5b61004361003e3660046107fb565b610045565b005b61004f85856101c5565b801561014b57600073ffffffffffffffffffffffffffffffffffffffff841615610079578361007b565b305b9050803b806100a55760405162461bcd60e51b815260040161009c90610a9a565b60405180910390fd5b600060608373ffffffffffffffffffffffffffffffffffffffff1686866040516100d0929190610921565b600060405180830381855af49150503d806000811461010b576040519150601f19603f3d011682016040523d82523d6000602084013e610110565b606091505b5091509150816101425780511561012a5780518082602001fd5b60405162461bcd60e51b815260040161009c90610a3d565b5050505061017f565b73ffffffffffffffffffffffffffffffffffffffff83161561017f5760405162461bcd60e51b815260040161009c90610af7565b7f8819f27db4d71c7d1006e0c686e12ce5b6d6835b3e06b43d52c9adda9168366c85858585856040516101b6959493929190610931565b60405180910390a15050505050565b60006101cf61075b565b805490915073ffffffffffffffffffffffffffffffffffffffff1633146102085760405162461bcd60e51b815260040161009c90610a06565b61021061077f565b60038201548082526fffffffffffffffffffffffffffffffff81169060801c801561024e576000828152600285016020908152604090912054908401525b60005b8581101561070a57606087878381811061026757fe5b90506020028101906102799190610bf7565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050825192935050601490911190506102d45760405162461bcd60e51b815260040161009c90610b89565b602081015181516bffffffffffffffffffffffff1982169060047fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec90910104603482156104d05760005b828110156104ca57858201516001600160e01b03198116600090815260018d0160205260409020546004909301928061045f5760018c60a00190151590811515815250508a60001b60408b60001b901b8717178d6001016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000208190555089602002827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c8a6020026001600160e01b031960001b901c198d6020015116178c602001818152505089806001019a5050896008141561045a578b602001518d60020160008d8152602001908152602001600020819055506000801b8c6020018181525050600099508a806001019b50505b6104c0565b6bffffffffffffffffffffffff1981811690871614156104915760405162461bcd60e51b815260040161009c90610bc0565b6001600160e01b03198216600090815260018e01602052604090206bffffffffffffffffffffffff8216871790555b505060010161031e565b506106f9565b600160a08a015260005b828110156106f757858201516001600160e01b03198116600090815260018d016020526040902054600490930192806105255760405162461bcd60e51b815260040161009c90610b2c565b60208c015161055257600019909a01600081815260028e016020908152604090912054908d015299600899505b67ffffffffffffffff811660408d810182905282901c63ffffffff1660608e01526020808e01516000198d019091021b908c1461062d578d60020160008e604001518152602001908152602001600020548d60800181815250508c60600151602002817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c8d606001516020026001600160e01b031960001b901c198e6080015116178d60800181815250508c608001518e60020160008f604001518152602001908152602001600020819055508a80600190039b505061065f565b60608d01516020808f0180516001600160e01b03199290930282811c199390931691841690921c179052600019909a01995b8a61067d5760008c815260028f016020908152604082208290558e01525b6001600160e01b0319818116908416146106d0576001600160e01b03198116600090815260018f016020526040902080546bffffffffffffffffffffffff19166bffffffffffffffffffffffff84161790555b50506001600160e01b03191660009081526001808d016020526040822091909155016104da565b505b505060019093019250610251915050565b508251608082901b831790811461072357600385018190555b8360a0015180156107345750600082115b15610752576020808501516000858152600288019092526040909120555b50505050505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b60008083601f8401126107c5578182fd5b50813567ffffffffffffffff8111156107dc578182fd5b6020830191508360208285010111156107f457600080fd5b9250929050565b600080600080600060608688031215610812578081fd5b853567ffffffffffffffff80821115610829578283fd5b818801915088601f83011261083c578283fd5b81358181111561084a578384fd5b896020808302850101111561085d578384fd5b602092830197509550908701359073ffffffffffffffffffffffffffffffffffffffff8216821461088c578283fd5b909350604087013590808211156108a1578283fd5b506108ae888289016107b4565b969995985093965092949392505050565b73ffffffffffffffffffffffffffffffffffffffff169052565b600082845282826020860137806020848601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011685010190509392505050565b6000828483379101908152919050565b606080825281018590526000602060808084019082890285010189845b8a8110156109d7577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808784030184528135601e198d3603018112610990578687fd5b8c01803567ffffffffffffffff8111156109a8578788fd5b8036038e13156109b6578788fd5b6109c385828985016108d9565b95870195945050509084019060010161094e565b50506109e5838601896108bf565b84810360408601526109f88187896108d9565b9a9950505050505050505050565b60208082526016908201527f4d757374206f776e2074686520636f6e74726163742e00000000000000000000604082015260600190565b60208082526025908201527f4469616d6f6e6446616365743a205f696e69742066756e6374696f6e2072657660408201527f6572746564000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526027908201527f4469616d6f6e6446616365743a205f696e69742061646472657373206861732060408201527f6e6f20636f646500000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4469616d6f6e6446616365743a205f63616c6c6461746120697320656d707479604082015260600190565b60208082526025908201527f46756e6374696f6e20646f65736e27742065786973742e2043616e277420726560408201527f6d6f76652e000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f4d697373696e67206661636574206f722073656c6563746f7220696e666f2e00604082015260600190565b6020808252601b908201527f46756e6374696f6e2063757420746f2073616d652066616365742e0000000000604082015260600190565b6000808335601e19843603018112610c0d578283fd5b83018035915067ffffffffffffffff821115610c27578283fd5b6020019150368190038213156107f457600080fdfea2646970667358221220899ed67d5dec7fe8be7e65a22df4030fbf459a9760b4ad505fc59f7e27418c0164736f6c63430007000033",
    "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80637c696fea14610030575b600080fd5b61004361003e3660046107fb565b610045565b005b61004f85856101c5565b801561014b57600073ffffffffffffffffffffffffffffffffffffffff841615610079578361007b565b305b9050803b806100a55760405162461bcd60e51b815260040161009c90610a9a565b60405180910390fd5b600060608373ffffffffffffffffffffffffffffffffffffffff1686866040516100d0929190610921565b600060405180830381855af49150503d806000811461010b576040519150601f19603f3d011682016040523d82523d6000602084013e610110565b606091505b5091509150816101425780511561012a5780518082602001fd5b60405162461bcd60e51b815260040161009c90610a3d565b5050505061017f565b73ffffffffffffffffffffffffffffffffffffffff83161561017f5760405162461bcd60e51b815260040161009c90610af7565b7f8819f27db4d71c7d1006e0c686e12ce5b6d6835b3e06b43d52c9adda9168366c85858585856040516101b6959493929190610931565b60405180910390a15050505050565b60006101cf61075b565b805490915073ffffffffffffffffffffffffffffffffffffffff1633146102085760405162461bcd60e51b815260040161009c90610a06565b61021061077f565b60038201548082526fffffffffffffffffffffffffffffffff81169060801c801561024e576000828152600285016020908152604090912054908401525b60005b8581101561070a57606087878381811061026757fe5b90506020028101906102799190610bf7565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050825192935050601490911190506102d45760405162461bcd60e51b815260040161009c90610b89565b602081015181516bffffffffffffffffffffffff1982169060047fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec90910104603482156104d05760005b828110156104ca57858201516001600160e01b03198116600090815260018d0160205260409020546004909301928061045f5760018c60a00190151590811515815250508a60001b60408b60001b901b8717178d6001016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019081526020016000208190555089602002827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c8a6020026001600160e01b031960001b901c198d6020015116178c602001818152505089806001019a5050896008141561045a578b602001518d60020160008d8152602001908152602001600020819055506000801b8c6020018181525050600099508a806001019b50505b6104c0565b6bffffffffffffffffffffffff1981811690871614156104915760405162461bcd60e51b815260040161009c90610bc0565b6001600160e01b03198216600090815260018e01602052604090206bffffffffffffffffffffffff8216871790555b505060010161031e565b506106f9565b600160a08a015260005b828110156106f757858201516001600160e01b03198116600090815260018d016020526040902054600490930192806105255760405162461bcd60e51b815260040161009c90610b2c565b60208c015161055257600019909a01600081815260028e016020908152604090912054908d015299600899505b67ffffffffffffffff811660408d810182905282901c63ffffffff1660608e01526020808e01516000198d019091021b908c1461062d578d60020160008e604001518152602001908152602001600020548d60800181815250508c60600151602002817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c8d606001516020026001600160e01b031960001b901c198e6080015116178d60800181815250508c608001518e60020160008f604001518152602001908152602001600020819055508a80600190039b505061065f565b60608d01516020808f0180516001600160e01b03199290930282811c199390931691841690921c179052600019909a01995b8a61067d5760008c815260028f016020908152604082208290558e01525b6001600160e01b0319818116908416146106d0576001600160e01b03198116600090815260018f016020526040902080546bffffffffffffffffffffffff19166bffffffffffffffffffffffff84161790555b50506001600160e01b03191660009081526001808d016020526040822091909155016104da565b505b505060019093019250610251915050565b508251608082901b831790811461072357600385018190555b8360a0015180156107345750600082115b15610752576020808501516000858152600288019092526040909120555b50505050505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b60008083601f8401126107c5578182fd5b50813567ffffffffffffffff8111156107dc578182fd5b6020830191508360208285010111156107f457600080fd5b9250929050565b600080600080600060608688031215610812578081fd5b853567ffffffffffffffff80821115610829578283fd5b818801915088601f83011261083c578283fd5b81358181111561084a578384fd5b896020808302850101111561085d578384fd5b602092830197509550908701359073ffffffffffffffffffffffffffffffffffffffff8216821461088c578283fd5b909350604087013590808211156108a1578283fd5b506108ae888289016107b4565b969995985093965092949392505050565b73ffffffffffffffffffffffffffffffffffffffff169052565b600082845282826020860137806020848601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011685010190509392505050565b6000828483379101908152919050565b606080825281018590526000602060808084019082890285010189845b8a8110156109d7577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808784030184528135601e198d3603018112610990578687fd5b8c01803567ffffffffffffffff8111156109a8578788fd5b8036038e13156109b6578788fd5b6109c385828985016108d9565b95870195945050509084019060010161094e565b50506109e5838601896108bf565b84810360408601526109f88187896108d9565b9a9950505050505050505050565b60208082526016908201527f4d757374206f776e2074686520636f6e74726163742e00000000000000000000604082015260600190565b60208082526025908201527f4469616d6f6e6446616365743a205f696e69742066756e6374696f6e2072657660408201527f6572746564000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526027908201527f4469616d6f6e6446616365743a205f696e69742061646472657373206861732060408201527f6e6f20636f646500000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4469616d6f6e6446616365743a205f63616c6c6461746120697320656d707479604082015260600190565b60208082526025908201527f46756e6374696f6e20646f65736e27742065786973742e2043616e277420726560408201527f6d6f76652e000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f4d697373696e67206661636574206f722073656c6563746f7220696e666f2e00604082015260600190565b6020808252601b908201527f46756e6374696f6e2063757420746f2073616d652066616365742e0000000000604082015260600190565b6000808335601e19843603018112610c0d578283fd5b83018035915067ffffffffffffffff821115610c27578283fd5b6020019150368190038213156107f457600080fdfea2646970667358221220899ed67d5dec7fe8be7e65a22df4030fbf459a9760b4ad505fc59f7e27418c0164736f6c63430007000033",
    "linkReferences": {},
    "deployedLinkReferences": {},
    "metadata": "{\"compiler\":{\"version\":\"0.7.0+commit.9e61f92b\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"_diamondCut\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_diamondCut\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"diamondCut(bytes[],address,bytes)\":{\"params\":{\"_calldata\":\"A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init\",\"_diamondCut\":\"Contains the facet addresses and function selectors This argument is tightly packed for gas efficiency     That means no padding with zeros. Here is the structure of _diamondCut: _diamondCut = [     abi.encodePacked(facet, sel1, sel2, sel3, ...),     abi.encodePacked(facet, sel1, sel2, sel4, ...),     ... ] facet is the address of a facet sel1, sel2, sel3 etc. are four-byte function selectors.\",\"_init\":\"The address of the contract or facet to execute _calldata\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"diamondCut(bytes[],address,bytes)\":{\"notice\":\"Add/replace/remove any number of functions and optionally execute         a function with delegatecall\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solc_0.7/diamond/DiamondFacet.sol\":\"DiamondFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"solc_0.7/diamond/DiamondFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge\\n*\\n* Implementation of Diamond facet.\\n* This is gas optimized by reducing storage reads and storage writes.\\n* This code is as complex as it is to reduce gas costs.\\n/******************************************************************************/\\n\\nimport \\\"./DiamondStorageContract.sol\\\";\\nimport \\\"./DiamondHeaders.sol\\\";\\n\\ncontract DiamondFacet is IDiamond, DiamondStorageContract {\\n    bytes32 constant CLEAR_ADDRESS_MASK = 0x0000000000000000000000000000000000000000ffffffffffffffffffffffff;\\n    bytes32 constant CLEAR_SELECTOR_MASK = 0xffffffff00000000000000000000000000000000000000000000000000000000;\\n\\n    // Standard diamondCut external function\\n    function diamondCut(bytes[] calldata _diamondCut, address _init, bytes calldata _calldata) external override {        \\n        externalCut(_diamondCut);        \\n        if(_calldata.length > 0) {\\n            address init = _init == address(0)? address(this) : _init;\\n            // Check that init has contract code\\n            uint contractSize;\\n            assembly { contractSize := extcodesize(init) }\\n            require(contractSize > 0, \\\"DiamondFacet: _init address has no code\\\");\\n            (bool success, bytes memory error) = init.delegatecall(_calldata);\\n            if(!success) {\\n                if(error.length > 0) {\\n                    // bubble up the error\\n                    assembly {\\n                        let errorSize := mload(error)\\n                        revert(add(32, error), errorSize)\\n                    }\\n                }\\n                else {\\n                    revert(\\\"DiamondFacet: _init function reverted\\\");\\n                }\\n            }                        \\n        }\\n        else if(_init != address(0)) {\\n            revert(\\\"DiamondFacet: _calldata is empty\\\");\\n        }                       \\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n    }\\n\\n    // This struct is used to prevent getting the error \\\"CompilerError: Stack too deep, try removing local variables.\\\"\\n    // See this article: https://medium.com/1milliondevs/compilererror-stack-too-deep-try-removing-local-variables-solved-a6bcecc16231\\n    struct SlotInfo {\\n        uint originalSelectorSlotsLength;\\n        bytes32 selectorSlot;\\n        uint oldSelectorSlotsIndex;\\n        uint oldSelectorSlotIndex;\\n        bytes32 oldSelectorSlot;\\n        bool updateLastSlot;\\n    }\\n\\n\\n    // diamondCut helper function\\n    // This code is exaclty the same as the internal diamondCut function, \\n    // except it is using 'bytes[] calldata _diamondCut' instead of \\n    // 'bytes[] memory _diamondCut'\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes an error for an array of bytes arrays.\\n    function externalCut(bytes[] calldata _diamondCut) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(msg.sender == ds.contractOwner, \\\"Must own the contract.\\\");\\n        SlotInfo memory slot;\\n        slot.originalSelectorSlotsLength = ds.selectorSlotsLength;\\n        uint selectorSlotsLength = uint128(slot.originalSelectorSlotsLength);\\n        uint selectorSlotLength = uint128(slot.originalSelectorSlotsLength >> 128);\\n        if(selectorSlotLength > 0) {\\n            slot.selectorSlot = ds.selectorSlots[selectorSlotsLength];\\n        }\\n        // loop through diamond cut\\n        for(uint diamondCutIndex; diamondCutIndex < _diamondCut.length; diamondCutIndex++) {\\n            bytes memory facetCut = _diamondCut[diamondCutIndex];\\n            require(facetCut.length > 20, \\\"Missing facet or selector info.\\\");\\n            bytes32 currentSlot;\\n            assembly {\\n                currentSlot := mload(add(facetCut,32))\\n            }\\n            bytes32 newFacet = bytes20(currentSlot);\\n            uint numSelectors = (facetCut.length - 20) / 4;\\n            uint position = 52;\\n\\n            // adding or replacing functions\\n            if(newFacet != 0) {                \\n                // add and replace selectors\\n                for(uint selectorIndex; selectorIndex < numSelectors; selectorIndex++) {\\n                    bytes4 selector;\\n                    assembly {\\n                        selector := mload(add(facetCut,position))\\n                    }\\n                    position += 4;\\n                    bytes32 oldFacet = ds.facets[selector];\\n                    // add\\n                    if(oldFacet == 0) {\\n                        // update the last slot at then end of the function\\n                        slot.updateLastSlot = true;\\n                        ds.facets[selector] = newFacet | bytes32(selectorSlotLength) << 64 | bytes32(selectorSlotsLength);\\n                        // clear selector position in slot and add selector\\n                        slot.selectorSlot = slot.selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorSlotLength * 32) | bytes32(selector) >> selectorSlotLength * 32;\\n                        selectorSlotLength++;\\n                        // if slot is full then write it to storage\\n                        if(selectorSlotLength == 8) {\\n                            ds.selectorSlots[selectorSlotsLength] = slot.selectorSlot;\\n                            slot.selectorSlot = 0;\\n                            selectorSlotLength = 0;\\n                            selectorSlotsLength++;\\n                        }\\n                    }\\n                    // replace\\n                    else {\\n                        require(bytes20(oldFacet) != bytes20(newFacet), \\\"Function cut to same facet.\\\");\\n                        // replace old facet address\\n                        ds.facets[selector] = oldFacet & CLEAR_ADDRESS_MASK | newFacet;\\n                    }\\n                }\\n            }\\n            // remove functions\\n            else {\\n                slot.updateLastSlot = true;\\n                for(uint selectorIndex; selectorIndex < numSelectors; selectorIndex++) {\\n                    bytes4 selector;\\n                    assembly {\\n                        selector := mload(add(facetCut,position))\\n                    }\\n                    position += 4;\\n                    bytes32 oldFacet = ds.facets[selector];\\n                    require(oldFacet != 0, \\\"Function doesn't exist. Can't remove.\\\");\\n                    // Current slot is empty so get the slot before it\\n                    if(slot.selectorSlot == 0) {\\n                        selectorSlotsLength--;\\n                        slot.selectorSlot = ds.selectorSlots[selectorSlotsLength];\\n                        selectorSlotLength = 8;\\n                    }\\n                    slot.oldSelectorSlotsIndex = uint64(uint(oldFacet));\\n                    slot.oldSelectorSlotIndex = uint32(uint(oldFacet >> 64));\\n                    // gets the last selector in the slot\\n                    bytes4 lastSelector = bytes4(slot.selectorSlot << (selectorSlotLength-1) * 32);\\n                    if(slot.oldSelectorSlotsIndex != selectorSlotsLength) {\\n                        slot.oldSelectorSlot = ds.selectorSlots[slot.oldSelectorSlotsIndex];\\n                        // clears the selector we are deleting and puts the last selector in its place.\\n                        slot.oldSelectorSlot = slot.oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> slot.oldSelectorSlotIndex * 32) | bytes32(lastSelector) >> slot.oldSelectorSlotIndex * 32;\\n                        // update storage with the modified slot\\n                        ds.selectorSlots[slot.oldSelectorSlotsIndex] = slot.oldSelectorSlot;\\n                        selectorSlotLength--;\\n                    }\\n                    else {\\n                        // clears the selector we are deleting and puts the last selector in its place.\\n                        slot.selectorSlot = slot.selectorSlot & ~(CLEAR_SELECTOR_MASK >> slot.oldSelectorSlotIndex * 32) | bytes32(lastSelector) >> slot.oldSelectorSlotIndex * 32;\\n                        selectorSlotLength--;                        \\n                    }\\n                    if(selectorSlotLength == 0) {\\n                        delete ds.selectorSlots[selectorSlotsLength];\\n                        slot.selectorSlot = 0;                        \\n                    }\\n                    if(lastSelector != selector) {\\n                        // update last selector slot position info\\n                        ds.facets[lastSelector] = oldFacet & CLEAR_ADDRESS_MASK | bytes20(ds.facets[lastSelector]);\\n                    }\\n                    delete ds.facets[selector];\\n                }\\n            }\\n        }\\n        uint newSelectorSlotsLength = selectorSlotLength << 128 | selectorSlotsLength;\\n        if(newSelectorSlotsLength != slot.originalSelectorSlotsLength) {\\n            ds.selectorSlotsLength = newSelectorSlotsLength;\\n        }\\n        if(slot.updateLastSlot && selectorSlotLength > 0) {\\n            ds.selectorSlots[selectorSlotsLength] = slot.selectorSlot;\\n        }        \\n    }\\n}\\n\",\"keccak256\":\"0xec1ea013f7ff9cc3831a3afa1b101c482626ec8a6916ce2ea96c5a94dc8ab9dd\",\"license\":\"MIT\"},\"solc_0.7/diamond/DiamondHeaders.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IDiamond {\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// This argument is tightly packed for gas efficiency    \\n    /// That means no padding with zeros.\\n    /// Here is the structure of _diamondCut:\\n    /// _diamondCut = [\\n    ///     abi.encodePacked(facet, sel1, sel2, sel3, ...),\\n    ///     abi.encodePacked(facet, sel1, sel2, sel4, ...),\\n    ///     ...\\n    /// ]\\n    /// facet is the address of a facet\\n    /// sel1, sel2, sel3 etc. are four-byte function selectors.\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(bytes[] calldata _diamondCut, address _init, bytes calldata _calldata) external;\\n    event DiamondCut(bytes[] _diamondCut, address _init, bytes _calldata);\\n}\\n\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools. Therefore the return values are tightly\\n    /// packed for efficiency. That means no padding with zeros.\\n\\n    /// @notice Gets all facets and their selectors.\\n    /// @return An array of bytes arrays containing each facet\\n    ///         and each facet's selectors.\\n    /// The return value is tightly packed.\\n    /// Here is the structure of the return value:\\n    /// returnValue = [\\n    ///     abi.encodePacked(facet, sel1, sel2, sel3, ...),\\n    ///     abi.encodePacked(facet, sel1, sel2, sel3, ...),\\n    ///     ...\\n    /// ]\\n    /// facet is the address of a facet.\\n    /// sel1, sel2, sel3 etc. are four-byte function selectors.\\n    function facets() external view returns(bytes[] memory);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return A byte array of function selectors.\\n    /// The return value is tightly packed. Here is an example:\\n    /// return abi.encodePacked(selector1, selector2, selector3, ...)\\n    function facetFunctionSelectors(address _facet) external view returns(bytes memory);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return A byte array of tightly packed facet addresses.\\n    /// Example return value:\\n    /// return abi.encodePacked(facet1, facet2, facet3, ...)\\n    function facetAddresses() external view returns(bytes memory);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view returns(address);\\n}\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceID The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\\ninterface IERC173Events {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n}\\n\\ninterface IERC173 is IERC173Events {\\n    function transferOwnership(address newOwner) external;\\n\\n    function owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0x331a6b7d4e1a101eff1dfd4d7c1a69ef6c6165c81ff674e63ec0cbfe7c5f42a7\",\"license\":\"MIT\"},\"solc_0.7/diamond/DiamondStorageContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ncontract DiamondStorageContract {\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n\\n        // owner of the contract\\n        address contractOwner;\\n\\n        // maps function selectors to the facets that execute the functions.\\n        // and maps the selectors to the slot in the selectorSlots array.\\n        // and maps the selectors to the position in the slot.\\n        // func selector => address facet, uint32 slotIndex, uint64 slotsIndex\\n        mapping(bytes4 => bytes32) facets;\\n\\n        // array of slots of function selectors.\\n        // each slot holds 8 function selectors.\\n        mapping(uint => bytes32) selectorSlots;\\n\\n        // uint32 selectorSlotLength, uint32 selectorSlotsLength\\n        // selectorSlotsLength is the number of 32-byte slots in selectorSlots.\\n        // selectorSlotLength is the number of selectors in the last slot of\\n        // selectorSlots.\\n        uint selectorSlotsLength;\\n\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n\\n    function diamondStorage() internal pure returns(DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly { ds.slot := position }\\n    }\\n}\\n\",\"keccak256\":\"0x4c77113ad1740fc0908f76aa79bc4a2b5a593cbb09502775435fc6aa9bacd565\",\"license\":\"MIT\"}},\"version\":1}",
    "contractFilepath": "solc_0.7/diamond/DiamondFacet.sol"
}
