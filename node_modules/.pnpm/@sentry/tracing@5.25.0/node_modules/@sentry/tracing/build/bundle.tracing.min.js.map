{"version":3,"file":"bundle.tracing.min.js","sources":["../../types/src/loglevel.ts","../../types/src/severity.ts","../../types/src/status.ts","../../utils/src/is.ts","../../utils/src/browser.ts","../../utils/src/polyfill.ts","../../utils/src/error.ts","../../utils/src/dsn.ts","../../utils/src/memo.ts","../../utils/src/stacktrace.ts","../../utils/src/string.ts","../../utils/src/object.ts","../../utils/src/node.ts","../../utils/src/misc.ts","../../utils/src/logger.ts","../../utils/src/supports.ts","../../utils/src/instrument.ts","../../utils/src/syncpromise.ts","../../utils/src/promisebuffer.ts","../../utils/src/time.ts","../../hub/src/scope.ts","../../hub/src/hub.ts","../../minimal/src/index.ts","../../core/src/api.ts","../../core/src/integration.ts","../../core/src/baseclient.ts","../../core/src/integrations/functiontostring.ts","../../core/src/transports/noop.ts","../../core/src/basebackend.ts","../../core/src/request.ts","../../core/src/integrations/inboundfilters.ts","../../browser/src/tracekit.ts","../../browser/src/parsers.ts","../../browser/src/eventbuilder.ts","../../browser/src/transports/base.ts","../../browser/src/transports/fetch.ts","../../browser/src/transports/xhr.ts","../../browser/src/backend.ts","../../browser/src/helpers.ts","../../browser/src/integrations/globalhandlers.ts","../../browser/src/integrations/trycatch.ts","../../browser/src/integrations/breadcrumbs.ts","../../browser/src/integrations/linkederrors.ts","../../browser/src/integrations/useragent.ts","../../browser/src/version.ts","../../browser/src/client.ts","../../browser/src/sdk.ts","../../browser/src/index.ts","../src/spanstatus.ts","../src/utils.ts","../src/errors.ts","../src/span.ts","../src/transaction.ts","../src/idletransaction.ts","../src/hubextensions.ts","../src/browser/backgroundtab.ts","../src/browser/metrics.ts","../src/browser/request.ts","../src/browser/router.ts","../src/browser/browsertracing.ts","../src/index.bundle.ts","../../core/src/sdk.ts"],"sourcesContent":["/** Console logging verbosity for the SDK. */\nexport enum LogLevel {\n  /** No logs will be generated. */\n  None = 0,\n  /** Only SDK internal errors will be logged. */\n  Error = 1,\n  /** Information useful for debugging the SDK will be logged. */\n  Debug = 2,\n  /** All SDK actions will be logged. */\n  Verbose = 3,\n}\n","/** JSDoc */\n// eslint-disable-next-line import/export\nexport enum Severity {\n  /** JSDoc */\n  Fatal = 'fatal',\n  /** JSDoc */\n  Error = 'error',\n  /** JSDoc */\n  Warning = 'warning',\n  /** JSDoc */\n  Log = 'log',\n  /** JSDoc */\n  Info = 'info',\n  /** JSDoc */\n  Debug = 'debug',\n  /** JSDoc */\n  Critical = 'critical',\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace, import/export\nexport namespace Severity {\n  /**\n   * Converts a string-based level into a {@link Severity}.\n   *\n   * @param level string representation of Severity\n   * @returns Severity\n   */\n  export function fromString(level: string): Severity {\n    switch (level) {\n      case 'debug':\n        return Severity.Debug;\n      case 'info':\n        return Severity.Info;\n      case 'warn':\n      case 'warning':\n        return Severity.Warning;\n      case 'error':\n        return Severity.Error;\n      case 'fatal':\n        return Severity.Fatal;\n      case 'critical':\n        return Severity.Critical;\n      case 'log':\n      default:\n        return Severity.Log;\n    }\n  }\n}\n","/** The status of an event. */\n// eslint-disable-next-line import/export\nexport enum Status {\n  /** The status could not be determined. */\n  Unknown = 'unknown',\n  /** The event was skipped due to configuration or callbacks. */\n  Skipped = 'skipped',\n  /** The event was sent to Sentry successfully. */\n  Success = 'success',\n  /** The client is currently rate limited and will try again later. */\n  RateLimit = 'rate_limit',\n  /** The event could not be processed. */\n  Invalid = 'invalid',\n  /** A server-side error ocurred during submission. */\n  Failed = 'failed',\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace, import/export\nexport namespace Status {\n  /**\n   * Converts a HTTP status code into a {@link Status}.\n   *\n   * @param code The HTTP response status code.\n   * @returns The send status or {@link Status.Unknown}.\n   */\n  export function fromHttpCode(code: number): Status {\n    if (code >= 200 && code < 300) {\n      return Status.Success;\n    }\n\n    if (code === 429) {\n      return Status.RateLimit;\n    }\n\n    if (code >= 400 && code < 500) {\n      return Status.Invalid;\n    }\n\n    if (code >= 500) {\n      return Status.Failed;\n    }\n\n    return Status.Unknown;\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isError(wat: any): boolean {\n  switch (Object.prototype.toString.call(wat)) {\n    case '[object Error]':\n      return true;\n    case '[object Exception]':\n      return true;\n    case '[object DOMException]':\n      return true;\n    default:\n      return isInstanceOf(wat, Error);\n  }\n}\n\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isErrorEvent(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object ErrorEvent]';\n}\n\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMError(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object DOMError]';\n}\n\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMException(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object DOMException]';\n}\n\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isString(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object String]';\n}\n\n/**\n * Checks whether given value's is a primitive (undefined, null, number, boolean, string)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPrimitive(wat: any): boolean {\n  return wat === null || (typeof wat !== 'object' && typeof wat !== 'function');\n}\n\n/**\n * Checks whether given value's type is an object literal\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPlainObject(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object Object]';\n}\n\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isEvent(wat: any): boolean {\n  return typeof Event !== 'undefined' && isInstanceOf(wat, Event);\n}\n\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isElement(wat: any): boolean {\n  return typeof Element !== 'undefined' && isInstanceOf(wat, Element);\n}\n\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isRegExp(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object RegExp]';\n}\n\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */\nexport function isThenable(wat: any): boolean {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return Boolean(wat && wat.then && typeof wat.then === 'function');\n}\n\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isSyntheticEvent(wat: any): boolean {\n  return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;\n}\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */\nexport function isInstanceOf(wat: any, base: any): boolean {\n  try {\n    return wat instanceof base;\n  } catch (_e) {\n    return false;\n  }\n}\n","import { isString } from './is';\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nexport function htmlTreeAsString(elem: unknown): string {\n  type SimpleNode = {\n    parentNode: SimpleNode;\n  } | null;\n\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem = elem as SimpleNode;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const MAX_OUTPUT_LEN = 80;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n\n    // eslint-disable-next-line no-plusplus\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds MAX_OUTPUT_LEN\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN)) {\n        break;\n      }\n\n      out.push(nextStr);\n\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el: unknown): string {\n  const elem = el as {\n    tagName?: string;\n    id?: string;\n    className?: string;\n    getAttribute(key: string): string;\n  };\n\n  const out = [];\n  let className;\n  let classes;\n  let key;\n  let attr;\n  let i;\n\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n\n  out.push(elem.tagName.toLowerCase());\n  if (elem.id) {\n    out.push(`#${elem.id}`);\n  }\n\n  // eslint-disable-next-line prefer-const\n  className = elem.className;\n  if (className && isString(className)) {\n    classes = className.split(/\\s+/);\n    for (i = 0; i < classes.length; i++) {\n      out.push(`.${classes[i]}`);\n    }\n  }\n  const allowedAttrs = ['type', 'name', 'title', 'alt'];\n  for (i = 0; i < allowedAttrs.length; i++) {\n    key = allowedAttrs[i];\n    attr = elem.getAttribute(key);\n    if (attr) {\n      out.push(`[${key}=\"${attr}\"]`);\n    }\n  }\n  return out.join('');\n}\n","export const setPrototypeOf =\n  Object.setPrototypeOf || ({ __proto__: [] } instanceof Array ? setProtoOf : mixinProperties);\n\n/**\n * setPrototypeOf polyfill using __proto__\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction setProtoOf<TTarget extends object, TProto>(obj: TTarget, proto: TProto): TTarget & TProto {\n  // @ts-ignore __proto__ does not exist on obj\n  obj.__proto__ = proto;\n  return obj as TTarget & TProto;\n}\n\n/**\n * setPrototypeOf polyfill using mixin\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction mixinProperties<TTarget extends object, TProto>(obj: TTarget, proto: TProto): TTarget & TProto {\n  for (const prop in proto) {\n    // eslint-disable-next-line no-prototype-builtins\n    if (!obj.hasOwnProperty(prop)) {\n      // @ts-ignore typescript complains about indexing so we remove\n      obj[prop] = proto[prop];\n    }\n  }\n\n  return obj as TTarget & TProto;\n}\n","import { setPrototypeOf } from './polyfill';\n\n/** An error emitted by Sentry SDKs and related utilities. */\nexport class SentryError extends Error {\n  /** Display name of this error instance. */\n  public name: string;\n\n  public constructor(public message: string) {\n    super(message);\n\n    this.name = new.target.prototype.constructor.name;\n    setPrototypeOf(this, new.target.prototype);\n  }\n}\n","import { DsnComponents, DsnLike, DsnProtocol } from '@sentry/types';\n\nimport { SentryError } from './error';\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+))?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n\n/** Error message */\nconst ERROR_MESSAGE = 'Invalid Dsn';\n\n/** The Sentry Dsn, identifying a Sentry instance and project. */\nexport class Dsn implements DsnComponents {\n  /** Protocol used to connect to Sentry. */\n  public protocol!: DsnProtocol;\n  /** Public authorization key. */\n  public user!: string;\n  /** Private authorization key (deprecated, optional). */\n  public pass!: string;\n  /** Hostname of the Sentry instance. */\n  public host!: string;\n  /** Port of the Sentry instance. */\n  public port!: string;\n  /** Path */\n  public path!: string;\n  /** Project ID */\n  public projectId!: string;\n\n  /** Creates a new Dsn component */\n  public constructor(from: DsnLike) {\n    if (typeof from === 'string') {\n      this._fromString(from);\n    } else {\n      this._fromComponents(from);\n    }\n\n    this._validate();\n  }\n\n  /**\n   * Renders the string representation of this Dsn.\n   *\n   * By default, this will render the public representation without the password\n   * component. To get the deprecated private representation, set `withPassword`\n   * to true.\n   *\n   * @param withPassword When set to true, the password will be included.\n   */\n  public toString(withPassword: boolean = false): string {\n    const { host, path, pass, port, projectId, protocol, user } = this;\n    return (\n      `${protocol}://${user}${withPassword && pass ? `:${pass}` : ''}` +\n      `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n    );\n  }\n\n  /** Parses a string into this Dsn. */\n  private _fromString(str: string): void {\n    const match = DSN_REGEX.exec(str);\n\n    if (!match) {\n      throw new SentryError(ERROR_MESSAGE);\n    }\n\n    const [protocol, user, pass = '', host, port = '', lastPath] = match.slice(1);\n    let path = '';\n    let projectId = lastPath;\n\n    const split = projectId.split('/');\n    if (split.length > 1) {\n      path = split.slice(0, -1).join('/');\n      projectId = split.pop() as string;\n    }\n\n    if (projectId) {\n      const projectMatch = projectId.match(/^\\d+/);\n      if (projectMatch) {\n        projectId = projectMatch[0];\n      }\n    }\n\n    this._fromComponents({ host, pass, path, projectId, port, protocol: protocol as DsnProtocol, user });\n  }\n\n  /** Maps Dsn components into this instance. */\n  private _fromComponents(components: DsnComponents): void {\n    this.protocol = components.protocol;\n    this.user = components.user;\n    this.pass = components.pass || '';\n    this.host = components.host;\n    this.port = components.port || '';\n    this.path = components.path || '';\n    this.projectId = components.projectId;\n  }\n\n  /** Validates this Dsn and throws on error. */\n  private _validate(): void {\n    ['protocol', 'user', 'host', 'projectId'].forEach(component => {\n      if (!this[component as keyof DsnComponents]) {\n        throw new SentryError(`${ERROR_MESSAGE}: ${component} missing`);\n      }\n    });\n\n    if (!this.projectId.match(/^\\d+$/)) {\n      throw new SentryError(`${ERROR_MESSAGE}: Invalid projectId ${this.projectId}`);\n    }\n\n    if (this.protocol !== 'http' && this.protocol !== 'https') {\n      throw new SentryError(`${ERROR_MESSAGE}: Invalid protocol ${this.protocol}`);\n    }\n\n    if (this.port && isNaN(parseInt(this.port, 10))) {\n      throw new SentryError(`${ERROR_MESSAGE}: Invalid port ${this.port}`);\n    }\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/**\n * Memo class used for decycle json objects. Uses WeakSet if available otherwise array.\n */\nexport class Memo {\n  /** Determines if WeakSet is available */\n  private readonly _hasWeakSet: boolean;\n  /** Either WeakSet or Array */\n  private readonly _inner: any;\n\n  public constructor() {\n    this._hasWeakSet = typeof WeakSet === 'function';\n    this._inner = this._hasWeakSet ? new WeakSet() : [];\n  }\n\n  /**\n   * Sets obj to remember.\n   * @param obj Object to remember\n   */\n  public memoize(obj: any): boolean {\n    if (this._hasWeakSet) {\n      if (this._inner.has(obj)) {\n        return true;\n      }\n      this._inner.add(obj);\n      return false;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let i = 0; i < this._inner.length; i++) {\n      const value = this._inner[i];\n      if (value === obj) {\n        return true;\n      }\n    }\n    this._inner.push(obj);\n    return false;\n  }\n\n  /**\n   * Removes object from internal storage.\n   * @param obj Object to forget\n   */\n  public unmemoize(obj: any): void {\n    if (this._hasWeakSet) {\n      this._inner.delete(obj);\n    } else {\n      for (let i = 0; i < this._inner.length; i++) {\n        if (this._inner[i] === obj) {\n          this._inner.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n}\n","const defaultFunctionName = '<anonymous>';\n\n/**\n * Safely extract function name from itself\n */\nexport function getFunctionName(fn: unknown): string {\n  try {\n    if (!fn || typeof fn !== 'function') {\n      return defaultFunctionName;\n    }\n    return fn.name || defaultFunctionName;\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    return defaultFunctionName;\n  }\n}\n","import { isRegExp, isString } from './is';\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nexport function truncate(str: string, max: number = 0): string {\n  if (typeof str !== 'string' || max === 0) {\n    return str;\n  }\n  return str.length <= max ? str : `${str.substr(0, max)}...`;\n}\n\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nexport function snipLine(line: string, colno: number): string {\n  let newLine = line;\n  const ll = newLine.length;\n  if (ll <= 150) {\n    return newLine;\n  }\n  if (colno > ll) {\n    // eslint-disable-next-line no-param-reassign\n    colno = ll;\n  }\n\n  let start = Math.max(colno - 60, 0);\n  if (start < 5) {\n    start = 0;\n  }\n\n  let end = Math.min(start + 140, ll);\n  if (end > ll - 5) {\n    end = ll;\n  }\n  if (end === ll) {\n    start = Math.max(end - 140, 0);\n  }\n\n  newLine = newLine.slice(start, end);\n  if (start > 0) {\n    newLine = `'{snip} ${newLine}`;\n  }\n  if (end < ll) {\n    newLine += ' {snip}';\n  }\n\n  return newLine;\n}\n\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function safeJoin(input: any[], delimiter?: string): string {\n  if (!Array.isArray(input)) {\n    return '';\n  }\n\n  const output = [];\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let i = 0; i < input.length; i++) {\n    const value = input[i];\n    try {\n      output.push(String(value));\n    } catch (e) {\n      output.push('[value cannot be serialized]');\n    }\n  }\n\n  return output.join(delimiter);\n}\n\n/**\n * Checks if the value matches a regex or includes the string\n * @param value The string value to be checked against\n * @param pattern Either a regex or a string that must be contained in value\n */\nexport function isMatchingPattern(value: string, pattern: RegExp | string): boolean {\n  if (!isString(value)) {\n    return false;\n  }\n\n  if (isRegExp(pattern)) {\n    return (pattern as RegExp).test(value);\n  }\n  if (typeof pattern === 'string') {\n    return value.indexOf(pattern) !== -1;\n  }\n  return false;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { ExtendedError, WrappedFunction } from '@sentry/types';\n\nimport { htmlTreeAsString } from './browser';\nimport { isElement, isError, isEvent, isInstanceOf, isPlainObject, isPrimitive, isSyntheticEvent } from './is';\nimport { Memo } from './memo';\nimport { getFunctionName } from './stacktrace';\nimport { truncate } from './string';\n\n/**\n * Wrap a given object method with a higher-order function\n *\n * @param source An object that contains a method to be wrapped.\n * @param name A name of method to be wrapped.\n * @param replacement A function that should be used to wrap a given method.\n * @returns void\n */\nexport function fill(source: { [key: string]: any }, name: string, replacement: (...args: any[]) => any): void {\n  if (!(name in source)) {\n    return;\n  }\n\n  const original = source[name] as () => any;\n  const wrapped = replacement(original) as WrappedFunction;\n\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  if (typeof wrapped === 'function') {\n    try {\n      wrapped.prototype = wrapped.prototype || {};\n      Object.defineProperties(wrapped, {\n        __sentry_original__: {\n          enumerable: false,\n          value: original,\n        },\n      });\n    } catch (_Oo) {\n      // This can throw if multiple fill happens on a global object like XMLHttpRequest\n      // Fixes https://github.com/getsentry/sentry-javascript/issues/2043\n    }\n  }\n\n  source[name] = wrapped;\n}\n\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n */\nexport function urlEncode(object: { [key: string]: any }): string {\n  return Object.keys(object)\n    .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(object[key])}`)\n    .join('&');\n}\n\n/**\n * Transforms any object into an object literal with all it's attributes\n * attached to it.\n *\n * @param value Initial source that we have to transform in order to be usable by the serializer\n */\nfunction getWalkSource(\n  value: any,\n): {\n  [key: string]: any;\n} {\n  if (isError(value)) {\n    const error = value as ExtendedError;\n    const err: {\n      [key: string]: any;\n      stack: string | undefined;\n      message: string;\n      name: string;\n    } = {\n      message: error.message,\n      name: error.name,\n      stack: error.stack,\n    };\n\n    for (const i in error) {\n      if (Object.prototype.hasOwnProperty.call(error, i)) {\n        err[i] = error[i];\n      }\n    }\n\n    return err;\n  }\n\n  if (isEvent(value)) {\n    /**\n     * Event-like interface that's usable in browser and node\n     */\n    interface SimpleEvent {\n      [key: string]: unknown;\n      type: string;\n      target?: unknown;\n      currentTarget?: unknown;\n    }\n\n    const event = value as SimpleEvent;\n\n    const source: {\n      [key: string]: any;\n    } = {};\n\n    source.type = event.type;\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      source.target = isElement(event.target)\n        ? htmlTreeAsString(event.target)\n        : Object.prototype.toString.call(event.target);\n    } catch (_oO) {\n      source.target = '<unknown>';\n    }\n\n    try {\n      source.currentTarget = isElement(event.currentTarget)\n        ? htmlTreeAsString(event.currentTarget)\n        : Object.prototype.toString.call(event.currentTarget);\n    } catch (_oO) {\n      source.currentTarget = '<unknown>';\n    }\n\n    if (typeof CustomEvent !== 'undefined' && isInstanceOf(value, CustomEvent)) {\n      source.detail = event.detail;\n    }\n\n    for (const i in event) {\n      if (Object.prototype.hasOwnProperty.call(event, i)) {\n        source[i] = event;\n      }\n    }\n\n    return source;\n  }\n\n  return value as {\n    [key: string]: any;\n  };\n}\n\n/** Calculates bytes size of input string */\nfunction utf8Length(value: string): number {\n  // eslint-disable-next-line no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n\n/** Calculates bytes size of input object */\nfunction jsonSize(value: any): number {\n  return utf8Length(JSON.stringify(value));\n}\n\n/** JSDoc */\nexport function normalizeToSize<T>(\n  object: { [key: string]: any },\n  // Default Node.js REPL depth\n  depth: number = 3,\n  // 100kB, as 200kB is max payload size, so half sounds reasonable\n  maxSize: number = 100 * 1024,\n): T {\n  const serialized = normalize(object, depth);\n\n  if (jsonSize(serialized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n\n  return serialized as T;\n}\n\n/** Transforms any input value into a string form, either primitive value or a type of the input */\nfunction serializeValue(value: any): any {\n  const type = Object.prototype.toString.call(value);\n\n  // Node.js REPL notation\n  if (typeof value === 'string') {\n    return value;\n  }\n  if (type === '[object Object]') {\n    return '[Object]';\n  }\n  if (type === '[object Array]') {\n    return '[Array]';\n  }\n\n  const normalized = normalizeValue(value);\n  return isPrimitive(normalized) ? normalized : type;\n}\n\n/**\n * normalizeValue()\n *\n * Takes unserializable input and make it serializable friendly\n *\n * - translates undefined/NaN values to \"[undefined]\"/\"[NaN]\" respectively,\n * - serializes Error objects\n * - filter global objects\n */\nfunction normalizeValue<T>(value: T, key?: any): T | string {\n  if (key === 'domain' && value && typeof value === 'object' && ((value as unknown) as { _events: any })._events) {\n    return '[Domain]';\n  }\n\n  if (key === 'domainEmitter') {\n    return '[DomainEmitter]';\n  }\n\n  if (typeof (global as any) !== 'undefined' && (value as unknown) === global) {\n    return '[Global]';\n  }\n\n  if (typeof (window as any) !== 'undefined' && (value as unknown) === window) {\n    return '[Window]';\n  }\n\n  if (typeof (document as any) !== 'undefined' && (value as unknown) === document) {\n    return '[Document]';\n  }\n\n  // React's SyntheticEvent thingy\n  if (isSyntheticEvent(value)) {\n    return '[SyntheticEvent]';\n  }\n\n  if (typeof value === 'number' && value !== value) {\n    return '[NaN]';\n  }\n\n  if (value === void 0) {\n    return '[undefined]';\n  }\n\n  if (typeof value === 'function') {\n    return `[Function: ${getFunctionName(value)}]`;\n  }\n\n  return value;\n}\n\n/**\n * Walks an object to perform a normalization on it\n *\n * @param key of object that's walked in current iteration\n * @param value object to be walked\n * @param depth Optional number indicating how deep should walking be performed\n * @param memo Optional Memo class handling decycling\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function walk(key: string, value: any, depth: number = +Infinity, memo: Memo = new Memo()): any {\n  // If we reach the maximum depth, serialize whatever has left\n  if (depth === 0) {\n    return serializeValue(value);\n  }\n\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  // If value implements `toJSON` method, call it and return early\n  if (value !== null && value !== undefined && typeof value.toJSON === 'function') {\n    return value.toJSON();\n  }\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n\n  // If normalized value is a primitive, there are no branches left to walk, so we can just bail out, as theres no point in going down that branch any further\n  const normalized = normalizeValue(value, key);\n  if (isPrimitive(normalized)) {\n    return normalized;\n  }\n\n  // Create source that we will use for next itterations, either objectified error object (Error type with extracted keys:value pairs) or the input itself\n  const source = getWalkSource(value);\n\n  // Create an accumulator that will act as a parent for all future itterations of that branch\n  const acc = Array.isArray(value) ? [] : {};\n\n  // If we already walked that branch, bail out, as it's circular reference\n  if (memo.memoize(value)) {\n    return '[Circular ~]';\n  }\n\n  // Walk all keys of the source\n  for (const innerKey in source) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(source, innerKey)) {\n      continue;\n    }\n    // Recursively walk through all the child nodes\n    (acc as { [key: string]: any })[innerKey] = walk(innerKey, source[innerKey], depth - 1, memo);\n  }\n\n  // Once walked through all the branches, remove the parent from memo storage\n  memo.unmemoize(value);\n\n  // Return accumulated values\n  return acc;\n}\n\n/**\n * normalize()\n *\n * - Creates a copy to prevent original input mutation\n * - Skip non-enumerablers\n * - Calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializeable values (undefined/NaN/Functions) to serializable format\n * - Translates known global objects/Classes to a string representations\n * - Takes care of Error objects serialization\n * - Optionally limit depth of final output\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function normalize(input: any, depth?: number): any {\n  try {\n    return JSON.parse(JSON.stringify(input, (key: string, value: any) => walk(key, value, depth)));\n  } catch (_oO) {\n    return '**non-serializable**';\n  }\n}\n\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function extractExceptionKeysForMessage(exception: any, maxLength: number = 40): string {\n  const keys = Object.keys(getWalkSource(exception));\n  keys.sort();\n\n  if (!keys.length) {\n    return '[object has no keys]';\n  }\n\n  if (keys[0].length >= maxLength) {\n    return truncate(keys[0], maxLength);\n  }\n\n  for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    const serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return truncate(serialized, maxLength);\n  }\n\n  return '';\n}\n\n/**\n * Given any object, return the new object with removed keys that value was `undefined`.\n * Works recursively on objects and arrays.\n */\nexport function dropUndefinedKeys<T>(val: T): T {\n  if (isPlainObject(val)) {\n    const obj = val as { [key: string]: any };\n    const rv: { [key: string]: any } = {};\n    for (const key of Object.keys(obj)) {\n      if (typeof obj[key] !== 'undefined') {\n        rv[key] = dropUndefinedKeys(obj[key]);\n      }\n    }\n    return rv as T;\n  }\n\n  if (Array.isArray(val)) {\n    return val.map(dropUndefinedKeys) as any;\n  }\n\n  return val;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { ExtractedNodeRequestData } from '@sentry/types';\n\nimport { isString } from './is';\nimport { normalize } from './object';\n\n/**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */\nexport function isNodeEnv(): boolean {\n  return Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';\n}\n\n/**\n * Requires a module which is protected against bundler minification.\n *\n * @param request The module path to resolve\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function dynamicRequire(mod: any, request: string): any {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return mod.require(request);\n}\n\n/** Default request keys that'll be used to extract data from the request */\nconst DEFAULT_REQUEST_KEYS = ['cookies', 'data', 'headers', 'method', 'query_string', 'url'];\n\n/**\n * Normalizes data from the request object, accounting for framework differences.\n *\n * @param req The request object from which to extract data\n * @param keys An optional array of keys to include in the normalized data. Defaults to DEFAULT_REQUEST_KEYS if not\n * provided.\n * @returns An object containing normalized request data\n */\nexport function extractNodeRequestData(\n  req: { [key: string]: any },\n  keys: string[] = DEFAULT_REQUEST_KEYS,\n): ExtractedNodeRequestData {\n  // make sure we can safely use dynamicRequire below\n  if (!isNodeEnv()) {\n    throw new Error(\"Can't get node request data outside of a node environment\");\n  }\n\n  const requestData: { [key: string]: any } = {};\n\n  // headers:\n  //   node, express: req.headers\n  //   koa: req.header\n  const headers = (req.headers || req.header || {}) as {\n    host?: string;\n    cookie?: string;\n  };\n  // method:\n  //   node, express, koa: req.method\n  const method = req.method;\n  // host:\n  //   express: req.hostname in > 4 and req.host in < 4\n  //   koa: req.host\n  //   node: req.headers.host\n  const host = req.hostname || req.host || headers.host || '<no host>';\n  // protocol:\n  //   node: <n/a>\n  //   express, koa: req.protocol\n  const protocol =\n    req.protocol === 'https' || req.secure || ((req.socket || {}) as { encrypted?: boolean }).encrypted\n      ? 'https'\n      : 'http';\n  // url (including path and query string):\n  //   node, express: req.originalUrl\n  //   koa: req.url\n  const originalUrl = (req.originalUrl || req.url) as string;\n  // absolute url\n  const absoluteUrl = `${protocol}://${host}${originalUrl}`;\n\n  keys.forEach(key => {\n    switch (key) {\n      case 'headers':\n        requestData.headers = headers;\n        break;\n      case 'method':\n        requestData.method = method;\n        break;\n      case 'url':\n        requestData.url = absoluteUrl;\n        break;\n      case 'cookies':\n        // cookies:\n        //   node, express, koa: req.headers.cookie\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        requestData.cookies = dynamicRequire(module, 'cookie').parse(headers.cookie || '');\n        break;\n      case 'query_string':\n        // query string:\n        //   node: req.url (raw)\n        //   express, koa: req.query\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        requestData.query_string = dynamicRequire(module, 'url').parse(originalUrl || '', false).query;\n        break;\n      case 'data':\n        if (method === 'GET' || method === 'HEAD') {\n          break;\n        }\n        // body data:\n        //   node, express, koa: req.body\n        if (req.body !== undefined) {\n          requestData.data = isString(req.body) ? req.body : JSON.stringify(normalize(req.body));\n        }\n        break;\n      default:\n        if ({}.hasOwnProperty.call(req, key)) {\n          requestData[key] = (req as { [key: string]: any })[key];\n        }\n    }\n  });\n\n  return requestData;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Event, Integration, StackFrame, WrappedFunction } from '@sentry/types';\n\nimport { isNodeEnv } from './node';\nimport { snipLine } from './string';\n\n/** Internal */\ninterface SentryGlobal {\n  Sentry?: {\n    Integrations?: Integration[];\n  };\n  SENTRY_ENVIRONMENT?: string;\n  SENTRY_DSN?: string;\n  SENTRY_RELEASE?: {\n    id?: string;\n  };\n  __SENTRY__: {\n    globalEventProcessors: any;\n    hub: any;\n    logger: any;\n  };\n}\n\nconst fallbackGlobalObject = {};\n\n/**\n * Safely get global scope object\n *\n * @returns Global scope object\n */\nexport function getGlobalObject<T>(): T & SentryGlobal {\n  return (isNodeEnv()\n    ? global\n    : typeof window !== 'undefined'\n    ? window\n    : typeof self !== 'undefined'\n    ? self\n    : fallbackGlobalObject) as T & SentryGlobal;\n}\n\n/**\n * Extended Window interface that allows for Crypto API usage in IE browsers\n */\ninterface MsCryptoWindow extends Window {\n  msCrypto?: Crypto;\n}\n\n/**\n * UUID4 generator\n *\n * @returns string Generated UUID4.\n */\nexport function uuid4(): string {\n  const global = getGlobalObject() as MsCryptoWindow;\n  const crypto = global.crypto || global.msCrypto;\n\n  if (!(crypto === void 0) && crypto.getRandomValues) {\n    // Use window.crypto API if available\n    const arr = new Uint16Array(8);\n    crypto.getRandomValues(arr);\n\n    // set 4 in byte 7\n    // eslint-disable-next-line no-bitwise\n    arr[3] = (arr[3] & 0xfff) | 0x4000;\n    // set 2 most significant bits of byte 9 to '10'\n    // eslint-disable-next-line no-bitwise\n    arr[4] = (arr[4] & 0x3fff) | 0x8000;\n\n    const pad = (num: number): string => {\n      let v = num.toString(16);\n      while (v.length < 4) {\n        v = `0${v}`;\n      }\n      return v;\n    };\n\n    return (\n      pad(arr[0]) + pad(arr[1]) + pad(arr[2]) + pad(arr[3]) + pad(arr[4]) + pad(arr[5]) + pad(arr[6]) + pad(arr[7])\n    );\n  }\n  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n  return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    // eslint-disable-next-line no-bitwise\n    const r = (Math.random() * 16) | 0;\n    // eslint-disable-next-line no-bitwise\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\nexport function parseUrl(\n  url: string,\n): {\n  host?: string;\n  path?: string;\n  protocol?: string;\n  relative?: string;\n} {\n  if (!url) {\n    return {};\n  }\n\n  const match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\n  if (!match) {\n    return {};\n  }\n\n  // coerce to undefined values to empty string so we don't get 'undefined'\n  const query = match[6] || '';\n  const fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    relative: match[5] + query + fragment, // everything minus origin\n  };\n}\n\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */\nexport function getEventDescription(event: Event): string {\n  if (event.message) {\n    return event.message;\n  }\n  if (event.exception && event.exception.values && event.exception.values[0]) {\n    const exception = event.exception.values[0];\n\n    if (exception.type && exception.value) {\n      return `${exception.type}: ${exception.value}`;\n    }\n    return exception.type || exception.value || event.event_id || '<unknown>';\n  }\n  return event.event_id || '<unknown>';\n}\n\n/** JSDoc */\ninterface ExtensibleConsole extends Console {\n  [key: string]: any;\n}\n\n/** JSDoc */\nexport function consoleSandbox(callback: () => any): any {\n  const global = getGlobalObject<Window>();\n  const levels = ['debug', 'info', 'warn', 'error', 'log', 'assert'];\n\n  if (!('console' in global)) {\n    return callback();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  const originalConsole = (global as any).console as ExtensibleConsole;\n  const wrappedLevels: { [key: string]: any } = {};\n\n  // Restore all wrapped console methods\n  levels.forEach(level => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (level in (global as any).console && (originalConsole[level] as WrappedFunction).__sentry_original__) {\n      wrappedLevels[level] = originalConsole[level] as WrappedFunction;\n      originalConsole[level] = (originalConsole[level] as WrappedFunction).__sentry_original__;\n    }\n  });\n\n  // Perform callback manipulations\n  const result = callback();\n\n  // Revert restoration to wrapped state\n  Object.keys(wrappedLevels).forEach(level => {\n    originalConsole[level] = wrappedLevels[level];\n  });\n\n  return result;\n}\n\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */\nexport function addExceptionTypeValue(event: Event, value?: string, type?: string): void {\n  event.exception = event.exception || {};\n  event.exception.values = event.exception.values || [];\n  event.exception.values[0] = event.exception.values[0] || {};\n  event.exception.values[0].value = event.exception.values[0].value || value || '';\n  event.exception.values[0].type = event.exception.values[0].type || type || 'Error';\n}\n\n/**\n * Adds exception mechanism to a given event.\n * @param event The event to modify.\n * @param mechanism Mechanism of the mechanism.\n * @hidden\n */\nexport function addExceptionMechanism(\n  event: Event,\n  mechanism: {\n    [key: string]: any;\n  } = {},\n): void {\n  // TODO: Use real type with `keyof Mechanism` thingy and maybe make it better?\n  try {\n    // @ts-ignore Type 'Mechanism | {}' is not assignable to type 'Mechanism | undefined'\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    event.exception!.values![0].mechanism = event.exception!.values![0].mechanism || {};\n    Object.keys(mechanism).forEach(key => {\n      // @ts-ignore Mechanism has no index signature\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      event.exception!.values![0].mechanism[key] = mechanism[key];\n    });\n  } catch (_oO) {\n    // no-empty\n  }\n}\n\n/**\n * A safe form of location.href\n */\nexport function getLocationHref(): string {\n  try {\n    return document.location.href;\n  } catch (oO) {\n    return '';\n  }\n}\n\n// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nconst SEMVER_REGEXP = /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n\n/**\n * Represents Semantic Versioning object\n */\ninterface SemVer {\n  major?: number;\n  minor?: number;\n  patch?: number;\n  prerelease?: string;\n  buildmetadata?: string;\n}\n\n/**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */\nexport function parseSemver(input: string): SemVer {\n  const match = input.match(SEMVER_REGEXP) || [];\n  const major = parseInt(match[1], 10);\n  const minor = parseInt(match[2], 10);\n  const patch = parseInt(match[3], 10);\n  return {\n    buildmetadata: match[5],\n    major: isNaN(major) ? undefined : major,\n    minor: isNaN(minor) ? undefined : minor,\n    patch: isNaN(patch) ? undefined : patch,\n    prerelease: match[4],\n  };\n}\n\nconst defaultRetryAfter = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param now current unix timestamp\n * @param header string representation of 'Retry-After' header\n */\nexport function parseRetryAfterHeader(now: number, header?: string | number | null): number {\n  if (!header) {\n    return defaultRetryAfter;\n  }\n\n  const headerDelay = parseInt(`${header}`, 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n\n  const headerDate = Date.parse(`${header}`);\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n\n  return defaultRetryAfter;\n}\n\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */\nexport function addContextToFrame(lines: string[], frame: StackFrame, linesOfContext: number = 5): void {\n  const lineno = frame.lineno || 0;\n  const maxLines = lines.length;\n  const sourceLine = Math.max(Math.min(maxLines, lineno - 1), 0);\n\n  frame.pre_context = lines\n    .slice(Math.max(0, sourceLine - linesOfContext), sourceLine)\n    .map((line: string) => snipLine(line, 0));\n\n  frame.context_line = snipLine(lines[Math.min(maxLines - 1, sourceLine)], frame.colno || 0);\n\n  frame.post_context = lines\n    .slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext)\n    .map((line: string) => snipLine(line, 0));\n}\n\n/**\n * Strip the query string and fragment off of a given URL or path (if present)\n *\n * @param urlPath Full URL or path, including possible query string and/or fragment\n * @returns URL or path without query string or fragment\n */\nexport function stripUrlQueryAndFragment(urlPath: string): string {\n  // eslint-disable-next-line no-useless-escape\n  return urlPath.split(/[\\?#]/, 1)[0];\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { consoleSandbox, getGlobalObject } from './misc';\n\n// TODO: Implement different loggers for different environments\nconst global = getGlobalObject<Window | NodeJS.Global>();\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\n/** JSDoc */\nclass Logger {\n  /** JSDoc */\n  private _enabled: boolean;\n\n  /** JSDoc */\n  public constructor() {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public disable(): void {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public enable(): void {\n    this._enabled = true;\n  }\n\n  /** JSDoc */\n  public log(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.log(`${PREFIX}[Log]: ${args.join(' ')}`);\n    });\n  }\n\n  /** JSDoc */\n  public warn(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.warn(`${PREFIX}[Warn]: ${args.join(' ')}`);\n    });\n  }\n\n  /** JSDoc */\n  public error(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.error(`${PREFIX}[Error]: ${args.join(' ')}`);\n    });\n  }\n}\n\n// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\nglobal.__SENTRY__ = global.__SENTRY__ || {};\nconst logger = (global.__SENTRY__.logger as Logger) || (global.__SENTRY__.logger = new Logger());\n\nexport { logger };\n","import { logger } from './logger';\nimport { getGlobalObject } from './misc';\n\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsErrorEvent(): boolean {\n  try {\n    new ErrorEvent('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMError(): boolean {\n  try {\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-ignore It really needs 1 argument, not 0.\n    new DOMError('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMException(): boolean {\n  try {\n    new DOMException('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsFetch(): boolean {\n  if (!('fetch' in getGlobalObject<Window>())) {\n    return false;\n  }\n\n  try {\n    new Headers();\n    new Request('');\n    new Response();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * isNativeFetch checks if the given function is a native implementation of fetch()\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isNativeFetch(func: Function): boolean {\n  return func && /^function fetch\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */\nexport function supportsNativeFetch(): boolean {\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  const global = getGlobalObject<Window>();\n\n  // Fast path to avoid DOM I/O\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  if (isNativeFetch(global.fetch)) {\n    return true;\n  }\n\n  // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n  // so create a \"pure\" iframe to see if that has native fetch\n  let result = false;\n  const doc = global.document;\n  // eslint-disable-next-line deprecation/deprecation\n  if (doc && typeof (doc.createElement as unknown) === `function`) {\n    try {\n      const sandbox = doc.createElement('iframe');\n      sandbox.hidden = true;\n      doc.head.appendChild(sandbox);\n      if (sandbox.contentWindow && sandbox.contentWindow.fetch) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        result = isNativeFetch(sandbox.contentWindow.fetch);\n      }\n      doc.head.removeChild(sandbox);\n    } catch (err) {\n      logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReportingObserver(): boolean {\n  return 'ReportingObserver' in getGlobalObject();\n}\n\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReferrerPolicy(): boolean {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n  // https://caniuse.com/#feat=referrer-policy\n  // It doesn't. And it throw exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  try {\n    new Request('_', {\n      referrerPolicy: 'origin' as ReferrerPolicy,\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsHistory(): boolean {\n  // NOTE: in Chrome App environment, touching history.pushState, *even inside\n  //       a try/catch block*, will cause Chrome to output an error to console.error\n  // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n  const global = getGlobalObject<Window>();\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const chrome = (global as any).chrome;\n  const isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n  const hasHistoryApi = 'history' in global && !!global.history.pushState && !!global.history.replaceState;\n\n  return !isChromePackagedApp && hasHistoryApi;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport { WrappedFunction } from '@sentry/types';\n\nimport { isInstanceOf, isString } from './is';\nimport { logger } from './logger';\nimport { getGlobalObject } from './misc';\nimport { fill } from './object';\nimport { getFunctionName } from './stacktrace';\nimport { supportsHistory, supportsNativeFetch } from './supports';\n\nconst global = getGlobalObject<Window>();\n\n/** Object describing handler that will be triggered for a given `type` of instrumentation */\ninterface InstrumentHandler {\n  type: InstrumentHandlerType;\n  callback: InstrumentHandlerCallback;\n}\ntype InstrumentHandlerType =\n  | 'console'\n  | 'dom'\n  | 'fetch'\n  | 'history'\n  | 'sentry'\n  | 'xhr'\n  | 'error'\n  | 'unhandledrejection';\ntype InstrumentHandlerCallback = (data: any) => void;\n\n/**\n * Instrument native APIs to call handlers that can be used to create breadcrumbs, APM spans etc.\n *  - Console API\n *  - Fetch API\n *  - XHR API\n *  - History API\n *  - DOM API (click/typing)\n *  - Error API\n *  - UnhandledRejection API\n */\n\nconst handlers: { [key in InstrumentHandlerType]?: InstrumentHandlerCallback[] } = {};\nconst instrumented: { [key in InstrumentHandlerType]?: boolean } = {};\n\n/** Instruments given API */\nfunction instrument(type: InstrumentHandlerType): void {\n  if (instrumented[type]) {\n    return;\n  }\n\n  instrumented[type] = true;\n\n  switch (type) {\n    case 'console':\n      instrumentConsole();\n      break;\n    case 'dom':\n      instrumentDOM();\n      break;\n    case 'xhr':\n      instrumentXHR();\n      break;\n    case 'fetch':\n      instrumentFetch();\n      break;\n    case 'history':\n      instrumentHistory();\n      break;\n    case 'error':\n      instrumentError();\n      break;\n    case 'unhandledrejection':\n      instrumentUnhandledRejection();\n      break;\n    default:\n      logger.warn('unknown instrumentation type:', type);\n  }\n}\n\n/**\n * Add handler that will be called when given type of instrumentation triggers.\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addInstrumentationHandler(handler: InstrumentHandler): void {\n  if (!handler || typeof handler.type !== 'string' || typeof handler.callback !== 'function') {\n    return;\n  }\n  handlers[handler.type] = handlers[handler.type] || [];\n  (handlers[handler.type] as InstrumentHandlerCallback[]).push(handler.callback);\n  instrument(handler.type);\n}\n\n/** JSDoc */\nfunction triggerHandlers(type: InstrumentHandlerType, data: any): void {\n  if (!type || !handlers[type]) {\n    return;\n  }\n\n  for (const handler of handlers[type] || []) {\n    try {\n      handler(data);\n    } catch (e) {\n      logger.error(\n        `Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${getFunctionName(\n          handler,\n        )}\\nError: ${e}`,\n      );\n    }\n  }\n}\n\n/** JSDoc */\nfunction instrumentConsole(): void {\n  if (!('console' in global)) {\n    return;\n  }\n\n  ['debug', 'info', 'warn', 'error', 'log', 'assert'].forEach(function(level: string): void {\n    if (!(level in global.console)) {\n      return;\n    }\n\n    fill(global.console, level, function(originalConsoleLevel: () => any): Function {\n      return function(...args: any[]): void {\n        triggerHandlers('console', { args, level });\n\n        // this fails for some browsers. :(\n        if (originalConsoleLevel) {\n          Function.prototype.apply.call(originalConsoleLevel, global.console, args);\n        }\n      };\n    });\n  });\n}\n\n/** JSDoc */\nfunction instrumentFetch(): void {\n  if (!supportsNativeFetch()) {\n    return;\n  }\n\n  fill(global, 'fetch', function(originalFetch: () => void): () => void {\n    return function(...args: any[]): void {\n      const handlerData = {\n        args,\n        fetchData: {\n          method: getFetchMethod(args),\n          url: getFetchUrl(args),\n        },\n        startTimestamp: Date.now(),\n      };\n\n      triggerHandlers('fetch', {\n        ...handlerData,\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalFetch.apply(global, args).then(\n        (response: Response) => {\n          triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            response,\n          });\n          return response;\n        },\n        (error: Error) => {\n          triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            error,\n          });\n          // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n          //       it means the sentry.javascript SDK caught an error invoking your application code.\n          //       This is expected behavior and NOT indicative of a bug with sentry.javascript.\n          throw error;\n        },\n      );\n    };\n  });\n}\n\ntype XHRSendInput = null | Blob | BufferSource | FormData | URLSearchParams | string;\n\n/** JSDoc */\ninterface SentryWrappedXMLHttpRequest extends XMLHttpRequest {\n  [key: string]: any;\n  __sentry_xhr__?: {\n    method?: string;\n    url?: string;\n    status_code?: number;\n    body?: XHRSendInput;\n  };\n}\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/** Extract `method` from fetch call arguments */\nfunction getFetchMethod(fetchArgs: any[] = []): string {\n  if ('Request' in global && isInstanceOf(fetchArgs[0], Request) && fetchArgs[0].method) {\n    return String(fetchArgs[0].method).toUpperCase();\n  }\n  if (fetchArgs[1] && fetchArgs[1].method) {\n    return String(fetchArgs[1].method).toUpperCase();\n  }\n  return 'GET';\n}\n\n/** Extract `url` from fetch call arguments */\nfunction getFetchUrl(fetchArgs: any[] = []): string {\n  if (typeof fetchArgs[0] === 'string') {\n    return fetchArgs[0];\n  }\n  if ('Request' in global && isInstanceOf(fetchArgs[0], Request)) {\n    return fetchArgs[0].url;\n  }\n  return String(fetchArgs[0]);\n}\n/* eslint-enable @typescript-eslint/no-unsafe-member-access */\n\n/** JSDoc */\nfunction instrumentXHR(): void {\n  if (!('XMLHttpRequest' in global)) {\n    return;\n  }\n\n  // Poor man's implementation of ES6 `Map`, tracking and keeping in sync key and value separately.\n  const requestKeys: XMLHttpRequest[] = [];\n  const requestValues: Array<any>[] = [];\n  const xhrproto = XMLHttpRequest.prototype;\n\n  fill(xhrproto, 'open', function(originalOpen: () => void): () => void {\n    return function(this: SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const xhr = this;\n      const url = args[1];\n      xhr.__sentry_xhr__ = {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        method: isString(args[0]) ? args[0].toUpperCase() : args[0],\n        url: args[1],\n      };\n\n      // if Sentry key appears in URL, don't capture it as a request\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (isString(url) && xhr.__sentry_xhr__.method === 'POST' && url.match(/sentry_key/)) {\n        xhr.__sentry_own_request__ = true;\n      }\n\n      const onreadystatechangeHandler = function(): void {\n        if (xhr.readyState === 4) {\n          try {\n            // touching statusCode in some platforms throws\n            // an exception\n            if (xhr.__sentry_xhr__) {\n              xhr.__sentry_xhr__.status_code = xhr.status;\n            }\n          } catch (e) {\n            /* do nothing */\n          }\n\n          try {\n            const requestPos = requestKeys.indexOf(xhr);\n            if (requestPos !== -1) {\n              // Make sure to pop both key and value to keep it in sync.\n              requestKeys.splice(requestPos);\n              const args = requestValues.splice(requestPos)[0];\n              if (xhr.__sentry_xhr__ && args[0] !== undefined) {\n                xhr.__sentry_xhr__.body = args[0] as XHRSendInput;\n              }\n            }\n          } catch (e) {\n            /* do nothing */\n          }\n\n          triggerHandlers('xhr', {\n            args,\n            endTimestamp: Date.now(),\n            startTimestamp: Date.now(),\n            xhr,\n          });\n        }\n      };\n\n      if ('onreadystatechange' in xhr && typeof xhr.onreadystatechange === 'function') {\n        fill(xhr, 'onreadystatechange', function(original: WrappedFunction): Function {\n          return function(...readyStateArgs: any[]): void {\n            onreadystatechangeHandler();\n            return original.apply(xhr, readyStateArgs);\n          };\n        });\n      } else {\n        xhr.addEventListener('readystatechange', onreadystatechangeHandler);\n      }\n\n      return originalOpen.apply(xhr, args);\n    };\n  });\n\n  fill(xhrproto, 'send', function(originalSend: () => void): () => void {\n    return function(this: SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      requestKeys.push(this);\n      requestValues.push(args);\n\n      triggerHandlers('xhr', {\n        args,\n        startTimestamp: Date.now(),\n        xhr: this,\n      });\n\n      return originalSend.apply(this, args);\n    };\n  });\n}\n\nlet lastHref: string;\n\n/** JSDoc */\nfunction instrumentHistory(): void {\n  if (!supportsHistory()) {\n    return;\n  }\n\n  const oldOnPopState = global.onpopstate;\n  global.onpopstate = function(this: WindowEventHandlers, ...args: any[]): any {\n    const to = global.location.href;\n    // keep track of the current URL state, as we always receive only the updated state\n    const from = lastHref;\n    lastHref = to;\n    triggerHandlers('history', {\n      from,\n      to,\n    });\n    if (oldOnPopState) {\n      return oldOnPopState.apply(this, args);\n    }\n  };\n\n  /** @hidden */\n  function historyReplacementFunction(originalHistoryFunction: () => void): () => void {\n    return function(this: History, ...args: any[]): void {\n      const url = args.length > 2 ? args[2] : undefined;\n      if (url) {\n        // coerce to string (this is what pushState does)\n        const from = lastHref;\n        const to = String(url);\n        // keep track of the current URL state, as we always receive only the updated state\n        lastHref = to;\n        triggerHandlers('history', {\n          from,\n          to,\n        });\n      }\n      return originalHistoryFunction.apply(this, args);\n    };\n  }\n\n  fill(global.history, 'pushState', historyReplacementFunction);\n  fill(global.history, 'replaceState', historyReplacementFunction);\n}\n\n/** JSDoc */\nfunction instrumentDOM(): void {\n  if (!('document' in global)) {\n    return;\n  }\n\n  // Capture breadcrumbs from any click that is unhandled / bubbled up all the way\n  // to the document. Do this before we instrument addEventListener.\n  global.document.addEventListener('click', domEventHandler('click', triggerHandlers.bind(null, 'dom')), false);\n  global.document.addEventListener('keypress', keypressEventHandler(triggerHandlers.bind(null, 'dom')), false);\n\n  // After hooking into document bubbled up click and keypresses events, we also hook into user handled click & keypresses.\n  ['EventTarget', 'Node'].forEach((target: string) => {\n    /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n    const proto = (global as any)[target] && (global as any)[target].prototype;\n\n    // eslint-disable-next-line no-prototype-builtins\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n    /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n\n    fill(proto, 'addEventListener', function(\n      original: () => void,\n    ): (\n      eventName: string,\n      fn: EventListenerOrEventListenerObject,\n      options?: boolean | AddEventListenerOptions,\n    ) => void {\n      return function(\n        this: any,\n        eventName: string,\n        fn: EventListenerOrEventListenerObject,\n        options?: boolean | AddEventListenerOptions,\n      ): (eventName: string, fn: EventListenerOrEventListenerObject, capture?: boolean, secure?: boolean) => void {\n        if (fn && (fn as EventListenerObject).handleEvent) {\n          if (eventName === 'click') {\n            fill(fn, 'handleEvent', function(innerOriginal: () => void): (caughtEvent: Event) => void {\n              return function(this: any, event: Event): (event: Event) => void {\n                domEventHandler('click', triggerHandlers.bind(null, 'dom'))(event);\n                return innerOriginal.call(this, event);\n              };\n            });\n          }\n          if (eventName === 'keypress') {\n            fill(fn, 'handleEvent', function(innerOriginal: () => void): (caughtEvent: Event) => void {\n              return function(this: any, event: Event): (event: Event) => void {\n                keypressEventHandler(triggerHandlers.bind(null, 'dom'))(event);\n                return innerOriginal.call(this, event);\n              };\n            });\n          }\n        } else {\n          if (eventName === 'click') {\n            domEventHandler('click', triggerHandlers.bind(null, 'dom'), true)(this);\n          }\n          if (eventName === 'keypress') {\n            keypressEventHandler(triggerHandlers.bind(null, 'dom'))(this);\n          }\n        }\n\n        return original.call(this, eventName, fn, options);\n      };\n    });\n\n    fill(proto, 'removeEventListener', function(\n      original: () => void,\n    ): (\n      this: any,\n      eventName: string,\n      fn: EventListenerOrEventListenerObject,\n      options?: boolean | EventListenerOptions,\n    ) => () => void {\n      return function(\n        this: any,\n        eventName: string,\n        fn: EventListenerOrEventListenerObject,\n        options?: boolean | EventListenerOptions,\n      ): () => void {\n        try {\n          original.call(this, eventName, ((fn as unknown) as WrappedFunction).__sentry_wrapped__, options);\n        } catch (e) {\n          // ignore, accessing __sentry_wrapped__ will throw in some Selenium environments\n        }\n        return original.call(this, eventName, fn, options);\n      };\n    });\n  });\n}\n\nconst debounceDuration: number = 1000;\nlet debounceTimer: number = 0;\nlet keypressTimeout: number | undefined;\nlet lastCapturedEvent: Event | undefined;\n\n/**\n * Wraps addEventListener to capture UI breadcrumbs\n * @param name the event name (e.g. \"click\")\n * @param handler function that will be triggered\n * @param debounce decides whether it should wait till another event loop\n * @returns wrapped breadcrumb events handler\n * @hidden\n */\nfunction domEventHandler(name: string, handler: Function, debounce: boolean = false): (event: Event) => void {\n  return (event: Event): void => {\n    // reset keypress timeout; e.g. triggering a 'click' after\n    // a 'keypress' will reset the keypress debounce so that a new\n    // set of keypresses can be recorded\n    keypressTimeout = undefined;\n    // It's possible this handler might trigger multiple times for the same\n    // event (e.g. event propagation through node ancestors). Ignore if we've\n    // already captured the event.\n    if (!event || lastCapturedEvent === event) {\n      return;\n    }\n\n    lastCapturedEvent = event;\n\n    if (debounceTimer) {\n      clearTimeout(debounceTimer);\n    }\n\n    if (debounce) {\n      debounceTimer = setTimeout(() => {\n        handler({ event, name });\n      });\n    } else {\n      handler({ event, name });\n    }\n  };\n}\n\n/**\n * Wraps addEventListener to capture keypress UI events\n * @param handler function that will be triggered\n * @returns wrapped keypress events handler\n * @hidden\n */\nfunction keypressEventHandler(handler: Function): (event: Event) => void {\n  // TODO: if somehow user switches keypress target before\n  //       debounce timeout is triggered, we will only capture\n  //       a single breadcrumb from the FIRST target (acceptable?)\n  return (event: Event): void => {\n    let target;\n\n    try {\n      target = event.target;\n    } catch (e) {\n      // just accessing event properties can throw an exception in some rare circumstances\n      // see: https://github.com/getsentry/raven-js/issues/838\n      return;\n    }\n\n    const tagName = target && (target as HTMLElement).tagName;\n\n    // only consider keypress events on actual input elements\n    // this will disregard keypresses targeting body (e.g. tabbing\n    // through elements, hotkeys, etc)\n    if (!tagName || (tagName !== 'INPUT' && tagName !== 'TEXTAREA' && !(target as HTMLElement).isContentEditable)) {\n      return;\n    }\n\n    // record first keypress in a series, but ignore subsequent\n    // keypresses until debounce clears\n    if (!keypressTimeout) {\n      domEventHandler('input', handler)(event);\n    }\n    clearTimeout(keypressTimeout);\n\n    keypressTimeout = (setTimeout(() => {\n      keypressTimeout = undefined;\n    }, debounceDuration) as any) as number;\n  };\n}\n\nlet _oldOnErrorHandler: OnErrorEventHandler = null;\n/** JSDoc */\nfunction instrumentError(): void {\n  _oldOnErrorHandler = global.onerror;\n\n  global.onerror = function(msg: any, url: any, line: any, column: any, error: any): boolean {\n    triggerHandlers('error', {\n      column,\n      error,\n      line,\n      msg,\n      url,\n    });\n\n    if (_oldOnErrorHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnErrorHandler.apply(this, arguments);\n    }\n\n    return false;\n  };\n}\n\nlet _oldOnUnhandledRejectionHandler: ((e: any) => void) | null = null;\n/** JSDoc */\nfunction instrumentUnhandledRejection(): void {\n  _oldOnUnhandledRejectionHandler = global.onunhandledrejection;\n\n  global.onunhandledrejection = function(e: any): boolean {\n    triggerHandlers('unhandledrejection', e);\n\n    if (_oldOnUnhandledRejectionHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n    }\n\n    return true;\n  };\n}\n","/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable @typescript-eslint/typedef */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { isThenable } from './is';\n\n/** SyncPromise internal states */\nenum States {\n  /** Pending */\n  PENDING = 'PENDING',\n  /** Resolved / OK */\n  RESOLVED = 'RESOLVED',\n  /** Rejected / Error */\n  REJECTED = 'REJECTED',\n}\n\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */\nclass SyncPromise<T> implements PromiseLike<T> {\n  private _state: States = States.PENDING;\n  private _handlers: Array<{\n    done: boolean;\n    onfulfilled?: ((value: T) => T | PromiseLike<T>) | null;\n    onrejected?: ((reason: any) => any) | null;\n  }> = [];\n  private _value: any;\n\n  public constructor(\n    executor: (resolve: (value?: T | PromiseLike<T> | null) => void, reject: (reason?: any) => void) => void,\n  ) {\n    try {\n      executor(this._resolve, this._reject);\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n\n  /** JSDoc */\n  public static resolve<T>(value: T | PromiseLike<T>): PromiseLike<T> {\n    return new SyncPromise(resolve => {\n      resolve(value);\n    });\n  }\n\n  /** JSDoc */\n  public static reject<T = never>(reason?: any): PromiseLike<T> {\n    return new SyncPromise((_, reject) => {\n      reject(reason);\n    });\n  }\n\n  /** JSDoc */\n  public static all<U = any>(collection: Array<U | PromiseLike<U>>): PromiseLike<U[]> {\n    return new SyncPromise<U[]>((resolve, reject) => {\n      if (!Array.isArray(collection)) {\n        reject(new TypeError(`Promise.all requires an array as input.`));\n        return;\n      }\n\n      if (collection.length === 0) {\n        resolve([]);\n        return;\n      }\n\n      let counter = collection.length;\n      const resolvedCollection: U[] = [];\n\n      collection.forEach((item, index) => {\n        SyncPromise.resolve(item)\n          .then(value => {\n            resolvedCollection[index] = value;\n            counter -= 1;\n\n            if (counter !== 0) {\n              return;\n            }\n            resolve(resolvedCollection);\n          })\n          .then(null, reject);\n      });\n    });\n  }\n\n  /** JSDoc */\n  public then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null,\n  ): PromiseLike<TResult1 | TResult2> {\n    return new SyncPromise((resolve, reject) => {\n      this._attachHandler({\n        done: false,\n        onfulfilled: result => {\n          if (!onfulfilled) {\n            // TODO: ¯\\_(ツ)_/¯\n            // TODO: FIXME\n            resolve(result as any);\n            return;\n          }\n          try {\n            resolve(onfulfilled(result));\n            return;\n          } catch (e) {\n            reject(e);\n            return;\n          }\n        },\n        onrejected: reason => {\n          if (!onrejected) {\n            reject(reason);\n            return;\n          }\n          try {\n            resolve(onrejected(reason));\n            return;\n          } catch (e) {\n            reject(e);\n            return;\n          }\n        },\n      });\n    });\n  }\n\n  /** JSDoc */\n  public catch<TResult = never>(\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null,\n  ): PromiseLike<T | TResult> {\n    return this.then(val => val, onrejected);\n  }\n\n  /** JSDoc */\n  public finally<TResult>(onfinally?: (() => void) | null): PromiseLike<TResult> {\n    return new SyncPromise<TResult>((resolve, reject) => {\n      let val: TResult | any;\n      let isRejected: boolean;\n\n      return this.then(\n        value => {\n          isRejected = false;\n          val = value;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n        reason => {\n          isRejected = true;\n          val = reason;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n      ).then(() => {\n        if (isRejected) {\n          reject(val);\n          return;\n        }\n\n        resolve((val as unknown) as any);\n      });\n    });\n  }\n\n  /** JSDoc */\n  public toString(): string {\n    return '[object SyncPromise]';\n  }\n\n  /** JSDoc */\n  private readonly _resolve = (value?: T | PromiseLike<T> | null) => {\n    this._setResult(States.RESOLVED, value);\n  };\n\n  /** JSDoc */\n  private readonly _reject = (reason?: any) => {\n    this._setResult(States.REJECTED, reason);\n  };\n\n  /** JSDoc */\n  private readonly _setResult = (state: States, value?: T | PromiseLike<T> | any) => {\n    if (this._state !== States.PENDING) {\n      return;\n    }\n\n    if (isThenable(value)) {\n      (value as PromiseLike<T>).then(this._resolve, this._reject);\n      return;\n    }\n\n    this._state = state;\n    this._value = value;\n\n    this._executeHandlers();\n  };\n\n  // TODO: FIXME\n  /** JSDoc */\n  private readonly _attachHandler = (handler: {\n    /** JSDoc */\n    done: boolean;\n    /** JSDoc */\n    onfulfilled?(value: T): any;\n    /** JSDoc */\n    onrejected?(reason: any): any;\n  }) => {\n    this._handlers = this._handlers.concat(handler);\n    this._executeHandlers();\n  };\n\n  /** JSDoc */\n  private readonly _executeHandlers = () => {\n    if (this._state === States.PENDING) {\n      return;\n    }\n\n    const cachedHandlers = this._handlers.slice();\n    this._handlers = [];\n\n    cachedHandlers.forEach(handler => {\n      if (handler.done) {\n        return;\n      }\n\n      if (this._state === States.RESOLVED) {\n        if (handler.onfulfilled) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          handler.onfulfilled((this._value as unknown) as any);\n        }\n      }\n\n      if (this._state === States.REJECTED) {\n        if (handler.onrejected) {\n          handler.onrejected(this._value);\n        }\n      }\n\n      handler.done = true;\n    });\n  };\n}\n\nexport { SyncPromise };\n","import { SentryError } from './error';\nimport { SyncPromise } from './syncpromise';\n\n/** A simple queue that holds promises. */\nexport class PromiseBuffer<T> {\n  /** Internal set of queued Promises */\n  private readonly _buffer: Array<PromiseLike<T>> = [];\n\n  public constructor(protected _limit?: number) {}\n\n  /**\n   * Says if the buffer is ready to take more requests\n   */\n  public isReady(): boolean {\n    return this._limit === undefined || this.length() < this._limit;\n  }\n\n  /**\n   * Add a promise to the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns The original promise.\n   */\n  public add(task: PromiseLike<T>): PromiseLike<T> {\n    if (!this.isReady()) {\n      return SyncPromise.reject(new SentryError('Not adding Promise due to buffer limit reached.'));\n    }\n    if (this._buffer.indexOf(task) === -1) {\n      this._buffer.push(task);\n    }\n    task\n      .then(() => this.remove(task))\n      .then(null, () =>\n        this.remove(task).then(null, () => {\n          // We have to add this catch here otherwise we have an unhandledPromiseRejection\n          // because it's a new Promise chain.\n        }),\n      );\n    return task;\n  }\n\n  /**\n   * Remove a promise to the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  public remove(task: PromiseLike<T>): PromiseLike<T> {\n    const removedTask = this._buffer.splice(this._buffer.indexOf(task), 1)[0];\n    return removedTask;\n  }\n\n  /**\n   * This function returns the number of unresolved promises in the queue.\n   */\n  public length(): number {\n    return this._buffer.length;\n  }\n\n  /**\n   * This will drain the whole queue, returns true if queue is empty or drained.\n   * If timeout is provided and the queue takes longer to drain, the promise still resolves but with false.\n   *\n   * @param timeout Number in ms to wait until it resolves with false.\n   */\n  public drain(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise<boolean>(resolve => {\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n      SyncPromise.all(this._buffer)\n        .then(() => {\n          clearTimeout(capturedSetTimeout);\n          resolve(true);\n        })\n        .then(null, () => {\n          resolve(true);\n        });\n    });\n  }\n}\n","import { getGlobalObject } from './misc';\nimport { dynamicRequire, isNodeEnv } from './node';\n\n/**\n * An object that can return the current timestamp in seconds since the UNIX epoch.\n */\ninterface TimestampSource {\n  nowSeconds(): number;\n}\n\n/**\n * A TimestampSource implementation for environments that do not support the Performance Web API natively.\n *\n * Note that this TimestampSource does not use a monotonic clock. A call to `nowSeconds` may return a timestamp earlier\n * than a previously returned value. We do not try to emulate a monotonic behavior in order to facilitate debugging. It\n * is more obvious to explain \"why does my span have negative duration\" than \"why my spans have zero duration\".\n */\nconst dateTimestampSource: TimestampSource = {\n  nowSeconds: () => Date.now() / 1000,\n};\n\n/**\n * A partial definition of the [Performance Web API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance}\n * for accessing a high resolution monotonic clock.\n */\ninterface Performance {\n  /**\n   * The millisecond timestamp at which measurement began, measured in Unix time.\n   */\n  timeOrigin: number;\n  /**\n   * Returns the current millisecond timestamp, where 0 represents the start of measurement.\n   */\n  now(): number;\n}\n\n/**\n * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n * support the API.\n *\n * Wrapping the native API works around differences in behavior from different browsers.\n */\nfunction getBrowserPerformance(): Performance | undefined {\n  const { performance } = getGlobalObject<Window>();\n  if (!performance || !performance.now) {\n    return undefined;\n  }\n\n  // Replace performance.timeOrigin with our own timeOrigin based on Date.now().\n  //\n  // This is a partial workaround for browsers reporting performance.timeOrigin such that performance.timeOrigin +\n  // performance.now() gives a date arbitrarily in the past.\n  //\n  // Additionally, computing timeOrigin in this way fills the gap for browsers where performance.timeOrigin is\n  // undefined.\n  //\n  // The assumption that performance.timeOrigin + performance.now() ~= Date.now() is flawed, but we depend on it to\n  // interact with data coming out of performance entries.\n  //\n  // Note that despite recommendations against it in the spec, browsers implement the Performance API with a clock that\n  // might stop when the computer is asleep (and perhaps under other circumstances). Such behavior causes\n  // performance.timeOrigin + performance.now() to have an arbitrary skew over Date.now(). In laptop computers, we have\n  // observed skews that can be as long as days, weeks or months.\n  //\n  // See https://github.com/getsentry/sentry-javascript/issues/2590.\n  //\n  // BUG: despite our best intentions, this workaround has its limitations. It mostly addresses timings of pageload\n  // transactions, but ignores the skew built up over time that can aversely affect timestamps of navigation\n  // transactions of long-lived web pages.\n  const timeOrigin = Date.now() - performance.now();\n\n  return {\n    now: () => performance.now(),\n    timeOrigin,\n  };\n}\n\n/**\n * Returns the native Performance API implementation from Node.js. Returns undefined in old Node.js versions that don't\n * implement the API.\n */\nfunction getNodePerformance(): Performance | undefined {\n  try {\n    const perfHooks = dynamicRequire(module, 'perf_hooks') as { performance: Performance };\n    return perfHooks.performance;\n  } catch (_) {\n    return undefined;\n  }\n}\n\n/**\n * The Performance API implementation for the current platform, if available.\n */\nconst platformPerformance: Performance | undefined = isNodeEnv() ? getNodePerformance() : getBrowserPerformance();\n\nconst timestampSource: TimestampSource =\n  platformPerformance === undefined\n    ? dateTimestampSource\n    : {\n        nowSeconds: () => (platformPerformance.timeOrigin + platformPerformance.now()) / 1000,\n      };\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n */\nexport const dateTimestampInSeconds = dateTimestampSource.nowSeconds.bind(dateTimestampSource);\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n * availability of the Performance API.\n *\n * See `usingPerformanceAPI` to test whether the Performance API is used.\n *\n * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n * skew can grow to arbitrary amounts like days, weeks or months.\n * See https://github.com/getsentry/sentry-javascript/issues/2590.\n */\nexport const timestampInSeconds = timestampSource.nowSeconds.bind(timestampSource);\n\n// Re-exported with an old name for backwards-compatibility.\nexport const timestampWithMs = timestampInSeconds;\n\n/**\n * A boolean that is true when timestampInSeconds uses the Performance API to produce monotonic timestamps.\n */\nexport const usingPerformanceAPI = platformPerformance !== undefined;\n\n/**\n * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n * performance API is available.\n */\nexport const browserPerformanceTimeOrigin = ((): number | undefined => {\n  const { performance } = getGlobalObject<Window>();\n  if (!performance) {\n    return undefined;\n  }\n  if (performance.timeOrigin) {\n    return performance.timeOrigin;\n  }\n  // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n  // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n  // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n  // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n  // Date API.\n  // eslint-disable-next-line deprecation/deprecation\n  return (performance.timing && performance.timing.navigationStart) || Date.now();\n})();\n","/* eslint-disable max-lines */\nimport {\n  Breadcrumb,\n  CaptureContext,\n  Context,\n  Contexts,\n  Event,\n  EventHint,\n  EventProcessor,\n  Extra,\n  Extras,\n  Scope as ScopeInterface,\n  ScopeContext,\n  Severity,\n  Span,\n  Transaction,\n  User,\n} from '@sentry/types';\nimport { dateTimestampInSeconds, getGlobalObject, isPlainObject, isThenable, SyncPromise } from '@sentry/utils';\n\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\nexport class Scope implements ScopeInterface {\n  /** Flag if notifiying is happening. */\n  protected _notifyingListeners: boolean = false;\n\n  /** Callback for client to receive scope changes. */\n  protected _scopeListeners: Array<(scope: Scope) => void> = [];\n\n  /** Callback list that will be called after {@link applyToEvent}. */\n  protected _eventProcessors: EventProcessor[] = [];\n\n  /** Array of breadcrumbs. */\n  protected _breadcrumbs: Breadcrumb[] = [];\n\n  /** User */\n  protected _user: User = {};\n\n  /** Tags */\n  protected _tags: { [key: string]: string } = {};\n\n  /** Extra */\n  protected _extra: Extras = {};\n\n  /** Contexts */\n  protected _contexts: Contexts = {};\n\n  /** Fingerprint */\n  protected _fingerprint?: string[];\n\n  /** Severity */\n  protected _level?: Severity;\n\n  /** Transaction Name */\n  protected _transactionName?: string;\n\n  /** Span */\n  protected _span?: Span;\n\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n  public static clone(scope?: Scope): Scope {\n    const newScope = new Scope();\n    if (scope) {\n      newScope._breadcrumbs = [...scope._breadcrumbs];\n      newScope._tags = { ...scope._tags };\n      newScope._extra = { ...scope._extra };\n      newScope._contexts = { ...scope._contexts };\n      newScope._user = scope._user;\n      newScope._level = scope._level;\n      newScope._span = scope._span;\n      newScope._transactionName = scope._transactionName;\n      newScope._fingerprint = scope._fingerprint;\n      newScope._eventProcessors = [...scope._eventProcessors];\n    }\n    return newScope;\n  }\n\n  /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */\n  public addScopeListener(callback: (scope: Scope) => void): void {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addEventProcessor(callback: EventProcessor): this {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): this {\n    this._user = user || {};\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: string }): this {\n    this._tags = {\n      ...this._tags,\n      ...tags,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: string): this {\n    this._tags = { ...this._tags, [key]: value };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): this {\n    this._extra = {\n      ...this._extra,\n      ...extras,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): this {\n    this._extra = { ...this._extra, [key]: extra };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setFingerprint(fingerprint: string[]): this {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setLevel(level: Severity): this {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTransactionName(name?: string): this {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Can be removed in major version.\n   * @deprecated in favor of {@link this.setTransactionName}\n   */\n  public setTransaction(name?: string): this {\n    return this.setTransactionName(name);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setContext(key: string, context: Context | null): this {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts = { ...this._contexts, [key]: context };\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSpan(span?: Span): this {\n    this._span = span;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSpan(): Span | undefined {\n    return this._span;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransaction(): Transaction | undefined {\n    // often, this span will be a transaction, but it's not guaranteed to be\n    const span = this.getSpan() as undefined | (Span & { spanRecorder: { spans: Span[] } });\n\n    // try it the new way first\n    if (span?.transaction) {\n      return span?.transaction;\n    }\n\n    // fallback to the old way (known bug: this only finds transactions with sampled = true)\n    if (span?.spanRecorder?.spans[0]) {\n      return span.spanRecorder.spans[0] as Transaction;\n    }\n\n    // neither way found a transaction\n    return undefined;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public update(captureContext?: CaptureContext): this {\n    if (!captureContext) {\n      return this;\n    }\n\n    if (typeof captureContext === 'function') {\n      const updatedScope = (captureContext as <T>(scope: T) => T)(this);\n      return updatedScope instanceof Scope ? updatedScope : this;\n    }\n\n    if (captureContext instanceof Scope) {\n      this._tags = { ...this._tags, ...captureContext._tags };\n      this._extra = { ...this._extra, ...captureContext._extra };\n      this._contexts = { ...this._contexts, ...captureContext._contexts };\n      if (captureContext._user) {\n        this._user = captureContext._user;\n      }\n      if (captureContext._level) {\n        this._level = captureContext._level;\n      }\n      if (captureContext._fingerprint) {\n        this._fingerprint = captureContext._fingerprint;\n      }\n    } else if (isPlainObject(captureContext)) {\n      // eslint-disable-next-line no-param-reassign\n      captureContext = captureContext as ScopeContext;\n      this._tags = { ...this._tags, ...captureContext.tags };\n      this._extra = { ...this._extra, ...captureContext.extra };\n      this._contexts = { ...this._contexts, ...captureContext.contexts };\n      if (captureContext.user) {\n        this._user = captureContext.user;\n      }\n      if (captureContext.level) {\n        this._level = captureContext.level;\n      }\n      if (captureContext.fingerprint) {\n        this._fingerprint = captureContext.fingerprint;\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clear(): this {\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._span = undefined;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, maxBreadcrumbs?: number): this {\n    const mergedBreadcrumb = {\n      timestamp: dateTimestampInSeconds(),\n      ...breadcrumb,\n    };\n\n    this._breadcrumbs =\n      maxBreadcrumbs !== undefined && maxBreadcrumbs >= 0\n        ? [...this._breadcrumbs, mergedBreadcrumb].slice(-maxBreadcrumbs)\n        : [...this._breadcrumbs, mergedBreadcrumb];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clearBreadcrumbs(): this {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Applies the current context and fingerprint to the event.\n   * Note that breadcrumbs will be added by the client.\n   * Also if the event has already breadcrumbs on it, we do not merge them.\n   * @param event Event\n   * @param hint May contain additional informartion about the original exception.\n   * @hidden\n   */\n  public applyToEvent(event: Event, hint?: EventHint): PromiseLike<Event | null> {\n    if (this._extra && Object.keys(this._extra).length) {\n      event.extra = { ...this._extra, ...event.extra };\n    }\n    if (this._tags && Object.keys(this._tags).length) {\n      event.tags = { ...this._tags, ...event.tags };\n    }\n    if (this._user && Object.keys(this._user).length) {\n      event.user = { ...this._user, ...event.user };\n    }\n    if (this._contexts && Object.keys(this._contexts).length) {\n      event.contexts = { ...this._contexts, ...event.contexts };\n    }\n    if (this._level) {\n      event.level = this._level;\n    }\n    if (this._transactionName) {\n      event.transaction = this._transactionName;\n    }\n    // We want to set the trace context for normal events only if there isn't already\n    // a trace context on the event. There is a product feature in place where we link\n    // errors with transaction and it relys on that.\n    if (this._span) {\n      event.contexts = { trace: this._span.getTraceContext(), ...event.contexts };\n    }\n\n    this._applyFingerprint(event);\n\n    event.breadcrumbs = [...(event.breadcrumbs || []), ...this._breadcrumbs];\n    event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n\n    return this._notifyEventProcessors([...getGlobalEventProcessors(), ...this._eventProcessors], event, hint);\n  }\n\n  /**\n   * This will be called after {@link applyToEvent} is finished.\n   */\n  protected _notifyEventProcessors(\n    processors: EventProcessor[],\n    event: Event | null,\n    hint?: EventHint,\n    index: number = 0,\n  ): PromiseLike<Event | null> {\n    return new SyncPromise<Event | null>((resolve, reject) => {\n      const processor = processors[index];\n      if (event === null || typeof processor !== 'function') {\n        resolve(event);\n      } else {\n        const result = processor({ ...event }, hint) as Event | null;\n        if (isThenable(result)) {\n          (result as PromiseLike<Event | null>)\n            .then(final => this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve))\n            .then(null, reject);\n        } else {\n          this._notifyEventProcessors(processors, result, hint, index + 1)\n            .then(resolve)\n            .then(null, reject);\n        }\n      }\n    });\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  protected _notifyScopeListeners(): void {\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      setTimeout(() => {\n        this._scopeListeners.forEach(callback => {\n          callback(this);\n        });\n        this._notifyingListeners = false;\n      });\n    }\n  }\n\n  /**\n   * Applies fingerprint from the scope to the event if there's one,\n   * uses message if there's one instead or get rid of empty fingerprint\n   */\n  private _applyFingerprint(event: Event): void {\n    // Make sure it's an array first and we actually have something in place\n    event.fingerprint = event.fingerprint\n      ? Array.isArray(event.fingerprint)\n        ? event.fingerprint\n        : [event.fingerprint]\n      : [];\n\n    // If we have something on the scope, then merge it with event\n    if (this._fingerprint) {\n      event.fingerprint = event.fingerprint.concat(this._fingerprint);\n    }\n\n    // If we have no data at all, remove empty array default\n    if (event.fingerprint && !event.fingerprint.length) {\n      delete event.fingerprint;\n    }\n  }\n}\n\n/**\n * Retruns the global event processors.\n */\nfunction getGlobalEventProcessors(): EventProcessor[] {\n  const global = getGlobalObject<Window | NodeJS.Global>();\n  global.__SENTRY__ = global.__SENTRY__ || {};\n  global.__SENTRY__.globalEventProcessors = global.__SENTRY__.globalEventProcessors || [];\n  return global.__SENTRY__.globalEventProcessors;\n}\n\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\nexport function addGlobalEventProcessor(callback: EventProcessor): void {\n  getGlobalEventProcessors().push(callback);\n}\n","/* eslint-disable max-lines */\nimport {\n  Breadcrumb,\n  BreadcrumbHint,\n  Client,\n  CustomSamplingContext,\n  Event,\n  EventHint,\n  Extra,\n  Extras,\n  Hub as HubInterface,\n  Integration,\n  IntegrationClass,\n  Severity,\n  Span,\n  SpanContext,\n  Transaction,\n  TransactionContext,\n  User,\n} from '@sentry/types';\nimport { consoleSandbox, dateTimestampInSeconds, getGlobalObject, isNodeEnv, logger, uuid4 } from '@sentry/utils';\n\nimport { Carrier, DomainAsCarrier, Layer } from './interfaces';\nimport { Scope } from './scope';\n\n/**\n * API compatibility version of this hub.\n *\n * WARNING: This number should only be increased when the global interface\n * changes and new methods are introduced.\n *\n * @hidden\n */\nexport const API_VERSION = 3;\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nconst DEFAULT_BREADCRUMBS = 100;\n\n/**\n * Absolute maximum number of breadcrumbs added to an event. The\n * `maxBreadcrumbs` option cannot be higher than this value.\n */\nconst MAX_BREADCRUMBS = 100;\n\n/**\n * @inheritDoc\n */\nexport class Hub implements HubInterface {\n  /** Is a {@link Layer}[] containing the client and scope */\n  private readonly _stack: Layer[] = [];\n\n  /** Contains the last event id of a captured event.  */\n  private _lastEventId?: string;\n\n  /**\n   * Creates a new instance of the hub, will push one {@link Layer} into the\n   * internal stack on creation.\n   *\n   * @param client bound to the hub.\n   * @param scope bound to the hub.\n   * @param version number, higher number means higher priority.\n   */\n  public constructor(client?: Client, scope: Scope = new Scope(), private readonly _version: number = API_VERSION) {\n    this._stack.push({ client, scope });\n    this.bindClient(client);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public isOlderThan(version: number): boolean {\n    return this._version < version;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public bindClient(client?: Client): void {\n    const top = this.getStackTop();\n    top.client = client;\n    if (client && client.setupIntegrations) {\n      client.setupIntegrations();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public pushScope(): Scope {\n    // We want to clone the content of prev scope\n    const stack = this.getStack();\n    const parentScope = stack.length > 0 ? stack[stack.length - 1].scope : undefined;\n    const scope = Scope.clone(parentScope);\n    this.getStack().push({\n      client: this.getClient(),\n      scope,\n    });\n    return scope;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public popScope(): boolean {\n    return this.getStack().pop() !== undefined;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public withScope(callback: (scope: Scope) => void): void {\n    const scope = this.pushScope();\n    try {\n      callback(scope);\n    } finally {\n      this.popScope();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getClient<C extends Client>(): C | undefined {\n    return this.getStackTop().client as C;\n  }\n\n  /** Returns the scope of the top stack. */\n  public getScope(): Scope | undefined {\n    return this.getStackTop().scope;\n  }\n\n  /** Returns the scope stack for domains or the process. */\n  public getStack(): Layer[] {\n    return this._stack;\n  }\n\n  /** Returns the topmost scope layer in the order domain > local > process. */\n  public getStackTop(): Layer {\n    return this._stack[this._stack.length - 1];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public captureException(exception: any, hint?: EventHint): string {\n    const eventId = (this._lastEventId = uuid4());\n    let finalHint = hint;\n\n    // If there's no explicit hint provided, mimick the same thing that would happen\n    // in the minimal itself to create a consistent behavior.\n    // We don't do this in the client, as it's the lowest level API, and doing this,\n    // would prevent user from having full control over direct calls.\n    if (!hint) {\n      let syntheticException: Error;\n      try {\n        throw new Error('Sentry syntheticException');\n      } catch (exception) {\n        syntheticException = exception as Error;\n      }\n      finalHint = {\n        originalException: exception,\n        syntheticException,\n      };\n    }\n\n    this._invokeClient('captureException', exception, {\n      ...finalHint,\n      event_id: eventId,\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(message: string, level?: Severity, hint?: EventHint): string {\n    const eventId = (this._lastEventId = uuid4());\n    let finalHint = hint;\n\n    // If there's no explicit hint provided, mimick the same thing that would happen\n    // in the minimal itself to create a consistent behavior.\n    // We don't do this in the client, as it's the lowest level API, and doing this,\n    // would prevent user from having full control over direct calls.\n    if (!hint) {\n      let syntheticException: Error;\n      try {\n        throw new Error(message);\n      } catch (exception) {\n        syntheticException = exception as Error;\n      }\n      finalHint = {\n        originalException: message,\n        syntheticException,\n      };\n    }\n\n    this._invokeClient('captureMessage', message, level, {\n      ...finalHint,\n      event_id: eventId,\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint): string {\n    const eventId = (this._lastEventId = uuid4());\n    this._invokeClient('captureEvent', event, {\n      ...hint,\n      event_id: eventId,\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public lastEventId(): string | undefined {\n    return this._lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, hint?: BreadcrumbHint): void {\n    const top = this.getStackTop();\n\n    if (!top.scope || !top.client) {\n      return;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { beforeBreadcrumb = null, maxBreadcrumbs = DEFAULT_BREADCRUMBS } =\n      (top.client.getOptions && top.client.getOptions()) || {};\n\n    if (maxBreadcrumbs <= 0) {\n      return;\n    }\n\n    const timestamp = dateTimestampInSeconds();\n    const mergedBreadcrumb = { timestamp, ...breadcrumb };\n    const finalBreadcrumb = beforeBreadcrumb\n      ? (consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) as Breadcrumb | null)\n      : mergedBreadcrumb;\n\n    if (finalBreadcrumb === null) {\n      return;\n    }\n\n    top.scope.addBreadcrumb(finalBreadcrumb, Math.min(maxBreadcrumbs, MAX_BREADCRUMBS));\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): void {\n    const top = this.getStackTop();\n    if (!top.scope) {\n      return;\n    }\n    top.scope.setUser(user);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: string }): void {\n    const top = this.getStackTop();\n    if (!top.scope) {\n      return;\n    }\n    top.scope.setTags(tags);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): void {\n    const top = this.getStackTop();\n    if (!top.scope) {\n      return;\n    }\n    top.scope.setExtras(extras);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: string): void {\n    const top = this.getStackTop();\n    if (!top.scope) {\n      return;\n    }\n    top.scope.setTag(key, value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): void {\n    const top = this.getStackTop();\n    if (!top.scope) {\n      return;\n    }\n    top.scope.setExtra(key, extra);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public setContext(name: string, context: { [key: string]: any } | null): void {\n    const top = this.getStackTop();\n    if (!top.scope) {\n      return;\n    }\n    top.scope.setContext(name, context);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public configureScope(callback: (scope: Scope) => void): void {\n    const top = this.getStackTop();\n    if (top.scope && top.client) {\n      callback(top.scope);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public run(callback: (hub: Hub) => void): void {\n    const oldHub = makeMain(this);\n    try {\n      callback(this);\n    } finally {\n      makeMain(oldHub);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    const client = this.getClient();\n    if (!client) {\n      return null;\n    }\n    try {\n      return client.getIntegration(integration);\n    } catch (_oO) {\n      logger.warn(`Cannot retrieve integration ${integration.id} from the current Hub`);\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startSpan(context: SpanContext): Span {\n    return this._callExtensionMethod('startSpan', context);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startTransaction(context: TransactionContext, customSamplingContext?: CustomSamplingContext): Transaction {\n    return this._callExtensionMethod('startTransaction', context, customSamplingContext);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public traceHeaders(): { [key: string]: string } {\n    return this._callExtensionMethod<{ [key: string]: string }>('traceHeaders');\n  }\n\n  /**\n   * Internal helper function to call a method on the top client if it exists.\n   *\n   * @param method The method to call on the client.\n   * @param args Arguments to pass to the client function.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _invokeClient<M extends keyof Client>(method: M, ...args: any[]): void {\n    const top = this.getStackTop();\n    if (top && top.client && top.client[method]) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n      (top.client as any)[method](...args, top.scope);\n    }\n  }\n\n  /**\n   * Calls global extension method and binding current instance to the function call\n   */\n  // @ts-ignore Function lacks ending return statement and return type does not include 'undefined'. ts(2366)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _callExtensionMethod<T>(method: string, ...args: any[]): T {\n    const carrier = getMainCarrier();\n    const sentry = carrier.__SENTRY__;\n    if (sentry && sentry.extensions && typeof sentry.extensions[method] === 'function') {\n      return sentry.extensions[method].apply(this, args);\n    }\n    logger.warn(`Extension method ${method} couldn't be found, doing nothing.`);\n  }\n}\n\n/** Returns the global shim registry. */\nexport function getMainCarrier(): Carrier {\n  const carrier = getGlobalObject();\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {\n    extensions: {},\n    hub: undefined,\n  };\n  return carrier;\n}\n\n/**\n * Replaces the current main hub with the passed one on the global object\n *\n * @returns The old replaced hub\n */\nexport function makeMain(hub: Hub): Hub {\n  const registry = getMainCarrier();\n  const oldHub = getHubFromCarrier(registry);\n  setHubOnCarrier(registry, hub);\n  return oldHub;\n}\n\n/**\n * Returns the default hub instance.\n *\n * If a hub is already registered in the global carrier but this module\n * contains a more recent version, it replaces the registered version.\n * Otherwise, the currently registered hub will be returned.\n */\nexport function getCurrentHub(): Hub {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n\n  // If there's no hub, or its an old API, assign a new one\n  if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(API_VERSION)) {\n    setHubOnCarrier(registry, new Hub());\n  }\n\n  // Prefer domains over global if they are there (applicable only to Node environment)\n  if (isNodeEnv()) {\n    return getHubFromActiveDomain(registry);\n  }\n  // Return hub that lives on a global object\n  return getHubFromCarrier(registry);\n}\n\n/**\n * Returns the active domain, if one exists\n *\n * @returns The domain, or undefined if there is no active domain\n */\nexport function getActiveDomain(): DomainAsCarrier | undefined {\n  const sentry = getMainCarrier().__SENTRY__;\n\n  return sentry && sentry.extensions && sentry.extensions.domain && sentry.extensions.domain.active;\n}\n\n/**\n * Try to read the hub from an active domain, and fallback to the registry if one doesn't exist\n * @returns discovered hub\n */\nfunction getHubFromActiveDomain(registry: Carrier): Hub {\n  try {\n    const activeDomain = getActiveDomain();\n\n    // If there's no active domain, just return global hub\n    if (!activeDomain) {\n      return getHubFromCarrier(registry);\n    }\n\n    // If there's no hub on current domain, or it's an old API, assign a new one\n    if (!hasHubOnCarrier(activeDomain) || getHubFromCarrier(activeDomain).isOlderThan(API_VERSION)) {\n      const registryHubTopStack = getHubFromCarrier(registry).getStackTop();\n      setHubOnCarrier(activeDomain, new Hub(registryHubTopStack.client, Scope.clone(registryHubTopStack.scope)));\n    }\n\n    // Return hub that lives on a domain\n    return getHubFromCarrier(activeDomain);\n  } catch (_Oo) {\n    // Return hub that lives on a global object\n    return getHubFromCarrier(registry);\n  }\n}\n\n/**\n * This will tell whether a carrier has a hub on it or not\n * @param carrier object\n */\nfunction hasHubOnCarrier(carrier: Carrier): boolean {\n  if (carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * This will create a new {@link Hub} and add to the passed object on\n * __SENTRY__.hub.\n * @param carrier object\n * @hidden\n */\nexport function getHubFromCarrier(carrier: Carrier): Hub {\n  if (carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub) {\n    return carrier.__SENTRY__.hub;\n  }\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {};\n  carrier.__SENTRY__.hub = new Hub();\n  return carrier.__SENTRY__.hub;\n}\n\n/**\n * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute\n * @param carrier object\n * @param hub Hub\n */\nexport function setHubOnCarrier(carrier: Carrier, hub: Hub): boolean {\n  if (!carrier) {\n    return false;\n  }\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {};\n  carrier.__SENTRY__.hub = hub;\n  return true;\n}\n","import { getCurrentHub, Hub, Scope } from '@sentry/hub';\nimport {\n  Breadcrumb,\n  CaptureContext,\n  CustomSamplingContext,\n  Event,\n  Extra,\n  Extras,\n  Severity,\n  Transaction,\n  TransactionContext,\n  User,\n} from '@sentry/types';\n\n/**\n * This calls a function on the current hub.\n * @param method function to call on hub.\n * @param args to pass to function.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction callOnHub<T>(method: string, ...args: any[]): T {\n  const hub = getCurrentHub();\n  if (hub && hub[method as keyof Hub]) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (hub[method as keyof Hub] as any)(...args);\n  }\n  throw new Error(`No hub defined or ${method} was not found on the hub, please open a bug report.`);\n}\n\n/**\n * Captures an exception event and sends it to Sentry.\n *\n * @param exception An exception-like object.\n * @returns The generated eventId.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nexport function captureException(exception: any, captureContext?: CaptureContext): string {\n  let syntheticException: Error;\n  try {\n    throw new Error('Sentry syntheticException');\n  } catch (exception) {\n    syntheticException = exception as Error;\n  }\n  return callOnHub('captureException', exception, {\n    captureContext,\n    originalException: exception,\n    syntheticException,\n  });\n}\n\n/**\n * Captures a message event and sends it to Sentry.\n *\n * @param message The message to send to Sentry.\n * @param level Define the level of the message.\n * @returns The generated eventId.\n */\nexport function captureMessage(message: string, captureContext?: CaptureContext | Severity): string {\n  let syntheticException: Error;\n  try {\n    throw new Error(message);\n  } catch (exception) {\n    syntheticException = exception as Error;\n  }\n\n  // This is necessary to provide explicit scopes upgrade, without changing the original\n  // arity of the `captureMessage(message, level)` method.\n  const level = typeof captureContext === 'string' ? captureContext : undefined;\n  const context = typeof captureContext !== 'string' ? { captureContext } : undefined;\n\n  return callOnHub('captureMessage', message, level, {\n    originalException: message,\n    syntheticException,\n    ...context,\n  });\n}\n\n/**\n * Captures a manually created event and sends it to Sentry.\n *\n * @param event The event to send to Sentry.\n * @returns The generated eventId.\n */\nexport function captureEvent(event: Event): string {\n  return callOnHub('captureEvent', event);\n}\n\n/**\n * Callback to set context information onto the scope.\n * @param callback Callback function that receives Scope.\n */\nexport function configureScope(callback: (scope: Scope) => void): void {\n  callOnHub<void>('configureScope', callback);\n}\n\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n *\n * @param breadcrumb The breadcrumb to record.\n */\nexport function addBreadcrumb(breadcrumb: Breadcrumb): void {\n  callOnHub<void>('addBreadcrumb', breadcrumb);\n}\n\n/**\n * Sets context data with the given name.\n * @param name of the context\n * @param context Any kind of data. This data will be normalized.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function setContext(name: string, context: { [key: string]: any } | null): void {\n  callOnHub<void>('setContext', name, context);\n}\n\n/**\n * Set an object that will be merged sent as extra data with the event.\n * @param extras Extras object to merge into current context.\n */\nexport function setExtras(extras: Extras): void {\n  callOnHub<void>('setExtras', extras);\n}\n\n/**\n * Set an object that will be merged sent as tags data with the event.\n * @param tags Tags context object to merge into current context.\n */\nexport function setTags(tags: { [key: string]: string }): void {\n  callOnHub<void>('setTags', tags);\n}\n\n/**\n * Set key:value that will be sent as extra data with the event.\n * @param key String of extra\n * @param extra Any kind of data. This data will be normalized.\n */\nexport function setExtra(key: string, extra: Extra): void {\n  callOnHub<void>('setExtra', key, extra);\n}\n\n/**\n * Set key:value that will be sent as tags data with the event.\n * @param key String key of tag\n * @param value String value of tag\n */\nexport function setTag(key: string, value: string): void {\n  callOnHub<void>('setTag', key, value);\n}\n\n/**\n * Updates user context information for future events.\n *\n * @param user User context object to be set in the current context. Pass `null` to unset the user.\n */\nexport function setUser(user: User | null): void {\n  callOnHub<void>('setUser', user);\n}\n\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n *\n * This is essentially a convenience function for:\n *\n *     pushScope();\n *     callback();\n *     popScope();\n *\n * @param callback that will be enclosed into push/popScope.\n */\nexport function withScope(callback: (scope: Scope) => void): void {\n  callOnHub<void>('withScope', callback);\n}\n\n/**\n * Calls a function on the latest client. Use this with caution, it's meant as\n * in \"internal\" helper so we don't need to expose every possible function in\n * the shim. It is not guaranteed that the client actually implements the\n * function.\n *\n * @param method The method to call on the client/client.\n * @param args Arguments to pass to the client/fontend.\n * @hidden\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function _callOnClient(method: string, ...args: any[]): void {\n  callOnHub<void>('_invokeClient', method, ...args);\n}\n\n/**\n * Starts a new `Transaction` and returns it. This is the entry point to manual tracing instrumentation.\n *\n * A tree structure can be built by adding child spans to the transaction, and child spans to other spans. To start a\n * new child span within the transaction or any span, call the respective `.startChild()` method.\n *\n * Every child span must be finished before the transaction is finished, otherwise the unfinished spans are discarded.\n *\n * The transaction must be finished with a call to its `.finish()` method, at which point the transaction with all its\n * finished child spans will be sent to Sentry.\n *\n * @param context Properties of the new `Transaction`.\n * @param customSamplingContext Information given to the transaction sampling function (along with context-dependent\n * default values). See {@link Options.tracesSampler}.\n *\n * @returns The transaction which was just started\n */\nexport function startTransaction(\n  context: TransactionContext,\n  customSamplingContext?: CustomSamplingContext,\n): Transaction {\n  return callOnHub('startTransaction', { ...context }, customSamplingContext);\n}\n","import { DsnLike } from '@sentry/types';\nimport { Dsn, urlEncode } from '@sentry/utils';\n\nconst SENTRY_API_VERSION = '7';\n\n/** Helper class to provide urls to different Sentry endpoints. */\nexport class API {\n  /** The internally used Dsn object. */\n  private readonly _dsnObject: Dsn;\n  /** Create a new instance of API */\n  public constructor(public dsn: DsnLike) {\n    this._dsnObject = new Dsn(dsn);\n  }\n\n  /** Returns the Dsn object. */\n  public getDsn(): Dsn {\n    return this._dsnObject;\n  }\n\n  /** Returns the prefix to construct Sentry ingestion API endpoints. */\n  public getBaseApiEndpoint(): string {\n    const dsn = this._dsnObject;\n    const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n    const port = dsn.port ? `:${dsn.port}` : '';\n    return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n  }\n\n  /** Returns the store endpoint URL. */\n  public getStoreEndpoint(): string {\n    return this._getIngestEndpoint('store');\n  }\n\n  /**\n   * Returns the store endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  public getStoreEndpointWithUrlEncodedAuth(): string {\n    return `${this.getStoreEndpoint()}?${this._encodedAuth()}`;\n  }\n\n  /**\n   * Returns the envelope endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  public getEnvelopeEndpointWithUrlEncodedAuth(): string {\n    return `${this._getEnvelopeEndpoint()}?${this._encodedAuth()}`;\n  }\n\n  /** Returns only the path component for the store endpoint. */\n  public getStoreEndpointPath(): string {\n    const dsn = this._dsnObject;\n    return `${dsn.path ? `/${dsn.path}` : ''}/api/${dsn.projectId}/store/`;\n  }\n\n  /**\n   * Returns an object that can be used in request headers.\n   * This is needed for node and the old /store endpoint in sentry\n   */\n  public getRequestHeaders(clientName: string, clientVersion: string): { [key: string]: string } {\n    const dsn = this._dsnObject;\n    const header = [`Sentry sentry_version=${SENTRY_API_VERSION}`];\n    header.push(`sentry_client=${clientName}/${clientVersion}`);\n    header.push(`sentry_key=${dsn.user}`);\n    if (dsn.pass) {\n      header.push(`sentry_secret=${dsn.pass}`);\n    }\n    return {\n      'Content-Type': 'application/json',\n      'X-Sentry-Auth': header.join(', '),\n    };\n  }\n\n  /** Returns the url to the report dialog endpoint. */\n  public getReportDialogEndpoint(\n    dialogOptions: {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      [key: string]: any;\n      user?: { name?: string; email?: string };\n    } = {},\n  ): string {\n    const dsn = this._dsnObject;\n    const endpoint = `${this.getBaseApiEndpoint()}embed/error-page/`;\n\n    const encodedOptions = [];\n    encodedOptions.push(`dsn=${dsn.toString()}`);\n    for (const key in dialogOptions) {\n      if (key === 'user') {\n        if (!dialogOptions.user) {\n          continue;\n        }\n        if (dialogOptions.user.name) {\n          encodedOptions.push(`name=${encodeURIComponent(dialogOptions.user.name)}`);\n        }\n        if (dialogOptions.user.email) {\n          encodedOptions.push(`email=${encodeURIComponent(dialogOptions.user.email)}`);\n        }\n      } else {\n        encodedOptions.push(`${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] as string)}`);\n      }\n    }\n    if (encodedOptions.length) {\n      return `${endpoint}?${encodedOptions.join('&')}`;\n    }\n\n    return endpoint;\n  }\n\n  /** Returns the envelope endpoint URL. */\n  private _getEnvelopeEndpoint(): string {\n    return this._getIngestEndpoint('envelope');\n  }\n\n  /** Returns the ingest API endpoint for target. */\n  private _getIngestEndpoint(target: 'store' | 'envelope'): string {\n    const base = this.getBaseApiEndpoint();\n    const dsn = this._dsnObject;\n    return `${base}${dsn.projectId}/${target}/`;\n  }\n\n  /** Returns a URL-encoded string with auth config suitable for a query string. */\n  private _encodedAuth(): string {\n    const dsn = this._dsnObject;\n    const auth = {\n      // We send only the minimum set of required information. See\n      // https://github.com/getsentry/sentry-javascript/issues/2572.\n      sentry_key: dsn.user,\n      sentry_version: SENTRY_API_VERSION,\n    };\n    return urlEncode(auth);\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { Integration, Options } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nexport const installedIntegrations: string[] = [];\n\n/** Map of integrations assigned to a client */\nexport interface IntegrationIndex {\n  [key: string]: Integration;\n}\n\n/** Gets integration to install */\nexport function getIntegrationsToSetup(options: Options): Integration[] {\n  const defaultIntegrations = (options.defaultIntegrations && [...options.defaultIntegrations]) || [];\n  const userIntegrations = options.integrations;\n  let integrations: Integration[] = [];\n  if (Array.isArray(userIntegrations)) {\n    const userIntegrationsNames = userIntegrations.map(i => i.name);\n    const pickedIntegrationsNames: string[] = [];\n\n    // Leave only unique default integrations, that were not overridden with provided user integrations\n    defaultIntegrations.forEach(defaultIntegration => {\n      if (\n        userIntegrationsNames.indexOf(defaultIntegration.name) === -1 &&\n        pickedIntegrationsNames.indexOf(defaultIntegration.name) === -1\n      ) {\n        integrations.push(defaultIntegration);\n        pickedIntegrationsNames.push(defaultIntegration.name);\n      }\n    });\n\n    // Don't add same user integration twice\n    userIntegrations.forEach(userIntegration => {\n      if (pickedIntegrationsNames.indexOf(userIntegration.name) === -1) {\n        integrations.push(userIntegration);\n        pickedIntegrationsNames.push(userIntegration.name);\n      }\n    });\n  } else if (typeof userIntegrations === 'function') {\n    integrations = userIntegrations(defaultIntegrations);\n    integrations = Array.isArray(integrations) ? integrations : [integrations];\n  } else {\n    integrations = [...defaultIntegrations];\n  }\n\n  // Make sure that if present, `Debug` integration will always run last\n  const integrationsNames = integrations.map(i => i.name);\n  const alwaysLastToRun = 'Debug';\n  if (integrationsNames.indexOf(alwaysLastToRun) !== -1) {\n    integrations.push(...integrations.splice(integrationsNames.indexOf(alwaysLastToRun), 1));\n  }\n\n  return integrations;\n}\n\n/** Setup given integration */\nexport function setupIntegration(integration: Integration): void {\n  if (installedIntegrations.indexOf(integration.name) !== -1) {\n    return;\n  }\n  integration.setupOnce(addGlobalEventProcessor, getCurrentHub);\n  installedIntegrations.push(integration.name);\n  logger.log(`Integration installed: ${integration.name}`);\n}\n\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nexport function setupIntegrations<O extends Options>(options: O): IntegrationIndex {\n  const integrations: IntegrationIndex = {};\n  getIntegrationsToSetup(options).forEach(integration => {\n    integrations[integration.name] = integration;\n    setupIntegration(integration);\n  });\n  return integrations;\n}\n","/* eslint-disable max-lines */\nimport { Scope } from '@sentry/hub';\nimport { Client, Event, EventHint, Integration, IntegrationClass, Options, Severity } from '@sentry/types';\nimport {\n  dateTimestampInSeconds,\n  Dsn,\n  isPrimitive,\n  isThenable,\n  logger,\n  normalize,\n  SyncPromise,\n  truncate,\n  uuid4,\n} from '@sentry/utils';\n\nimport { Backend, BackendClass } from './basebackend';\nimport { IntegrationIndex, setupIntegrations } from './integration';\n\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding backend constructor and options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}. Also, the Backend instance is available via\n * {@link Client.getBackend}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event via the backend, it is passed through\n * {@link BaseClient.prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeBackend, NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(NodeBackend, options);\n *   }\n *\n *   // ...\n * }\n */\nexport abstract class BaseClient<B extends Backend, O extends Options> implements Client<O> {\n  /**\n   * The backend used to physically interact in the environment. Usually, this\n   * will correspond to the client. When composing SDKs, however, the Backend\n   * from the root SDK will be used.\n   */\n  protected readonly _backend: B;\n\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n  protected readonly _dsn?: Dsn;\n\n  /** Array of used integrations. */\n  protected _integrations: IntegrationIndex = {};\n\n  /** Is the client still processing a call? */\n  protected _processing: boolean = false;\n\n  /**\n   * Initializes this client instance.\n   *\n   * @param backendClass A constructor function to create the backend.\n   * @param options Options for the client.\n   */\n  protected constructor(backendClass: BackendClass<B, O>, options: O) {\n    this._backend = new backendClass(options);\n    this._options = options;\n\n    if (options.dsn) {\n      this._dsn = new Dsn(options.dsn);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public captureException(exception: any, hint?: EventHint, scope?: Scope): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n    this._processing = true;\n\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this._getBackend()\n      .eventFromException(exception, hint)\n      .then(event => {\n        eventId = this.captureEvent(event, hint, scope);\n      });\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(message: string, level?: Severity, hint?: EventHint, scope?: Scope): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n    this._processing = true;\n\n    const promisedEvent = isPrimitive(message)\n      ? this._getBackend().eventFromMessage(`${message}`, level, hint)\n      : this._getBackend().eventFromException(message, hint);\n\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    promisedEvent.then(event => {\n      eventId = this.captureEvent(event, hint, scope);\n    });\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint, scope?: Scope): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n    this._processing = true;\n\n    this._processEvent(event, hint, scope)\n      .then(finalEvent => {\n        // We need to check for finalEvent in case beforeSend returned null\n        eventId = finalEvent && finalEvent.event_id;\n        this._processing = false;\n      })\n      .then(null, reason => {\n        logger.error(reason);\n        this._processing = false;\n      });\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getDsn(): Dsn | undefined {\n    return this._dsn;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getOptions(): O {\n    return this._options;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public flush(timeout?: number): PromiseLike<boolean> {\n    return this._isClientProcessing(timeout).then(status => {\n      clearInterval(status.interval);\n      return this._getBackend()\n        .getTransport()\n        .close(timeout)\n        .then(transportFlushed => status.ready && transportFlushed);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this.flush(timeout).then(result => {\n      this.getOptions().enabled = false;\n      return result;\n    });\n  }\n\n  /**\n   * Sets up the integrations\n   */\n  public setupIntegrations(): void {\n    if (this._isEnabled()) {\n      this._integrations = setupIntegrations(this._options);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    try {\n      return (this._integrations[integration.id] as T) || null;\n    } catch (_oO) {\n      logger.warn(`Cannot retrieve integration ${integration.id} from the current Client`);\n      return null;\n    }\n  }\n\n  /** Waits for the client to be done with processing. */\n  protected _isClientProcessing(timeout?: number): PromiseLike<{ ready: boolean; interval: number }> {\n    return new SyncPromise<{ ready: boolean; interval: number }>(resolve => {\n      let ticked: number = 0;\n      const tick: number = 1;\n\n      let interval = 0;\n      clearInterval(interval);\n\n      interval = (setInterval(() => {\n        if (!this._processing) {\n          resolve({\n            interval,\n            ready: true,\n          });\n        } else {\n          ticked += tick;\n          if (timeout && ticked >= timeout) {\n            resolve({\n              interval,\n              ready: false,\n            });\n          }\n        }\n      }, tick) as unknown) as number;\n    });\n  }\n\n  /** Returns the current backend. */\n  protected _getBackend(): B {\n    return this._backend;\n  }\n\n  /** Determines whether this SDK is enabled and a valid Dsn is present. */\n  protected _isEnabled(): boolean {\n    return this.getOptions().enabled !== false && this._dsn !== undefined;\n  }\n\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): PromiseLike<Event | null> {\n    const { normalizeDepth = 3 } = this.getOptions();\n    const prepared: Event = {\n      ...event,\n      event_id: event.event_id || (hint && hint.event_id ? hint.event_id : uuid4()),\n      timestamp: event.timestamp || dateTimestampInSeconds(),\n    };\n\n    this._applyClientOptions(prepared);\n    this._applyIntegrationsMetadata(prepared);\n\n    // If we have scope given to us, use it as the base for further modifications.\n    // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n    let finalScope = scope;\n    if (hint && hint.captureContext) {\n      finalScope = Scope.clone(finalScope).update(hint.captureContext);\n    }\n\n    // We prepare the result here with a resolved Event.\n    let result = SyncPromise.resolve<Event | null>(prepared);\n\n    // This should be the last thing called, since we want that\n    // {@link Hub.addEventProcessor} gets the finished prepared event.\n    if (finalScope) {\n      // In case we have a hub we reassign it.\n      result = finalScope.applyToEvent(prepared, hint);\n    }\n\n    return result.then(evt => {\n      if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n        return this._normalizeEvent(evt, normalizeDepth);\n      }\n      return evt;\n    });\n  }\n\n  /**\n   * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n   * Normalized keys:\n   * - `breadcrumbs.data`\n   * - `user`\n   * - `contexts`\n   * - `extra`\n   * @param event Event\n   * @returns Normalized event\n   */\n  protected _normalizeEvent(event: Event | null, depth: number): Event | null {\n    if (!event) {\n      return null;\n    }\n\n    const normalized = {\n      ...event,\n      ...(event.breadcrumbs && {\n        breadcrumbs: event.breadcrumbs.map(b => ({\n          ...b,\n          ...(b.data && {\n            data: normalize(b.data, depth),\n          }),\n        })),\n      }),\n      ...(event.user && {\n        user: normalize(event.user, depth),\n      }),\n      ...(event.contexts && {\n        contexts: normalize(event.contexts, depth),\n      }),\n      ...(event.extra && {\n        extra: normalize(event.extra, depth),\n      }),\n    };\n    // event.contexts.trace stores information about a Transaction. Similarly,\n    // event.spans[] stores information about child Spans. Given that a\n    // Transaction is conceptually a Span, normalization should apply to both\n    // Transactions and Spans consistently.\n    // For now the decision is to skip normalization of Transactions and Spans,\n    // so this block overwrites the normalized event to add back the original\n    // Transaction information prior to normalization.\n    if (event.contexts && event.contexts.trace) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      normalized.contexts.trace = event.contexts.trace;\n    }\n    return normalized;\n  }\n\n  /**\n   *  Enhances event using the client configuration.\n   *  It takes care of all \"static\" values like environment, release and `dist`,\n   *  as well as truncating overly long values.\n   * @param event event instance to be enhanced\n   */\n  protected _applyClientOptions(event: Event): void {\n    const { environment, release, dist, maxValueLength = 250 } = this.getOptions();\n\n    if (event.environment === undefined && environment !== undefined) {\n      event.environment = environment;\n    }\n\n    if (event.release === undefined && release !== undefined) {\n      event.release = release;\n    }\n\n    if (event.dist === undefined && dist !== undefined) {\n      event.dist = dist;\n    }\n\n    if (event.message) {\n      event.message = truncate(event.message, maxValueLength);\n    }\n\n    const exception = event.exception && event.exception.values && event.exception.values[0];\n    if (exception && exception.value) {\n      exception.value = truncate(exception.value, maxValueLength);\n    }\n\n    const request = event.request;\n    if (request && request.url) {\n      request.url = truncate(request.url, maxValueLength);\n    }\n  }\n\n  /**\n   * This function adds all used integrations to the SDK info in the event.\n   * @param sdkInfo The sdkInfo of the event that will be filled with all integrations.\n   */\n  protected _applyIntegrationsMetadata(event: Event): void {\n    const sdkInfo = event.sdk;\n    const integrationsArray = Object.keys(this._integrations);\n    if (sdkInfo && integrationsArray.length > 0) {\n      sdkInfo.integrations = integrationsArray;\n    }\n  }\n\n  /**\n   * Tells the backend to send this event\n   * @param event The Sentry event to send\n   */\n  protected _sendEvent(event: Event): void {\n    this._getBackend().sendEvent(event);\n  }\n\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n  protected _processEvent(event: Event, hint?: EventHint, scope?: Scope): PromiseLike<Event> {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { beforeSend, sampleRate } = this.getOptions();\n\n    if (!this._isEnabled()) {\n      return SyncPromise.reject('SDK not enabled, will not send event.');\n    }\n\n    const isTransaction = event.type === 'transaction';\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    // Sampling for transaction happens somewhere else\n    if (!isTransaction && typeof sampleRate === 'number' && Math.random() > sampleRate) {\n      return SyncPromise.reject('This event has been sampled, will not send event.');\n    }\n\n    return new SyncPromise((resolve, reject) => {\n      this._prepareEvent(event, scope, hint)\n        .then(prepared => {\n          if (prepared === null) {\n            reject('An event processor returned null, will not send event.');\n            return;\n          }\n\n          let finalEvent: Event | null = prepared;\n\n          const isInternalException =\n            hint && hint.data && (hint.data as { [key: string]: unknown }).__sentry__ === true;\n          // We skip beforeSend in case of transactions\n          if (isInternalException || !beforeSend || isTransaction) {\n            this._sendEvent(finalEvent);\n            resolve(finalEvent);\n            return;\n          }\n\n          const beforeSendResult = beforeSend(prepared, hint);\n          if (typeof beforeSendResult === 'undefined') {\n            logger.error('`beforeSend` method has to return `null` or a valid event.');\n          } else if (isThenable(beforeSendResult)) {\n            this._handleAsyncBeforeSend(beforeSendResult as PromiseLike<Event | null>, resolve, reject);\n          } else {\n            finalEvent = beforeSendResult as Event | null;\n\n            if (finalEvent === null) {\n              logger.log('`beforeSend` returned `null`, will not send event.');\n              resolve(null);\n              return;\n            }\n\n            // From here on we are really async\n            this._sendEvent(finalEvent);\n            resolve(finalEvent);\n          }\n        })\n        .then(null, reason => {\n          this.captureException(reason, {\n            data: {\n              __sentry__: true,\n            },\n            originalException: reason as Error,\n          });\n          reject(\n            `Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${reason}`,\n          );\n        });\n    });\n  }\n\n  /**\n   * Resolves before send Promise and calls resolve/reject on parent SyncPromise.\n   */\n  private _handleAsyncBeforeSend(\n    beforeSend: PromiseLike<Event | null>,\n    resolve: (event: Event) => void,\n    reject: (reason: string) => void,\n  ): void {\n    beforeSend\n      .then(processedEvent => {\n        if (processedEvent === null) {\n          reject('`beforeSend` returned `null`, will not send event.');\n          return;\n        }\n        // From here on we are really async\n        this._sendEvent(processedEvent);\n        resolve(processedEvent);\n      })\n      .then(null, e => {\n        reject(`beforeSend rejected with ${e}`);\n      });\n  }\n}\n","import { Integration, WrappedFunction } from '@sentry/types';\n\nlet originalFunctionToString: () => void;\n\n/** Patch toString calls to return proper name for wrapped functions */\nexport class FunctionToString implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'FunctionToString';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = FunctionToString.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    originalFunctionToString = Function.prototype.toString;\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Function.prototype.toString = function(this: WrappedFunction, ...args: any[]): string {\n      const context = this.__sentry_original__ || this;\n      return originalFunctionToString.apply(context, args);\n    };\n  }\n}\n","import { Event, Response, Status, Transport } from '@sentry/types';\nimport { SyncPromise } from '@sentry/utils';\n\n/** Noop transport */\nexport class NoopTransport implements Transport {\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(_: Event): PromiseLike<Response> {\n    return SyncPromise.resolve({\n      reason: `NoopTransport: Event has been skipped because no Dsn is configured.`,\n      status: Status.Skipped,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(_?: number): PromiseLike<boolean> {\n    return SyncPromise.resolve(true);\n  }\n}\n","import { Event, EventHint, Options, Severity, Transport } from '@sentry/types';\nimport { logger, SentryError } from '@sentry/utils';\n\nimport { NoopTransport } from './transports/noop';\n\n/**\n * Internal platform-dependent Sentry SDK Backend.\n *\n * While {@link Client} contains business logic specific to an SDK, the\n * Backend offers platform specific implementations for low-level operations.\n * These are persisting and loading information, sending events, and hooking\n * into the environment.\n *\n * Backends receive a handle to the Client in their constructor. When a\n * Backend automatically generates events, it must pass them to\n * the Client for validation and processing first.\n *\n * Usually, the Client will be of corresponding type, e.g. NodeBackend\n * receives NodeClient. However, higher-level SDKs can choose to instanciate\n * multiple Backends and delegate tasks between them. In this case, an event\n * generated by one backend might very well be sent by another one.\n *\n * The client also provides access to options via {@link Client.getOptions}.\n * @hidden\n */\nexport interface Backend {\n  /** Creates a {@link Event} from an exception. */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  eventFromException(exception: any, hint?: EventHint): PromiseLike<Event>;\n\n  /** Creates a {@link Event} from a plain message. */\n  eventFromMessage(message: string, level?: Severity, hint?: EventHint): PromiseLike<Event>;\n\n  /** Submits the event to Sentry */\n  sendEvent(event: Event): void;\n\n  /**\n   * Returns the transport that is used by the backend.\n   * Please note that the transport gets lazy initialized so it will only be there once the first event has been sent.\n   *\n   * @returns The transport.\n   */\n  getTransport(): Transport;\n}\n\n/**\n * A class object that can instanciate Backend objects.\n * @hidden\n */\nexport type BackendClass<B extends Backend, O extends Options> = new (options: O) => B;\n\n/**\n * This is the base implemention of a Backend.\n * @hidden\n */\nexport abstract class BaseBackend<O extends Options> implements Backend {\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** Cached transport used internally. */\n  protected _transport: Transport;\n\n  /** Creates a new backend instance. */\n  public constructor(options: O) {\n    this._options = options;\n    if (!this._options.dsn) {\n      logger.warn('No DSN provided, backend will not do anything.');\n    }\n    this._transport = this._setupTransport();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public eventFromException(_exception: any, _hint?: EventHint): PromiseLike<Event> {\n    throw new SentryError('Backend has to implement `eventFromException` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(_message: string, _level?: Severity, _hint?: EventHint): PromiseLike<Event> {\n    throw new SentryError('Backend has to implement `eventFromMessage` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): void {\n    this._transport.sendEvent(event).then(null, reason => {\n      logger.error(`Error while sending event: ${reason}`);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransport(): Transport {\n    return this._transport;\n  }\n\n  /**\n   * Sets up the transport so it can be used later to send requests.\n   */\n  protected _setupTransport(): Transport {\n    return new NoopTransport();\n  }\n}\n","import { Event } from '@sentry/types';\n\nimport { API } from './api';\n\n/** A generic client request. */\nexport interface SentryRequest {\n  body: string;\n  url: string;\n  // headers would contain auth & content-type headers for @sentry/node, but\n  // since @sentry/browser avoids custom headers to prevent CORS preflight\n  // requests, we can use the same approach for @sentry/browser and @sentry/node\n  // for simplicity -- no headers involved.\n  // headers: { [key: string]: string };\n}\n\n/** Creates a SentryRequest from an event. */\nexport function eventToSentryRequest(event: Event, api: API): SentryRequest {\n  const useEnvelope = event.type === 'transaction';\n\n  const req: SentryRequest = {\n    body: JSON.stringify(event),\n    url: useEnvelope ? api.getEnvelopeEndpointWithUrlEncodedAuth() : api.getStoreEndpointWithUrlEncodedAuth(),\n  };\n\n  // https://develop.sentry.dev/sdk/envelopes/\n\n  // Since we don't need to manipulate envelopes nor store them, there is no\n  // exported concept of an Envelope with operations including serialization and\n  // deserialization. Instead, we only implement a minimal subset of the spec to\n  // serialize events inline here.\n  if (useEnvelope) {\n    const envelopeHeaders = JSON.stringify({\n      event_id: event.event_id,\n      // We need to add * 1000 since we divide it by 1000 by default but JS works with ms precision\n      // The reason we use timestampWithMs here is that all clocks across the SDK use the same clock\n      sent_at: new Date().toISOString(),\n    });\n    const itemHeaders = JSON.stringify({\n      type: event.type,\n      // The content-type is assumed to be 'application/json' and not part of\n      // the current spec for transaction items, so we don't bloat the request\n      // body with it.\n      //\n      // content_type: 'application/json',\n      //\n      // The length is optional. It must be the number of bytes in req.Body\n      // encoded as UTF-8. Since the server can figure this out and would\n      // otherwise refuse events that report the length incorrectly, we decided\n      // not to send the length to avoid problems related to reporting the wrong\n      // size and to reduce request body size.\n      //\n      // length: new TextEncoder().encode(req.body).length,\n    });\n    // The trailing newline is optional. We intentionally don't send it to avoid\n    // sending unnecessary bytes.\n    //\n    // const envelope = `${envelopeHeaders}\\n${itemHeaders}\\n${req.body}\\n`;\n    const envelope = `${envelopeHeaders}\\n${itemHeaders}\\n${req.body}`;\n    req.body = envelope;\n  }\n\n  return req;\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { Event, Integration } from '@sentry/types';\nimport { getEventDescription, isMatchingPattern, logger } from '@sentry/utils';\n\n// \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\nconst DEFAULT_IGNORE_ERRORS = [/^Script error\\.?$/, /^Javascript error: Script error\\.? on line 0$/];\n\n/** JSDoc */\ninterface InboundFiltersOptions {\n  allowUrls: Array<string | RegExp>;\n  denyUrls: Array<string | RegExp>;\n  ignoreErrors: Array<string | RegExp>;\n  ignoreInternal: boolean;\n\n  /** @deprecated use {@link InboundFiltersOptions.allowUrls} instead. */\n  whitelistUrls: Array<string | RegExp>;\n  /** @deprecated use {@link InboundFiltersOptions.denyUrls} instead. */\n  blacklistUrls: Array<string | RegExp>;\n}\n\n/** Inbound filters configurable by the user */\nexport class InboundFilters implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'InboundFilters';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = InboundFilters.id;\n\n  public constructor(private readonly _options: Partial<InboundFiltersOptions> = {}) {}\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event) => {\n      const hub = getCurrentHub();\n      if (!hub) {\n        return event;\n      }\n      const self = hub.getIntegration(InboundFilters);\n      if (self) {\n        const client = hub.getClient();\n        const clientOptions = client ? client.getOptions() : {};\n        const options = self._mergeOptions(clientOptions);\n        if (self._shouldDropEvent(event, options)) {\n          return null;\n        }\n      }\n      return event;\n    });\n  }\n\n  /** JSDoc */\n  private _shouldDropEvent(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n    if (this._isSentryError(event, options)) {\n      logger.warn(`Event dropped due to being internal Sentry Error.\\nEvent: ${getEventDescription(event)}`);\n      return true;\n    }\n    if (this._isIgnoredError(event, options)) {\n      logger.warn(\n        `Event dropped due to being matched by \\`ignoreErrors\\` option.\\nEvent: ${getEventDescription(event)}`,\n      );\n      return true;\n    }\n    if (this._isDeniedUrl(event, options)) {\n      logger.warn(\n        `Event dropped due to being matched by \\`denyUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${this._getEventFilterUrl(event)}`,\n      );\n      return true;\n    }\n    if (!this._isAllowedUrl(event, options)) {\n      logger.warn(\n        `Event dropped due to not being matched by \\`allowUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${this._getEventFilterUrl(event)}`,\n      );\n      return true;\n    }\n    return false;\n  }\n\n  /** JSDoc */\n  private _isSentryError(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n    if (!options.ignoreInternal) {\n      return false;\n    }\n\n    try {\n      return (\n        (event &&\n          event.exception &&\n          event.exception.values &&\n          event.exception.values[0] &&\n          event.exception.values[0].type === 'SentryError') ||\n        false\n      );\n    } catch (_oO) {\n      return false;\n    }\n  }\n\n  /** JSDoc */\n  private _isIgnoredError(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n    if (!options.ignoreErrors || !options.ignoreErrors.length) {\n      return false;\n    }\n\n    return this._getPossibleEventMessages(event).some(message =>\n      // Not sure why TypeScript complains here...\n      (options.ignoreErrors as Array<RegExp | string>).some(pattern => isMatchingPattern(message, pattern)),\n    );\n  }\n\n  /** JSDoc */\n  private _isDeniedUrl(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n    // TODO: Use Glob instead?\n    if (!options.denyUrls || !options.denyUrls.length) {\n      return false;\n    }\n    const url = this._getEventFilterUrl(event);\n    return !url ? false : options.denyUrls.some(pattern => isMatchingPattern(url, pattern));\n  }\n\n  /** JSDoc */\n  private _isAllowedUrl(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n    // TODO: Use Glob instead?\n    if (!options.allowUrls || !options.allowUrls.length) {\n      return true;\n    }\n    const url = this._getEventFilterUrl(event);\n    return !url ? true : options.allowUrls.some(pattern => isMatchingPattern(url, pattern));\n  }\n\n  /** JSDoc */\n  private _mergeOptions(clientOptions: Partial<InboundFiltersOptions> = {}): Partial<InboundFiltersOptions> {\n    return {\n      allowUrls: [\n        // eslint-disable-next-line deprecation/deprecation\n        ...(this._options.whitelistUrls || []),\n        ...(this._options.allowUrls || []),\n        // eslint-disable-next-line deprecation/deprecation\n        ...(clientOptions.whitelistUrls || []),\n        ...(clientOptions.allowUrls || []),\n      ],\n      denyUrls: [\n        // eslint-disable-next-line deprecation/deprecation\n        ...(this._options.blacklistUrls || []),\n        ...(this._options.denyUrls || []),\n        // eslint-disable-next-line deprecation/deprecation\n        ...(clientOptions.blacklistUrls || []),\n        ...(clientOptions.denyUrls || []),\n      ],\n      ignoreErrors: [\n        ...(this._options.ignoreErrors || []),\n        ...(clientOptions.ignoreErrors || []),\n        ...DEFAULT_IGNORE_ERRORS,\n      ],\n      ignoreInternal: typeof this._options.ignoreInternal !== 'undefined' ? this._options.ignoreInternal : true,\n    };\n  }\n\n  /** JSDoc */\n  private _getPossibleEventMessages(event: Event): string[] {\n    if (event.message) {\n      return [event.message];\n    }\n    if (event.exception) {\n      try {\n        const { type = '', value = '' } = (event.exception.values && event.exception.values[0]) || {};\n        return [`${value}`, `${type}: ${value}`];\n      } catch (oO) {\n        logger.error(`Cannot extract message for event ${getEventDescription(event)}`);\n        return [];\n      }\n    }\n    return [];\n  }\n\n  /** JSDoc */\n  private _getEventFilterUrl(event: Event): string | null {\n    try {\n      if (event.stacktrace) {\n        const frames = event.stacktrace.frames;\n        return (frames && frames[frames.length - 1].filename) || null;\n      }\n      if (event.exception) {\n        const frames =\n          event.exception.values && event.exception.values[0].stacktrace && event.exception.values[0].stacktrace.frames;\n        return (frames && frames[frames.length - 1].filename) || null;\n      }\n      return null;\n    } catch (oO) {\n      logger.error(`Cannot extract url for event ${getEventDescription(event)}`);\n      return null;\n    }\n  }\n}\n","/**\n * This was originally forked from https://github.com/occ/TraceKit, but has since been\n * largely modified and is now maintained as part of Sentry JS SDK.\n */\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/**\n * An object representing a single stack frame.\n * {Object} StackFrame\n * {string} url The JavaScript or HTML file URL.\n * {string} func The function name, or empty for anonymous functions (if guessing did not work).\n * {string[]?} args The arguments passed to the function, if known.\n * {number=} line The line number, if known.\n * {number=} column The column number, if known.\n * {string[]} context An array of source code lines; the middle element corresponds to the correct line#.\n */\nexport interface StackFrame {\n  url: string;\n  func: string;\n  args: string[];\n  line: number | null;\n  column: number | null;\n}\n\n/**\n * An object representing a JavaScript stack trace.\n * {Object} StackTrace\n * {string} name The name of the thrown exception.\n * {string} message The exception error message.\n * {TraceKit.StackFrame[]} stack An array of stack frames.\n */\nexport interface StackTrace {\n  name: string;\n  message: string;\n  mechanism?: string;\n  stack: StackFrame[];\n  failed?: boolean;\n}\n\n// global reference to slice\nconst UNKNOWN_FUNCTION = '?';\n\n// Chromium based browsers: Chrome, Brave, new Opera, new Edge\nconst chrome = /^\\s*at (?:(.*?) ?\\()?((?:file|https?|blob|chrome-extension|address|native|eval|webpack|<anonymous>|[-a-z]+:|.*bundle|\\/).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i;\n// gecko regex: `(?:bundle|\\d+\\.js)`: `bundle` is for react native, `\\d+\\.js` also but specifically for ram bundles because it\n// generates filenames without a prefix like `file://` the filenames in the stacktrace are just 42.js\n// We need this specific case for now because we want no other regex to match.\nconst gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)?((?:file|https?|blob|chrome|webpack|resource|moz-extension|capacitor).*?:\\/.*?|\\[native code\\]|[^@]*(?:bundle|\\d+\\.js))(?::(\\d+))?(?::(\\d+))?\\s*$/i;\nconst winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nconst geckoEval = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\nconst chromeEval = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\n// Based on our own mapping pattern - https://github.com/getsentry/sentry/blob/9f08305e09866c8bd6d0c24f5b0aabdd7dd6c59c/src/sentry/lang/javascript/errormapping.py#L83-L108\nconst reactMinifiedRegexp = /Minified React error #\\d+;/i;\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nexport function computeStackTrace(ex: any): StackTrace {\n  let stack = null;\n  let popSize = 0;\n\n  if (ex) {\n    if (typeof ex.framesToPop === 'number') {\n      popSize = ex.framesToPop;\n    } else if (reactMinifiedRegexp.test(ex.message)) {\n      popSize = 1;\n    }\n  }\n\n  try {\n    // This must be tried first because Opera 10 *destroys*\n    // its stacktrace property if you try to access the stack\n    // property first!!\n    stack = computeStackTraceFromStacktraceProp(ex);\n    if (stack) {\n      return popFrames(stack, popSize);\n    }\n  } catch (e) {\n    // no-empty\n  }\n\n  try {\n    stack = computeStackTraceFromStackProp(ex);\n    if (stack) {\n      return popFrames(stack, popSize);\n    }\n  } catch (e) {\n    // no-empty\n  }\n\n  return {\n    message: extractMessage(ex),\n    name: ex && ex.name,\n    stack: [],\n    failed: true,\n  };\n}\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, complexity\nfunction computeStackTraceFromStackProp(ex: any): StackTrace | null {\n  if (!ex || !ex.stack) {\n    return null;\n  }\n\n  const stack = [];\n  const lines = ex.stack.split('\\n');\n  let isEval;\n  let submatch;\n  let parts;\n  let element;\n\n  for (let i = 0; i < lines.length; ++i) {\n    if ((parts = chrome.exec(lines[i]))) {\n      const isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line\n      isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n      if (isEval && (submatch = chromeEval.exec(parts[2]))) {\n        // throw out eval line/column and use top-most line/column number\n        parts[2] = submatch[1]; // url\n        parts[3] = submatch[2]; // line\n        parts[4] = submatch[3]; // column\n      }\n      element = {\n        // working with the regexp above is super painful. it is quite a hack, but just stripping the `address at `\n        // prefix here seems like the quickest solution for now.\n        url: parts[2] && parts[2].indexOf('address at ') === 0 ? parts[2].substr('address at '.length) : parts[2],\n        func: parts[1] || UNKNOWN_FUNCTION,\n        args: isNative ? [parts[2]] : [],\n        line: parts[3] ? +parts[3] : null,\n        column: parts[4] ? +parts[4] : null,\n      };\n    } else if ((parts = winjs.exec(lines[i]))) {\n      element = {\n        url: parts[2],\n        func: parts[1] || UNKNOWN_FUNCTION,\n        args: [],\n        line: +parts[3],\n        column: parts[4] ? +parts[4] : null,\n      };\n    } else if ((parts = gecko.exec(lines[i]))) {\n      isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n      if (isEval && (submatch = geckoEval.exec(parts[3]))) {\n        // throw out eval line/column and use top-most line number\n        parts[1] = parts[1] || `eval`;\n        parts[3] = submatch[1];\n        parts[4] = submatch[2];\n        parts[5] = ''; // no column when eval\n      } else if (i === 0 && !parts[5] && ex.columnNumber !== void 0) {\n        // FireFox uses this awesome columnNumber property for its top frame\n        // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n        // so adding 1\n        // NOTE: this hack doesn't work if top-most frame is eval\n        stack[0].column = (ex.columnNumber as number) + 1;\n      }\n      element = {\n        url: parts[3],\n        func: parts[1] || UNKNOWN_FUNCTION,\n        args: parts[2] ? parts[2].split(',') : [],\n        line: parts[4] ? +parts[4] : null,\n        column: parts[5] ? +parts[5] : null,\n      };\n    } else {\n      continue;\n    }\n\n    if (!element.func && element.line) {\n      element.func = UNKNOWN_FUNCTION;\n    }\n\n    stack.push(element);\n  }\n\n  if (!stack.length) {\n    return null;\n  }\n\n  return {\n    message: extractMessage(ex),\n    name: ex.name,\n    stack,\n  };\n}\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction computeStackTraceFromStacktraceProp(ex: any): StackTrace | null {\n  if (!ex || !ex.stacktrace) {\n    return null;\n  }\n  // Access and store the stacktrace property before doing ANYTHING\n  // else to it because Opera is not very good at providing it\n  // reliably in other circumstances.\n  const stacktrace = ex.stacktrace;\n  const opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i;\n  const opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\\((.*)\\))? in (.*):\\s*$/i;\n  const lines = stacktrace.split('\\n');\n  const stack = [];\n  let parts;\n\n  for (let line = 0; line < lines.length; line += 2) {\n    let element = null;\n    if ((parts = opera10Regex.exec(lines[line]))) {\n      element = {\n        url: parts[2],\n        func: parts[3],\n        args: [],\n        line: +parts[1],\n        column: null,\n      };\n    } else if ((parts = opera11Regex.exec(lines[line]))) {\n      element = {\n        url: parts[6],\n        func: parts[3] || parts[4],\n        args: parts[5] ? parts[5].split(',') : [],\n        line: +parts[1],\n        column: +parts[2],\n      };\n    }\n\n    if (element) {\n      if (!element.func && element.line) {\n        element.func = UNKNOWN_FUNCTION;\n      }\n      stack.push(element);\n    }\n  }\n\n  if (!stack.length) {\n    return null;\n  }\n\n  return {\n    message: extractMessage(ex),\n    name: ex.name,\n    stack,\n  };\n}\n\n/** Remove N number of frames from the stack */\nfunction popFrames(stacktrace: StackTrace, popSize: number): StackTrace {\n  try {\n    return {\n      ...stacktrace,\n      stack: stacktrace.stack.slice(popSize),\n    };\n  } catch (e) {\n    return stacktrace;\n  }\n}\n\n/**\n * There are cases where stacktrace.message is an Event object\n * https://github.com/getsentry/sentry-javascript/issues/1949\n * In this specific case we try to extract stacktrace.message.error.message\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction extractMessage(ex: any): string {\n  const message = ex && ex.message;\n  if (!message) {\n    return 'No error message';\n  }\n  if (message.error && typeof message.error.message === 'string') {\n    return message.error.message;\n  }\n  return message;\n}\n","import { Event, Exception, StackFrame } from '@sentry/types';\nimport { extractExceptionKeysForMessage, isEvent, normalizeToSize } from '@sentry/utils';\n\nimport { computeStackTrace, StackFrame as TraceKitStackFrame, StackTrace as TraceKitStackTrace } from './tracekit';\n\nconst STACKTRACE_LIMIT = 50;\n\n/**\n * This function creates an exception from an TraceKitStackTrace\n * @param stacktrace TraceKitStackTrace that will be converted to an exception\n * @hidden\n */\nexport function exceptionFromStacktrace(stacktrace: TraceKitStackTrace): Exception {\n  const frames = prepareFramesForEvent(stacktrace.stack);\n\n  const exception: Exception = {\n    type: stacktrace.name,\n    value: stacktrace.message,\n  };\n\n  if (frames && frames.length) {\n    exception.stacktrace = { frames };\n  }\n\n  if (exception.type === undefined && exception.value === '') {\n    exception.value = 'Unrecoverable error caught';\n  }\n\n  return exception;\n}\n\n/**\n * @hidden\n */\nexport function eventFromPlainObject(\n  exception: Record<string, unknown>,\n  syntheticException?: Error,\n  rejection?: boolean,\n): Event {\n  const event: Event = {\n    exception: {\n      values: [\n        {\n          type: isEvent(exception) ? exception.constructor.name : rejection ? 'UnhandledRejection' : 'Error',\n          value: `Non-Error ${\n            rejection ? 'promise rejection' : 'exception'\n          } captured with keys: ${extractExceptionKeysForMessage(exception)}`,\n        },\n      ],\n    },\n    extra: {\n      __serialized__: normalizeToSize(exception),\n    },\n  };\n\n  if (syntheticException) {\n    const stacktrace = computeStackTrace(syntheticException);\n    const frames = prepareFramesForEvent(stacktrace.stack);\n    event.stacktrace = {\n      frames,\n    };\n  }\n\n  return event;\n}\n\n/**\n * @hidden\n */\nexport function eventFromStacktrace(stacktrace: TraceKitStackTrace): Event {\n  const exception = exceptionFromStacktrace(stacktrace);\n\n  return {\n    exception: {\n      values: [exception],\n    },\n  };\n}\n\n/**\n * @hidden\n */\nexport function prepareFramesForEvent(stack: TraceKitStackFrame[]): StackFrame[] {\n  if (!stack || !stack.length) {\n    return [];\n  }\n\n  let localStack = stack;\n\n  const firstFrameFunction = localStack[0].func || '';\n  const lastFrameFunction = localStack[localStack.length - 1].func || '';\n\n  // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n  if (firstFrameFunction.indexOf('captureMessage') !== -1 || firstFrameFunction.indexOf('captureException') !== -1) {\n    localStack = localStack.slice(1);\n  }\n\n  // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n  if (lastFrameFunction.indexOf('sentryWrapped') !== -1) {\n    localStack = localStack.slice(0, -1);\n  }\n\n  // The frame where the crash happened, should be the last entry in the array\n  return localStack\n    .slice(0, STACKTRACE_LIMIT)\n    .map(\n      (frame: TraceKitStackFrame): StackFrame => ({\n        colno: frame.column === null ? undefined : frame.column,\n        filename: frame.url || localStack[0].url,\n        function: frame.func || '?',\n        in_app: true,\n        lineno: frame.line === null ? undefined : frame.line,\n      }),\n    )\n    .reverse();\n}\n","import { Event, EventHint, Options, Severity } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addExceptionTypeValue,\n  isDOMError,\n  isDOMException,\n  isError,\n  isErrorEvent,\n  isEvent,\n  isPlainObject,\n  SyncPromise,\n} from '@sentry/utils';\n\nimport { eventFromPlainObject, eventFromStacktrace, prepareFramesForEvent } from './parsers';\nimport { computeStackTrace } from './tracekit';\n\n/**\n * Builds and Event from a Exception\n * @hidden\n */\nexport function eventFromException(options: Options, exception: unknown, hint?: EventHint): PromiseLike<Event> {\n  const syntheticException = (hint && hint.syntheticException) || undefined;\n  const event = eventFromUnknownInput(exception, syntheticException, {\n    attachStacktrace: options.attachStacktrace,\n  });\n  addExceptionMechanism(event, {\n    handled: true,\n    type: 'generic',\n  });\n  event.level = Severity.Error;\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return SyncPromise.resolve(event);\n}\n\n/**\n * Builds and Event from a Message\n * @hidden\n */\nexport function eventFromMessage(\n  options: Options,\n  message: string,\n  level: Severity = Severity.Info,\n  hint?: EventHint,\n): PromiseLike<Event> {\n  const syntheticException = (hint && hint.syntheticException) || undefined;\n  const event = eventFromString(message, syntheticException, {\n    attachStacktrace: options.attachStacktrace,\n  });\n  event.level = level;\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return SyncPromise.resolve(event);\n}\n\n/**\n * @hidden\n */\nexport function eventFromUnknownInput(\n  exception: unknown,\n  syntheticException?: Error,\n  options: {\n    rejection?: boolean;\n    attachStacktrace?: boolean;\n  } = {},\n): Event {\n  let event: Event;\n\n  if (isErrorEvent(exception as ErrorEvent) && (exception as ErrorEvent).error) {\n    // If it is an ErrorEvent with `error` property, extract it to get actual Error\n    const errorEvent = exception as ErrorEvent;\n    // eslint-disable-next-line no-param-reassign\n    exception = errorEvent.error;\n    event = eventFromStacktrace(computeStackTrace(exception as Error));\n    return event;\n  }\n  if (isDOMError(exception as DOMError) || isDOMException(exception as DOMException)) {\n    // If it is a DOMError or DOMException (which are legacy APIs, but still supported in some browsers)\n    // then we just extract the name and message, as they don't provide anything else\n    // https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n    // https://developer.mozilla.org/en-US/docs/Web/API/DOMException\n    const domException = exception as DOMException;\n    const name = domException.name || (isDOMError(domException) ? 'DOMError' : 'DOMException');\n    const message = domException.message ? `${name}: ${domException.message}` : name;\n\n    event = eventFromString(message, syntheticException, options);\n    addExceptionTypeValue(event, message);\n    return event;\n  }\n  if (isError(exception as Error)) {\n    // we have a real Error object, do nothing\n    event = eventFromStacktrace(computeStackTrace(exception as Error));\n    return event;\n  }\n  if (isPlainObject(exception) || isEvent(exception)) {\n    // If it is plain Object or Event, serialize it manually and extract options\n    // This will allow us to group events based on top-level keys\n    // which is much better than creating new group when any key/value change\n    const objectException = exception as Record<string, unknown>;\n    event = eventFromPlainObject(objectException, syntheticException, options.rejection);\n    addExceptionMechanism(event, {\n      synthetic: true,\n    });\n    return event;\n  }\n\n  // If none of previous checks were valid, then it means that it's not:\n  // - an instance of DOMError\n  // - an instance of DOMException\n  // - an instance of Event\n  // - an instance of Error\n  // - a valid ErrorEvent (one with an error property)\n  // - a plain Object\n  //\n  // So bail out and capture it as a simple message:\n  event = eventFromString(exception as string, syntheticException, options);\n  addExceptionTypeValue(event, `${exception}`, undefined);\n  addExceptionMechanism(event, {\n    synthetic: true,\n  });\n\n  return event;\n}\n\n/**\n * @hidden\n */\nexport function eventFromString(\n  input: string,\n  syntheticException?: Error,\n  options: {\n    attachStacktrace?: boolean;\n  } = {},\n): Event {\n  const event: Event = {\n    message: input,\n  };\n\n  if (options.attachStacktrace && syntheticException) {\n    const stacktrace = computeStackTrace(syntheticException);\n    const frames = prepareFramesForEvent(stacktrace.stack);\n    event.stacktrace = {\n      frames,\n    };\n  }\n\n  return event;\n}\n","import { API } from '@sentry/core';\nimport { Event, Response, Transport, TransportOptions } from '@sentry/types';\nimport { PromiseBuffer, SentryError } from '@sentry/utils';\n\n/** Base Transport class implementation */\nexport abstract class BaseTransport implements Transport {\n  /**\n   * @deprecated\n   */\n  public url: string;\n\n  /** Helper to get Sentry API endpoints. */\n  protected readonly _api: API;\n\n  /** A simple buffer holding all requests. */\n  protected readonly _buffer: PromiseBuffer<Response> = new PromiseBuffer(30);\n\n  public constructor(public options: TransportOptions) {\n    this._api = new API(this.options.dsn);\n    // eslint-disable-next-line deprecation/deprecation\n    this.url = this._api.getStoreEndpointWithUrlEncodedAuth();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(_: Event): PromiseLike<Response> {\n    throw new SentryError('Transport Class has to implement `sendEvent` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this._buffer.drain(timeout);\n  }\n}\n","import { eventToSentryRequest } from '@sentry/core';\nimport { Event, Response, Status } from '@sentry/types';\nimport { getGlobalObject, logger, parseRetryAfterHeader, supportsReferrerPolicy, SyncPromise } from '@sentry/utils';\n\nimport { BaseTransport } from './base';\n\nconst global = getGlobalObject<Window>();\n\n/** `fetch` based transport */\nexport class FetchTransport extends BaseTransport {\n  /** Locks transport after receiving 429 response */\n  private _disabledUntil: Date = new Date(Date.now());\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): PromiseLike<Response> {\n    if (new Date(Date.now()) < this._disabledUntil) {\n      return Promise.reject({\n        event,\n        reason: `Transport locked till ${this._disabledUntil} due to too many requests.`,\n        status: 429,\n      });\n    }\n\n    const sentryReq = eventToSentryRequest(event, this._api);\n\n    const options: RequestInit = {\n      body: sentryReq.body,\n      method: 'POST',\n      // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n      // https://caniuse.com/#feat=referrer-policy\n      // It doesn't. And it throw exception instead of ignoring this parameter...\n      // REF: https://github.com/getsentry/raven-js/issues/1233\n      referrerPolicy: (supportsReferrerPolicy() ? 'origin' : '') as ReferrerPolicy,\n    };\n\n    if (this.options.fetchParameters !== undefined) {\n      Object.assign(options, this.options.fetchParameters);\n    }\n\n    if (this.options.headers !== undefined) {\n      options.headers = this.options.headers;\n    }\n\n    return this._buffer.add(\n      new SyncPromise<Response>((resolve, reject) => {\n        global\n          .fetch(sentryReq.url, options)\n          .then(response => {\n            const status = Status.fromHttpCode(response.status);\n\n            if (status === Status.Success) {\n              resolve({ status });\n              return;\n            }\n\n            if (status === Status.RateLimit) {\n              const now = Date.now();\n              /**\n               * \"The name is case-insensitive.\"\n               * https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n               */\n              const retryAfterHeader = response.headers.get('Retry-After');\n              this._disabledUntil = new Date(now + parseRetryAfterHeader(now, retryAfterHeader));\n              logger.warn(`Too many requests, backing off till: ${this._disabledUntil}`);\n            }\n\n            reject(response);\n          })\n          .catch(reject);\n      }),\n    );\n  }\n}\n","import { eventToSentryRequest } from '@sentry/core';\nimport { Event, Response, Status } from '@sentry/types';\nimport { logger, parseRetryAfterHeader, SyncPromise } from '@sentry/utils';\n\nimport { BaseTransport } from './base';\n\n/** `XHR` based transport */\nexport class XHRTransport extends BaseTransport {\n  /** Locks transport after receiving 429 response */\n  private _disabledUntil: Date = new Date(Date.now());\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): PromiseLike<Response> {\n    if (new Date(Date.now()) < this._disabledUntil) {\n      return Promise.reject({\n        event,\n        reason: `Transport locked till ${this._disabledUntil} due to too many requests.`,\n        status: 429,\n      });\n    }\n\n    const sentryReq = eventToSentryRequest(event, this._api);\n\n    return this._buffer.add(\n      new SyncPromise<Response>((resolve, reject) => {\n        const request = new XMLHttpRequest();\n\n        request.onreadystatechange = (): void => {\n          if (request.readyState !== 4) {\n            return;\n          }\n\n          const status = Status.fromHttpCode(request.status);\n\n          if (status === Status.Success) {\n            resolve({ status });\n            return;\n          }\n\n          if (status === Status.RateLimit) {\n            const now = Date.now();\n            /**\n             * \"The search for the header name is case-insensitive.\"\n             * https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getResponseHeader\n             */\n            const retryAfterHeader = request.getResponseHeader('Retry-After');\n            this._disabledUntil = new Date(now + parseRetryAfterHeader(now, retryAfterHeader));\n            logger.warn(`Too many requests, backing off till: ${this._disabledUntil}`);\n          }\n\n          reject(request);\n        };\n\n        request.open('POST', sentryReq.url);\n        for (const header in this.options.headers) {\n          if (this.options.headers.hasOwnProperty(header)) {\n            request.setRequestHeader(header, this.options.headers[header]);\n          }\n        }\n        request.send(sentryReq.body);\n      }),\n    );\n  }\n}\n","import { BaseBackend } from '@sentry/core';\nimport { Event, EventHint, Options, Severity, Transport } from '@sentry/types';\nimport { supportsFetch } from '@sentry/utils';\n\nimport { eventFromException, eventFromMessage } from './eventbuilder';\nimport { FetchTransport, XHRTransport } from './transports';\n\n/**\n * Configuration options for the Sentry Browser SDK.\n * @see BrowserClient for more information.\n */\nexport interface BrowserOptions extends Options {\n  /**\n   * A pattern for error URLs which should exclusively be sent to Sentry.\n   * This is the opposite of {@link Options.denyUrls}.\n   * By default, all errors will be sent.\n   */\n  allowUrls?: Array<string | RegExp>;\n\n  /**\n   * A pattern for error URLs which should not be sent to Sentry.\n   * To allow certain errors instead, use {@link Options.allowUrls}.\n   * By default, all errors will be sent.\n   */\n  denyUrls?: Array<string | RegExp>;\n\n  /** @deprecated use {@link Options.allowUrls} instead. */\n  whitelistUrls?: Array<string | RegExp>;\n\n  /** @deprecated use {@link Options.denyUrls} instead. */\n  blacklistUrls?: Array<string | RegExp>;\n}\n\n/**\n * The Sentry Browser SDK Backend.\n * @hidden\n */\nexport class BrowserBackend extends BaseBackend<BrowserOptions> {\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: unknown, hint?: EventHint): PromiseLike<Event> {\n    return eventFromException(this._options, exception, hint);\n  }\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(message: string, level: Severity = Severity.Info, hint?: EventHint): PromiseLike<Event> {\n    return eventFromMessage(this._options, message, level, hint);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _setupTransport(): Transport {\n    if (!this._options.dsn) {\n      // We return the noop transport here in case there is no Dsn.\n      return super._setupTransport();\n    }\n\n    const transportOptions = {\n      ...this._options.transportOptions,\n      dsn: this._options.dsn,\n    };\n\n    if (this._options.transport) {\n      return new this._options.transport(transportOptions);\n    }\n    if (supportsFetch()) {\n      return new FetchTransport(transportOptions);\n    }\n    return new XHRTransport(transportOptions);\n  }\n}\n","import { API, captureException, withScope } from '@sentry/core';\nimport { DsnLike, Event as SentryEvent, Mechanism, Scope, WrappedFunction } from '@sentry/types';\nimport { addExceptionMechanism, addExceptionTypeValue, logger } from '@sentry/utils';\n\nlet ignoreOnError: number = 0;\n\n/**\n * @hidden\n */\nexport function shouldIgnoreOnError(): boolean {\n  return ignoreOnError > 0;\n}\n\n/**\n * @hidden\n */\nexport function ignoreNextOnError(): void {\n  // onerror should trigger before setTimeout\n  ignoreOnError += 1;\n  setTimeout(() => {\n    ignoreOnError -= 1;\n  });\n}\n\n/**\n * Instruments the given function and sends an event to Sentry every time the\n * function throws an exception.\n *\n * @param fn A function to wrap.\n * @returns The wrapped function.\n * @hidden\n */\nexport function wrap(\n  fn: WrappedFunction,\n  options: {\n    mechanism?: Mechanism;\n  } = {},\n  before?: WrappedFunction,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n): any {\n  if (typeof fn !== 'function') {\n    return fn;\n  }\n\n  try {\n    // We don't wanna wrap it twice\n    if (fn.__sentry__) {\n      return fn;\n    }\n\n    // If this has already been wrapped in the past, return that wrapped function\n    if (fn.__sentry_wrapped__) {\n      return fn.__sentry_wrapped__;\n    }\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    // Bail on wrapping and return the function as-is (defers to window.onerror).\n    return fn;\n  }\n\n  /* eslint-disable prefer-rest-params */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const sentryWrapped: WrappedFunction = function(this: any): void {\n    const args = Array.prototype.slice.call(arguments);\n\n    try {\n      if (before && typeof before === 'function') {\n        before.apply(this, arguments);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n      const wrappedArguments = args.map((arg: any) => wrap(arg, options));\n\n      if (fn.handleEvent) {\n        // Attempt to invoke user-land function\n        // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n        //       means the sentry.javascript SDK caught an error invoking your application code. This\n        //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        return fn.handleEvent.apply(this, wrappedArguments);\n      }\n      // Attempt to invoke user-land function\n      // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n      //       means the sentry.javascript SDK caught an error invoking your application code. This\n      //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n      return fn.apply(this, wrappedArguments);\n    } catch (ex) {\n      ignoreNextOnError();\n\n      withScope((scope: Scope) => {\n        scope.addEventProcessor((event: SentryEvent) => {\n          const processedEvent = { ...event };\n\n          if (options.mechanism) {\n            addExceptionTypeValue(processedEvent, undefined, undefined);\n            addExceptionMechanism(processedEvent, options.mechanism);\n          }\n\n          processedEvent.extra = {\n            ...processedEvent.extra,\n            arguments: args,\n          };\n\n          return processedEvent;\n        });\n\n        captureException(ex);\n      });\n\n      throw ex;\n    }\n  };\n  /* eslint-enable prefer-rest-params */\n\n  // Accessing some objects may throw\n  // ref: https://github.com/getsentry/sentry-javascript/issues/1168\n  try {\n    for (const property in fn) {\n      if (Object.prototype.hasOwnProperty.call(fn, property)) {\n        sentryWrapped[property] = fn[property];\n      }\n    }\n  } catch (_oO) {} // eslint-disable-line no-empty\n\n  fn.prototype = fn.prototype || {};\n  sentryWrapped.prototype = fn.prototype;\n\n  Object.defineProperty(fn, '__sentry_wrapped__', {\n    enumerable: false,\n    value: sentryWrapped,\n  });\n\n  // Signal that this function has been wrapped/filled already\n  // for both debugging and to prevent it to being wrapped/filled twice\n  Object.defineProperties(sentryWrapped, {\n    __sentry__: {\n      enumerable: false,\n      value: true,\n    },\n    __sentry_original__: {\n      enumerable: false,\n      value: fn,\n    },\n  });\n\n  // Restore original function name (not all browsers allow that)\n  try {\n    const descriptor = Object.getOwnPropertyDescriptor(sentryWrapped, 'name') as PropertyDescriptor;\n    if (descriptor.configurable) {\n      Object.defineProperty(sentryWrapped, 'name', {\n        get(): string {\n          return fn.name;\n        },\n      });\n    }\n    // eslint-disable-next-line no-empty\n  } catch (_oO) {}\n\n  return sentryWrapped;\n}\n\n/**\n * All properties the report dialog supports\n */\nexport interface ReportDialogOptions {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any;\n  eventId?: string;\n  dsn?: DsnLike;\n  user?: {\n    email?: string;\n    name?: string;\n  };\n  lang?: string;\n  title?: string;\n  subtitle?: string;\n  subtitle2?: string;\n  labelName?: string;\n  labelEmail?: string;\n  labelComments?: string;\n  labelClose?: string;\n  labelSubmit?: string;\n  errorGeneric?: string;\n  errorFormEntry?: string;\n  successMessage?: string;\n  /** Callback after reportDialog showed up */\n  onLoad?(): void;\n}\n\n/**\n * Injects the Report Dialog script\n * @hidden\n */\nexport function injectReportDialog(options: ReportDialogOptions = {}): void {\n  if (!options.eventId) {\n    logger.error(`Missing eventId option in showReportDialog call`);\n    return;\n  }\n  if (!options.dsn) {\n    logger.error(`Missing dsn option in showReportDialog call`);\n    return;\n  }\n\n  const script = document.createElement('script');\n  script.async = true;\n  script.src = new API(options.dsn).getReportDialogEndpoint(options);\n\n  if (options.onLoad) {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    script.onload = options.onLoad;\n  }\n\n  (document.head || document.body).appendChild(script);\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport { getCurrentHub } from '@sentry/core';\nimport { Event, Integration, Severity } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addInstrumentationHandler,\n  getLocationHref,\n  isErrorEvent,\n  isPrimitive,\n  isString,\n  logger,\n} from '@sentry/utils';\n\nimport { eventFromUnknownInput } from '../eventbuilder';\nimport { shouldIgnoreOnError } from '../helpers';\n\n/** JSDoc */\ninterface GlobalHandlersIntegrations {\n  onerror: boolean;\n  onunhandledrejection: boolean;\n}\n\n/** Global handlers */\nexport class GlobalHandlers implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'GlobalHandlers';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = GlobalHandlers.id;\n\n  /** JSDoc */\n  private readonly _options: GlobalHandlersIntegrations;\n\n  /** JSDoc */\n  private _onErrorHandlerInstalled: boolean = false;\n\n  /** JSDoc */\n  private _onUnhandledRejectionHandlerInstalled: boolean = false;\n\n  /** JSDoc */\n  public constructor(options?: GlobalHandlersIntegrations) {\n    this._options = {\n      onerror: true,\n      onunhandledrejection: true,\n      ...options,\n    };\n  }\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    Error.stackTraceLimit = 50;\n\n    if (this._options.onerror) {\n      logger.log('Global Handler attached: onerror');\n      this._installGlobalOnErrorHandler();\n    }\n\n    if (this._options.onunhandledrejection) {\n      logger.log('Global Handler attached: onunhandledrejection');\n      this._installGlobalOnUnhandledRejectionHandler();\n    }\n  }\n\n  /** JSDoc */\n  private _installGlobalOnErrorHandler(): void {\n    if (this._onErrorHandlerInstalled) {\n      return;\n    }\n\n    addInstrumentationHandler({\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      callback: (data: { msg: any; url: any; line: any; column: any; error: any }) => {\n        const error = data.error;\n        const currentHub = getCurrentHub();\n        const hasIntegration = currentHub.getIntegration(GlobalHandlers);\n        const isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n\n        if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {\n          return;\n        }\n\n        const client = currentHub.getClient();\n        const event = isPrimitive(error)\n          ? this._eventFromIncompleteOnError(data.msg, data.url, data.line, data.column)\n          : this._enhanceEventWithInitialFrame(\n              eventFromUnknownInput(error, undefined, {\n                attachStacktrace: client && client.getOptions().attachStacktrace,\n                rejection: false,\n              }),\n              data.url,\n              data.line,\n              data.column,\n            );\n\n        addExceptionMechanism(event, {\n          handled: false,\n          type: 'onerror',\n        });\n\n        currentHub.captureEvent(event, {\n          originalException: error,\n        });\n      },\n      type: 'error',\n    });\n\n    this._onErrorHandlerInstalled = true;\n  }\n\n  /** JSDoc */\n  private _installGlobalOnUnhandledRejectionHandler(): void {\n    if (this._onUnhandledRejectionHandlerInstalled) {\n      return;\n    }\n\n    addInstrumentationHandler({\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      callback: (e: any) => {\n        let error = e;\n\n        // dig the object of the rejection out of known event types\n        try {\n          // PromiseRejectionEvents store the object of the rejection under 'reason'\n          // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n          if ('reason' in e) {\n            error = e.reason;\n          }\n          // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n          // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n          // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n          // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n          // https://github.com/getsentry/sentry-javascript/issues/2380\n          else if ('detail' in e && 'reason' in e.detail) {\n            error = e.detail.reason;\n          }\n        } catch (_oO) {\n          // no-empty\n        }\n\n        const currentHub = getCurrentHub();\n        const hasIntegration = currentHub.getIntegration(GlobalHandlers);\n        const isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n\n        if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {\n          return true;\n        }\n\n        const client = currentHub.getClient();\n        const event = isPrimitive(error)\n          ? this._eventFromIncompleteRejection(error)\n          : eventFromUnknownInput(error, undefined, {\n              attachStacktrace: client && client.getOptions().attachStacktrace,\n              rejection: true,\n            });\n\n        event.level = Severity.Error;\n\n        addExceptionMechanism(event, {\n          handled: false,\n          type: 'onunhandledrejection',\n        });\n\n        currentHub.captureEvent(event, {\n          originalException: error,\n        });\n\n        return;\n      },\n      type: 'unhandledrejection',\n    });\n\n    this._onUnhandledRejectionHandlerInstalled = true;\n  }\n\n  /**\n   * This function creates a stack from an old, error-less onerror handler.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _eventFromIncompleteOnError(msg: any, url: any, line: any, column: any): Event {\n    const ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;\n\n    // If 'message' is ErrorEvent, get real message from inside\n    let message = isErrorEvent(msg) ? msg.message : msg;\n    let name;\n\n    if (isString(message)) {\n      const groups = message.match(ERROR_TYPES_RE);\n      if (groups) {\n        name = groups[1];\n        message = groups[2];\n      }\n    }\n\n    const event = {\n      exception: {\n        values: [\n          {\n            type: name || 'Error',\n            value: message,\n          },\n        ],\n      },\n    };\n\n    return this._enhanceEventWithInitialFrame(event, url, line, column);\n  }\n\n  /**\n   * This function creates an Event from an TraceKitStackTrace that has part of it missing.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _eventFromIncompleteRejection(error: any): Event {\n    return {\n      exception: {\n        values: [\n          {\n            type: 'UnhandledRejection',\n            value: `Non-Error promise rejection captured with value: ${error}`,\n          },\n        ],\n      },\n    };\n  }\n\n  /** JSDoc */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _enhanceEventWithInitialFrame(event: Event, url: any, line: any, column: any): Event {\n    event.exception = event.exception || {};\n    event.exception.values = event.exception.values || [];\n    event.exception.values[0] = event.exception.values[0] || {};\n    event.exception.values[0].stacktrace = event.exception.values[0].stacktrace || {};\n    event.exception.values[0].stacktrace.frames = event.exception.values[0].stacktrace.frames || [];\n\n    const colno = isNaN(parseInt(column, 10)) ? undefined : column;\n    const lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n    const filename = isString(url) && url.length > 0 ? url : getLocationHref();\n\n    if (event.exception.values[0].stacktrace.frames.length === 0) {\n      event.exception.values[0].stacktrace.frames.push({\n        colno,\n        filename,\n        function: '?',\n        in_app: true,\n        lineno,\n      });\n    }\n\n    return event;\n  }\n}\n","import { Integration, WrappedFunction } from '@sentry/types';\nimport { fill, getFunctionName, getGlobalObject } from '@sentry/utils';\n\nimport { wrap } from '../helpers';\n\nconst DEFAULT_EVENT_TARGET = [\n  'EventTarget',\n  'Window',\n  'Node',\n  'ApplicationCache',\n  'AudioTrackList',\n  'ChannelMergerNode',\n  'CryptoOperation',\n  'EventSource',\n  'FileReader',\n  'HTMLUnknownElement',\n  'IDBDatabase',\n  'IDBRequest',\n  'IDBTransaction',\n  'KeyOperation',\n  'MediaController',\n  'MessagePort',\n  'ModalWindow',\n  'Notification',\n  'SVGElementInstance',\n  'Screen',\n  'TextTrack',\n  'TextTrackCue',\n  'TextTrackList',\n  'WebSocket',\n  'WebSocketWorker',\n  'Worker',\n  'XMLHttpRequest',\n  'XMLHttpRequestEventTarget',\n  'XMLHttpRequestUpload',\n];\n\ntype XMLHttpRequestProp = 'onload' | 'onerror' | 'onprogress' | 'onreadystatechange';\n\n/** JSDoc */\ninterface TryCatchOptions {\n  setTimeout: boolean;\n  setInterval: boolean;\n  requestAnimationFrame: boolean;\n  XMLHttpRequest: boolean;\n  eventTarget: boolean | string[];\n}\n\n/** Wrap timer functions and event targets to catch errors and provide better meta data */\nexport class TryCatch implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'TryCatch';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = TryCatch.id;\n\n  /** JSDoc */\n  private readonly _options: TryCatchOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<TryCatchOptions>) {\n    this._options = {\n      XMLHttpRequest: true,\n      eventTarget: true,\n      requestAnimationFrame: true,\n      setInterval: true,\n      setTimeout: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Wrap timer functions and event targets to catch errors\n   * and provide better metadata.\n   */\n  public setupOnce(): void {\n    const global = getGlobalObject();\n\n    if (this._options.setTimeout) {\n      fill(global, 'setTimeout', this._wrapTimeFunction.bind(this));\n    }\n\n    if (this._options.setInterval) {\n      fill(global, 'setInterval', this._wrapTimeFunction.bind(this));\n    }\n\n    if (this._options.requestAnimationFrame) {\n      fill(global, 'requestAnimationFrame', this._wrapRAF.bind(this));\n    }\n\n    if (this._options.XMLHttpRequest && 'XMLHttpRequest' in global) {\n      fill(XMLHttpRequest.prototype, 'send', this._wrapXHR.bind(this));\n    }\n\n    if (this._options.eventTarget) {\n      const eventTarget = Array.isArray(this._options.eventTarget) ? this._options.eventTarget : DEFAULT_EVENT_TARGET;\n      eventTarget.forEach(this._wrapEventTarget.bind(this));\n    }\n  }\n\n  /** JSDoc */\n  private _wrapTimeFunction(original: () => void): () => number {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function(this: any, ...args: any[]): number {\n      const originalCallback = args[0];\n      args[0] = wrap(originalCallback, {\n        mechanism: {\n          data: { function: getFunctionName(original) },\n          handled: true,\n          type: 'instrument',\n        },\n      });\n      return original.apply(this, args);\n    };\n  }\n\n  /** JSDoc */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _wrapRAF(original: any): (callback: () => void) => any {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function(this: any, callback: () => void): () => void {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return original.call(\n        this,\n        wrap(callback, {\n          mechanism: {\n            data: {\n              function: 'requestAnimationFrame',\n              handler: getFunctionName(original),\n            },\n            handled: true,\n            type: 'instrument',\n          },\n        }),\n      );\n    };\n  }\n\n  /** JSDoc */\n  private _wrapEventTarget(target: string): void {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const global = getGlobalObject() as { [key: string]: any };\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const proto = global[target] && global[target].prototype;\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n\n    fill(proto, 'addEventListener', function(\n      original: () => void,\n    ): (eventName: string, fn: EventListenerObject, options?: boolean | AddEventListenerOptions) => void {\n      return function(\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this: any,\n        eventName: string,\n        fn: EventListenerObject,\n        options?: boolean | AddEventListenerOptions,\n      ): (eventName: string, fn: EventListenerObject, capture?: boolean, secure?: boolean) => void {\n        try {\n          if (typeof fn.handleEvent === 'function') {\n            fn.handleEvent = wrap(fn.handleEvent.bind(fn), {\n              mechanism: {\n                data: {\n                  function: 'handleEvent',\n                  handler: getFunctionName(fn),\n                  target,\n                },\n                handled: true,\n                type: 'instrument',\n              },\n            });\n          }\n        } catch (err) {\n          // can sometimes get 'Permission denied to access property \"handle Event'\n        }\n\n        return original.call(\n          this,\n          eventName,\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          wrap((fn as any) as WrappedFunction, {\n            mechanism: {\n              data: {\n                function: 'addEventListener',\n                handler: getFunctionName(fn),\n                target,\n              },\n              handled: true,\n              type: 'instrument',\n            },\n          }),\n          options,\n        );\n      };\n    });\n\n    fill(proto, 'removeEventListener', function(\n      original: () => void,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ): (this: any, eventName: string, fn: EventListenerObject, options?: boolean | EventListenerOptions) => () => void {\n      return function(\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this: any,\n        eventName: string,\n        fn: EventListenerObject,\n        options?: boolean | EventListenerOptions,\n      ): () => void {\n        /**\n         * There are 2 possible scenarios here:\n         *\n         * 1. Someone passes a callback, which was attached prior to Sentry initialization, or by using unmodified\n         * method, eg. `document.addEventListener.call(el, name, handler). In this case, we treat this function\n         * as a pass-through, and call original `removeEventListener` with it.\n         *\n         * 2. Someone passes a callback, which was attached after Sentry was initialized, which means that it was using\n         * our wrapped version of `addEventListener`, which internally calls `wrap` helper.\n         * This helper \"wraps\" whole callback inside a try/catch statement, and attached appropriate metadata to it,\n         * in order for us to make a distinction between wrapped/non-wrapped functions possible.\n         * If a function was wrapped, it has additional property of `__sentry_wrapped__`, holding the handler.\n         *\n         * When someone adds a handler prior to initialization, and then do it again, but after,\n         * then we have to detach both of them. Otherwise, if we'd detach only wrapped one, it'd be impossible\n         * to get rid of the initial handler and it'd stick there forever.\n         */\n        try {\n          original.call(this, eventName, ((fn as unknown) as WrappedFunction).__sentry_wrapped__, options);\n        } catch (e) {\n          // ignore, accessing __sentry_wrapped__ will throw in some Selenium environments\n        }\n        return original.call(this, eventName, fn, options);\n      };\n    });\n  }\n\n  /** JSDoc */\n  private _wrapXHR(originalSend: () => void): () => void {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function(this: XMLHttpRequest, ...args: any[]): void {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const xhr = this;\n      const xmlHttpRequestProps: XMLHttpRequestProp[] = ['onload', 'onerror', 'onprogress', 'onreadystatechange'];\n\n      xmlHttpRequestProps.forEach(prop => {\n        if (prop in xhr && typeof xhr[prop] === 'function') {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          fill(xhr, prop, function(original: WrappedFunction): () => any {\n            const wrapOptions = {\n              mechanism: {\n                data: {\n                  function: prop,\n                  handler: getFunctionName(original),\n                },\n                handled: true,\n                type: 'instrument',\n              },\n            };\n\n            // If Instrument integration has been called before TryCatch, get the name of original function\n            if (original.__sentry_original__) {\n              wrapOptions.mechanism.data.handler = getFunctionName(original.__sentry_original__);\n            }\n\n            // Otherwise wrap directly\n            return wrap(original, wrapOptions);\n          });\n        }\n      });\n\n      return originalSend.apply(this, args);\n    };\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable max-lines */\nimport { getCurrentHub } from '@sentry/core';\nimport { Event, Integration, Severity } from '@sentry/types';\nimport {\n  addInstrumentationHandler,\n  getEventDescription,\n  getGlobalObject,\n  htmlTreeAsString,\n  parseUrl,\n  safeJoin,\n} from '@sentry/utils';\n\n/** JSDoc */\ninterface BreadcrumbsOptions {\n  console: boolean;\n  dom: boolean;\n  fetch: boolean;\n  history: boolean;\n  sentry: boolean;\n  xhr: boolean;\n}\n\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\nexport class Breadcrumbs implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Breadcrumbs';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Breadcrumbs.id;\n\n  /** JSDoc */\n  private readonly _options: BreadcrumbsOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<BreadcrumbsOptions>) {\n    this._options = {\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Create a breadcrumb of `sentry` from the events themselves\n   */\n  public addSentryBreadcrumb(event: Event): void {\n    if (!this._options.sentry) {\n      return;\n    }\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `sentry.${event.type === 'transaction' ? 'transaction' : 'event'}`,\n        event_id: event.event_id,\n        level: event.level,\n        message: getEventDescription(event),\n      },\n      {\n        event,\n      },\n    );\n  }\n\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n  public setupOnce(): void {\n    if (this._options.console) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._consoleBreadcrumb(...args);\n        },\n        type: 'console',\n      });\n    }\n    if (this._options.dom) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._domBreadcrumb(...args);\n        },\n        type: 'dom',\n      });\n    }\n    if (this._options.xhr) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._xhrBreadcrumb(...args);\n        },\n        type: 'xhr',\n      });\n    }\n    if (this._options.fetch) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._fetchBreadcrumb(...args);\n        },\n        type: 'fetch',\n      });\n    }\n    if (this._options.history) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._historyBreadcrumb(...args);\n        },\n        type: 'history',\n      });\n    }\n  }\n\n  /**\n   * Creates breadcrumbs from console API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _consoleBreadcrumb(handlerData: { [key: string]: any }): void {\n    const breadcrumb = {\n      category: 'console',\n      data: {\n        arguments: handlerData.args,\n        logger: 'console',\n      },\n      level: Severity.fromString(handlerData.level),\n      message: safeJoin(handlerData.args, ' '),\n    };\n\n    if (handlerData.level === 'assert') {\n      if (handlerData.args[0] === false) {\n        breadcrumb.message = `Assertion failed: ${safeJoin(handlerData.args.slice(1), ' ') || 'console.assert'}`;\n        breadcrumb.data.arguments = handlerData.args.slice(1);\n      } else {\n        // Don't capture a breadcrumb for passed assertions\n        return;\n      }\n    }\n\n    getCurrentHub().addBreadcrumb(breadcrumb, {\n      input: handlerData.args,\n      level: handlerData.level,\n    });\n  }\n\n  /**\n   * Creates breadcrumbs from DOM API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _domBreadcrumb(handlerData: { [key: string]: any }): void {\n    let target;\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      target = handlerData.event.target\n        ? htmlTreeAsString(handlerData.event.target as Node)\n        : htmlTreeAsString((handlerData.event as unknown) as Node);\n    } catch (e) {\n      target = '<unknown>';\n    }\n\n    if (target.length === 0) {\n      return;\n    }\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `ui.${handlerData.name}`,\n        message: target,\n      },\n      {\n        event: handlerData.event,\n        name: handlerData.name,\n      },\n    );\n  }\n\n  /**\n   * Creates breadcrumbs from XHR API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _xhrBreadcrumb(handlerData: { [key: string]: any }): void {\n    if (handlerData.endTimestamp) {\n      // We only capture complete, non-sentry requests\n      if (handlerData.xhr.__sentry_own_request__) {\n        return;\n      }\n\n      const { method, url, status_code, body } = handlerData.xhr.__sentry_xhr__ || {};\n\n      getCurrentHub().addBreadcrumb(\n        {\n          category: 'xhr',\n          data: {\n            method,\n            url,\n            status_code,\n          },\n          type: 'http',\n        },\n        {\n          xhr: handlerData.xhr,\n          input: body,\n        },\n      );\n\n      return;\n    }\n  }\n\n  /**\n   * Creates breadcrumbs from fetch API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _fetchBreadcrumb(handlerData: { [key: string]: any }): void {\n    // We only capture complete fetch requests\n    if (!handlerData.endTimestamp) {\n      return;\n    }\n\n    if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n      // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n      return;\n    }\n\n    if (handlerData.error) {\n      getCurrentHub().addBreadcrumb(\n        {\n          category: 'fetch',\n          data: handlerData.fetchData,\n          level: Severity.Error,\n          type: 'http',\n        },\n        {\n          data: handlerData.error,\n          input: handlerData.args,\n        },\n      );\n    } else {\n      getCurrentHub().addBreadcrumb(\n        {\n          category: 'fetch',\n          data: {\n            ...handlerData.fetchData,\n            status_code: handlerData.response.status,\n          },\n          type: 'http',\n        },\n        {\n          input: handlerData.args,\n          response: handlerData.response,\n        },\n      );\n    }\n  }\n\n  /**\n   * Creates breadcrumbs from history API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _historyBreadcrumb(handlerData: { [key: string]: any }): void {\n    const global = getGlobalObject<Window>();\n    let from = handlerData.from;\n    let to = handlerData.to;\n    const parsedLoc = parseUrl(global.location.href);\n    let parsedFrom = parseUrl(from);\n    const parsedTo = parseUrl(to);\n\n    // Initial pushState doesn't provide `from` information\n    if (!parsedFrom.path) {\n      parsedFrom = parsedLoc;\n    }\n\n    // Use only the path component of the URL if the URL matches the current\n    // document (almost all the time when using pushState)\n    if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n      to = parsedTo.relative;\n    }\n    if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n      from = parsedFrom.relative;\n    }\n\n    getCurrentHub().addBreadcrumb({\n      category: 'navigation',\n      data: {\n        from,\n        to,\n      },\n    });\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, Exception, ExtendedError, Integration } from '@sentry/types';\nimport { isInstanceOf } from '@sentry/utils';\n\nimport { exceptionFromStacktrace } from '../parsers';\nimport { computeStackTrace } from '../tracekit';\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\n/** Adds SDK info to an event. */\nexport class LinkedErrors implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'LinkedErrors';\n\n  /**\n   * @inheritDoc\n   */\n  public readonly name: string = LinkedErrors.id;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _key: string;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _limit: number;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { key?: string; limit?: number } = {}) {\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event, hint?: EventHint) => {\n      const self = getCurrentHub().getIntegration(LinkedErrors);\n      if (self) {\n        return self._handler(event, hint);\n      }\n      return event;\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  private _handler(event: Event, hint?: EventHint): Event | null {\n    if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n      return event;\n    }\n    const linkedErrors = this._walkErrorTree(hint.originalException as ExtendedError, this._key);\n    event.exception.values = [...linkedErrors, ...event.exception.values];\n    return event;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  private _walkErrorTree(error: ExtendedError, key: string, stack: Exception[] = []): Exception[] {\n    if (!isInstanceOf(error[key], Error) || stack.length + 1 >= this._limit) {\n      return stack;\n    }\n    const stacktrace = computeStackTrace(error[key]);\n    const exception = exceptionFromStacktrace(stacktrace);\n    return this._walkErrorTree(error[key], key, [exception, ...stack]);\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, Integration } from '@sentry/types';\nimport { getGlobalObject } from '@sentry/utils';\n\nconst global = getGlobalObject<Window>();\n\n/** UserAgent */\nexport class UserAgent implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'UserAgent';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = UserAgent.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event) => {\n      if (getCurrentHub().getIntegration(UserAgent)) {\n        // if none of the information we want exists, don't bother\n        if (!global.navigator && !global.location && !global.document) {\n          return event;\n        }\n\n        // grab as much info as exists and add it to the event\n        const url = event.request?.url || global.location?.href;\n        const { referrer } = global.document || {};\n        const { userAgent } = global.navigator || {};\n\n        const headers = {\n          ...event.request?.headers,\n          ...(referrer && { Referer: referrer }),\n          ...(userAgent && { 'User-Agent': userAgent }),\n        };\n        const request = { ...(url && { url }), headers };\n\n        return { ...event, request };\n      }\n      return event;\n    });\n  }\n}\n","export const SDK_NAME = 'sentry.javascript.browser';\nexport const SDK_VERSION = '5.25.0';\n","import { BaseClient, Scope } from '@sentry/core';\nimport { Event, EventHint } from '@sentry/types';\nimport { getGlobalObject, logger } from '@sentry/utils';\n\nimport { BrowserBackend, BrowserOptions } from './backend';\nimport { injectReportDialog, ReportDialogOptions } from './helpers';\nimport { Breadcrumbs } from './integrations';\nimport { SDK_NAME, SDK_VERSION } from './version';\n\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nexport class BrowserClient extends BaseClient<BrowserBackend, BrowserOptions> {\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: BrowserOptions = {}) {\n    super(BrowserBackend, options);\n  }\n\n  /**\n   * Show a report dialog to the user to send feedback to a specific event.\n   *\n   * @param options Set individual options for the dialog\n   */\n  public showReportDialog(options: ReportDialogOptions = {}): void {\n    // doesn't work without a document (React Native)\n    const document = getGlobalObject<Window>().document;\n    if (!document) {\n      return;\n    }\n\n    if (!this._isEnabled()) {\n      logger.error('Trying to call showReportDialog with Sentry Client disabled');\n      return;\n    }\n\n    injectReportDialog({\n      ...options,\n      dsn: options.dsn || this.getDsn(),\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): PromiseLike<Event | null> {\n    event.platform = event.platform || 'javascript';\n    event.sdk = {\n      ...event.sdk,\n      name: SDK_NAME,\n      packages: [\n        ...((event.sdk && event.sdk.packages) || []),\n        {\n          name: 'npm:@sentry/browser',\n          version: SDK_VERSION,\n        },\n      ],\n      version: SDK_VERSION,\n    };\n\n    return super._prepareEvent(event, scope, hint);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _sendEvent(event: Event): void {\n    const integration = this.getIntegration(Breadcrumbs);\n    if (integration) {\n      integration.addSentryBreadcrumb(event);\n    }\n    super._sendEvent(event);\n  }\n}\n","import { getCurrentHub, initAndBind, Integrations as CoreIntegrations } from '@sentry/core';\nimport { getGlobalObject, SyncPromise } from '@sentry/utils';\n\nimport { BrowserOptions } from './backend';\nimport { BrowserClient } from './client';\nimport { ReportDialogOptions, wrap as internalWrap } from './helpers';\nimport { Breadcrumbs, GlobalHandlers, LinkedErrors, TryCatch, UserAgent } from './integrations';\n\nexport const defaultIntegrations = [\n  new CoreIntegrations.InboundFilters(),\n  new CoreIntegrations.FunctionToString(),\n  new TryCatch(),\n  new Breadcrumbs(),\n  new GlobalHandlers(),\n  new LinkedErrors(),\n  new UserAgent(),\n];\n\n/**\n * The Sentry Browser SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible when\n * loading the web page. To set context information or send manual events, use\n * the provided methods.\n *\n * @example\n *\n * ```\n *\n * import { init } from '@sentry/browser';\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { configureScope } from '@sentry/browser';\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { addBreadcrumb } from '@sentry/browser';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n *\n * ```\n *\n * import * as Sentry from '@sentry/browser';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link BrowserOptions} for documentation on configuration options.\n */\nexport function init(options: BrowserOptions = {}): void {\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = defaultIntegrations;\n  }\n  if (options.release === undefined) {\n    const window = getGlobalObject<Window>();\n    // This supports the variable that sentry-webpack-plugin injects\n    if (window.SENTRY_RELEASE && window.SENTRY_RELEASE.id) {\n      options.release = window.SENTRY_RELEASE.id;\n    }\n  }\n  initAndBind(BrowserClient, options);\n}\n\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the global scope.\n */\nexport function showReportDialog(options: ReportDialogOptions = {}): void {\n  if (!options.eventId) {\n    options.eventId = getCurrentHub().lastEventId();\n  }\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    client.showReportDialog(options);\n  }\n}\n\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\nexport function lastEventId(): string | undefined {\n  return getCurrentHub().lastEventId();\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function forceLoad(): void {\n  // Noop\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function onLoad(callback: () => void): void {\n  callback();\n}\n\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\nexport function flush(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.flush(timeout);\n  }\n  return SyncPromise.reject(false);\n}\n\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\nexport function close(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.close(timeout);\n  }\n  return SyncPromise.reject(false);\n}\n\n/**\n * Wrap code within a try/catch block so the SDK is able to capture errors.\n *\n * @param fn A function to wrap.\n *\n * @returns The result of wrapped function call.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function wrap(fn: (...args: any) => any): any {\n  return internalWrap(fn)();\n}\n","export * from './exports';\n\nimport { Integrations as CoreIntegrations } from '@sentry/core';\nimport { getGlobalObject } from '@sentry/utils';\n\nimport * as BrowserIntegrations from './integrations';\nimport * as Transports from './transports';\n\nlet windowIntegrations = {};\n\n// This block is needed to add compatibility with the integrations packages when used with a CDN\nconst _window = getGlobalObject<Window>();\nif (_window.Sentry && _window.Sentry.Integrations) {\n  windowIntegrations = _window.Sentry.Integrations;\n}\n\nconst INTEGRATIONS = {\n  ...windowIntegrations,\n  ...CoreIntegrations,\n  ...BrowserIntegrations,\n};\n\nexport { INTEGRATIONS as Integrations, Transports };\n","/** The status of an Span. */\n// eslint-disable-next-line import/export\nexport enum SpanStatus {\n  /** The operation completed successfully. */\n  Ok = 'ok',\n  /** Deadline expired before operation could complete. */\n  DeadlineExceeded = 'deadline_exceeded',\n  /** 401 Unauthorized (actually does mean unauthenticated according to RFC 7235) */\n  Unauthenticated = 'unauthenticated',\n  /** 403 Forbidden */\n  PermissionDenied = 'permission_denied',\n  /** 404 Not Found. Some requested entity (file or directory) was not found. */\n  NotFound = 'not_found',\n  /** 429 Too Many Requests */\n  ResourceExhausted = 'resource_exhausted',\n  /** Client specified an invalid argument. 4xx. */\n  InvalidArgument = 'invalid_argument',\n  /** 501 Not Implemented */\n  Unimplemented = 'unimplemented',\n  /** 503 Service Unavailable */\n  Unavailable = 'unavailable',\n  /** Other/generic 5xx. */\n  InternalError = 'internal_error',\n  /** Unknown. Any non-standard HTTP status code. */\n  UnknownError = 'unknown_error',\n  /** The operation was cancelled (typically by the user). */\n  Cancelled = 'cancelled',\n  /** Already exists (409) */\n  AlreadyExists = 'already_exists',\n  /** Operation was rejected because the system is not in a state required for the operation's */\n  FailedPrecondition = 'failed_precondition',\n  /** The operation was aborted, typically due to a concurrency issue. */\n  Aborted = 'aborted',\n  /** Operation was attempted past the valid range. */\n  OutOfRange = 'out_of_range',\n  /** Unrecoverable data loss or corruption */\n  DataLoss = 'data_loss',\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace, import/export\nexport namespace SpanStatus {\n  /**\n   * Converts a HTTP status code into a {@link SpanStatus}.\n   *\n   * @param httpStatus The HTTP response status code.\n   * @returns The span status or {@link SpanStatus.UnknownError}.\n   */\n  export function fromHttpCode(httpStatus: number): SpanStatus {\n    if (httpStatus < 400) {\n      return SpanStatus.Ok;\n    }\n\n    if (httpStatus >= 400 && httpStatus < 500) {\n      switch (httpStatus) {\n        case 401:\n          return SpanStatus.Unauthenticated;\n        case 403:\n          return SpanStatus.PermissionDenied;\n        case 404:\n          return SpanStatus.NotFound;\n        case 409:\n          return SpanStatus.AlreadyExists;\n        case 413:\n          return SpanStatus.FailedPrecondition;\n        case 429:\n          return SpanStatus.ResourceExhausted;\n        default:\n          return SpanStatus.InvalidArgument;\n      }\n    }\n\n    if (httpStatus >= 500 && httpStatus < 600) {\n      switch (httpStatus) {\n        case 501:\n          return SpanStatus.Unimplemented;\n        case 503:\n          return SpanStatus.Unavailable;\n        case 504:\n          return SpanStatus.DeadlineExceeded;\n        default:\n          return SpanStatus.InternalError;\n      }\n    }\n\n    return SpanStatus.UnknownError;\n  }\n}\n","import { getCurrentHub, Hub } from '@sentry/hub';\nimport { Options, TraceparentData, Transaction } from '@sentry/types';\n\nexport const TRACEPARENT_REGEXP = new RegExp(\n  '^[ \\\\t]*' + // whitespace\n  '([0-9a-f]{32})?' + // trace_id\n  '-?([0-9a-f]{16})?' + // span_id\n  '-?([01])?' + // sampled\n    '[ \\\\t]*$', // whitespace\n);\n\n/**\n * Determines if tracing is currently enabled.\n *\n * Tracing is enabled when at least one of `tracesSampleRate` and `tracesSampler` is defined in the SDK config.\n */\nexport function hasTracingEnabled(options: Options): boolean {\n  return 'tracesSampleRate' in options || 'tracesSampler' in options;\n}\n\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\nexport function extractTraceparentData(traceparent: string): TraceparentData | undefined {\n  const matches = traceparent.match(TRACEPARENT_REGEXP);\n  if (matches) {\n    let parentSampled: boolean | undefined;\n    if (matches[3] === '1') {\n      parentSampled = true;\n    } else if (matches[3] === '0') {\n      parentSampled = false;\n    }\n    return {\n      traceId: matches[1],\n      parentSampled,\n      parentSpanId: matches[2],\n    };\n  }\n  return undefined;\n}\n\n/** Grabs active transaction off scope, if any */\nexport function getActiveTransaction<T extends Transaction>(hub: Hub = getCurrentHub()): T | undefined {\n  return hub?.getScope()?.getTransaction() as T | undefined;\n}\n\n/**\n * Converts from milliseconds to seconds\n * @param time time in ms\n */\nexport function msToSec(time: number): number {\n  return time / 1000;\n}\n\n/**\n * Converts from seconds to milliseconds\n * @param time time in seconds\n */\nexport function secToMs(time: number): number {\n  return time * 1000;\n}\n\n// so it can be used in manual instrumentation without necessitating a hard dependency on @sentry/utils\nexport { stripUrlQueryAndFragment } from '@sentry/utils';\n","import { addInstrumentationHandler, logger } from '@sentry/utils';\n\nimport { SpanStatus } from './spanstatus';\nimport { getActiveTransaction } from './utils';\n\n/**\n * Configures global error listeners\n */\nexport function registerErrorInstrumentation(): void {\n  addInstrumentationHandler({\n    callback: errorCallback,\n    type: 'error',\n  });\n  addInstrumentationHandler({\n    callback: errorCallback,\n    type: 'unhandledrejection',\n  });\n}\n\n/**\n * If an error or unhandled promise occurs, we mark the active transaction as failed\n */\nfunction errorCallback(): void {\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    logger.log(`[Tracing] Transaction: ${SpanStatus.InternalError} -> Global error occured`);\n    activeTransaction.setStatus(SpanStatus.InternalError);\n  }\n}\n","/* eslint-disable max-lines */\nimport { Span as SpanInterface, SpanContext, Transaction } from '@sentry/types';\nimport { dropUndefinedKeys, timestampWithMs, uuid4 } from '@sentry/utils';\n\nimport { SpanStatus } from './spanstatus';\n\n/**\n * Keeps track of finished spans for a given transaction\n * @internal\n * @hideconstructor\n * @hidden\n */\nexport class SpanRecorder {\n  public spans: Span[] = [];\n\n  private readonly _maxlen: number;\n\n  public constructor(maxlen: number = 1000) {\n    this._maxlen = maxlen;\n  }\n\n  /**\n   * This is just so that we don't run out of memory while recording a lot\n   * of spans. At some point we just stop and flush out the start of the\n   * trace tree (i.e.the first n spans with the smallest\n   * start_timestamp).\n   */\n  public add(span: Span): void {\n    if (this.spans.length > this._maxlen) {\n      span.spanRecorder = undefined;\n    } else {\n      this.spans.push(span);\n    }\n  }\n}\n\n/**\n * Span contains all data about a span\n */\nexport class Span implements SpanInterface {\n  /**\n   * @inheritDoc\n   */\n  public traceId: string = uuid4();\n\n  /**\n   * @inheritDoc\n   */\n  public spanId: string = uuid4().substring(16);\n\n  /**\n   * @inheritDoc\n   */\n  public parentSpanId?: string;\n\n  /**\n   * Internal keeper of the status\n   */\n  public status?: SpanStatus | string;\n\n  /**\n   * @inheritDoc\n   */\n  public sampled?: boolean;\n\n  /**\n   * Timestamp in seconds when the span was created.\n   */\n  public startTimestamp: number = timestampWithMs();\n\n  /**\n   * Timestamp in seconds when the span ended.\n   */\n  public endTimestamp?: number;\n\n  /**\n   * @inheritDoc\n   */\n  public op?: string;\n\n  /**\n   * @inheritDoc\n   */\n  public description?: string;\n\n  /**\n   * @inheritDoc\n   */\n  public tags: { [key: string]: string } = {};\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public data: { [key: string]: any } = {};\n\n  /**\n   * List of spans that were finalized\n   */\n  public spanRecorder?: SpanRecorder;\n\n  /**\n   * @inheritDoc\n   */\n  public transaction?: Transaction;\n\n  /**\n   * You should never call the constructor manually, always use `hub.startSpan()`.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  public constructor(spanContext?: SpanContext) {\n    if (!spanContext) {\n      return this;\n    }\n    if (spanContext.traceId) {\n      this.traceId = spanContext.traceId;\n    }\n    if (spanContext.spanId) {\n      this.spanId = spanContext.spanId;\n    }\n    if (spanContext.parentSpanId) {\n      this.parentSpanId = spanContext.parentSpanId;\n    }\n    // We want to include booleans as well here\n    if ('sampled' in spanContext) {\n      this.sampled = spanContext.sampled;\n    }\n    if (spanContext.op) {\n      this.op = spanContext.op;\n    }\n    if (spanContext.description) {\n      this.description = spanContext.description;\n    }\n    if (spanContext.data) {\n      this.data = spanContext.data;\n    }\n    if (spanContext.tags) {\n      this.tags = spanContext.tags;\n    }\n    if (spanContext.status) {\n      this.status = spanContext.status;\n    }\n    if (spanContext.startTimestamp) {\n      this.startTimestamp = spanContext.startTimestamp;\n    }\n    if (spanContext.endTimestamp) {\n      this.endTimestamp = spanContext.endTimestamp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated\n   */\n  public child(\n    spanContext?: Pick<SpanContext, Exclude<keyof SpanContext, 'spanId' | 'sampled' | 'traceId' | 'parentSpanId'>>,\n  ): Span {\n    return this.startChild(spanContext);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startChild(\n    spanContext?: Pick<SpanContext, Exclude<keyof SpanContext, 'spanId' | 'sampled' | 'traceId' | 'parentSpanId'>>,\n  ): Span {\n    const childSpan = new Span({\n      ...spanContext,\n      parentSpanId: this.spanId,\n      sampled: this.sampled,\n      traceId: this.traceId,\n    });\n\n    childSpan.spanRecorder = this.spanRecorder;\n    if (childSpan.spanRecorder) {\n      childSpan.spanRecorder.add(childSpan);\n    }\n\n    childSpan.transaction = this.transaction;\n\n    return childSpan;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: string): this {\n    this.tags = { ...this.tags, [key]: value };\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public setData(key: string, value: any): this {\n    this.data = { ...this.data, [key]: value };\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setStatus(value: SpanStatus): this {\n    this.status = value;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setHttpStatus(httpStatus: number): this {\n    this.setTag('http.status_code', String(httpStatus));\n    const spanStatus = SpanStatus.fromHttpCode(httpStatus);\n    if (spanStatus !== SpanStatus.UnknownError) {\n      this.setStatus(spanStatus);\n    }\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public isSuccess(): boolean {\n    return this.status === SpanStatus.Ok;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public finish(endTimestamp?: number): void {\n    this.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : timestampWithMs();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toTraceparent(): string {\n    let sampledString = '';\n    if (this.sampled !== undefined) {\n      sampledString = this.sampled ? '-1' : '-0';\n    }\n    return `${this.traceId}-${this.spanId}${sampledString}`;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTraceContext(): {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data?: { [key: string]: any };\n    description?: string;\n    op?: string;\n    parent_span_id?: string;\n    span_id: string;\n    status?: string;\n    tags?: { [key: string]: string };\n    trace_id: string;\n  } {\n    return dropUndefinedKeys({\n      data: Object.keys(this.data).length > 0 ? this.data : undefined,\n      description: this.description,\n      op: this.op,\n      parent_span_id: this.parentSpanId,\n      span_id: this.spanId,\n      status: this.status,\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      trace_id: this.traceId,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toJSON(): {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data?: { [key: string]: any };\n    description?: string;\n    op?: string;\n    parent_span_id?: string;\n    span_id: string;\n    start_timestamp: number;\n    status?: string;\n    tags?: { [key: string]: string };\n    timestamp?: number;\n    trace_id: string;\n  } {\n    return dropUndefinedKeys({\n      data: Object.keys(this.data).length > 0 ? this.data : undefined,\n      description: this.description,\n      op: this.op,\n      parent_span_id: this.parentSpanId,\n      span_id: this.spanId,\n      start_timestamp: this.startTimestamp,\n      status: this.status,\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      timestamp: this.endTimestamp,\n      trace_id: this.traceId,\n    });\n  }\n}\n","import { getCurrentHub, Hub } from '@sentry/hub';\nimport { Transaction as TransactionInterface, TransactionContext } from '@sentry/types';\nimport { isInstanceOf, logger } from '@sentry/utils';\n\nimport { Span as SpanClass, SpanRecorder } from './span';\n\n/** JSDoc */\nexport class Transaction extends SpanClass implements TransactionInterface {\n  public name: string;\n\n  /**\n   * The reference to the current hub.\n   */\n  private readonly _hub: Hub = (getCurrentHub() as unknown) as Hub;\n\n  private readonly _trimEnd?: boolean;\n\n  /**\n   * This constructor should never be called manually. Those instrumenting tracing should use\n   * `Sentry.startTransaction()`, and internal methods should use `hub.startTransaction()`.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  public constructor(transactionContext: TransactionContext, hub?: Hub) {\n    super(transactionContext);\n\n    if (isInstanceOf(hub, Hub)) {\n      this._hub = hub as Hub;\n    }\n\n    this.name = transactionContext.name ? transactionContext.name : '';\n\n    this._trimEnd = transactionContext.trimEnd;\n\n    // this is because transactions are also spans, and spans have a transaction pointer\n    this.transaction = this;\n  }\n\n  /**\n   * JSDoc\n   */\n  public setName(name: string): void {\n    this.name = name;\n  }\n\n  /**\n   * Attaches SpanRecorder to the span itself\n   * @param maxlen maximum number of spans that can be recorded\n   */\n  public initSpanRecorder(maxlen: number = 1000): void {\n    if (!this.spanRecorder) {\n      this.spanRecorder = new SpanRecorder(maxlen);\n    }\n    this.spanRecorder.add(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public finish(endTimestamp?: number): string | undefined {\n    // This transaction is already finished, so we should not flush it again.\n    if (this.endTimestamp !== undefined) {\n      return undefined;\n    }\n\n    if (!this.name) {\n      logger.warn('Transaction has no name, falling back to `<unlabeled transaction>`.');\n      this.name = '<unlabeled transaction>';\n    }\n\n    // just sets the end timestamp\n    super.finish(endTimestamp);\n\n    if (this.sampled !== true) {\n      // At this point if `sampled !== true` we want to discard the transaction.\n      logger.log('[Tracing] Discarding transaction because its trace was not chosen to be sampled.');\n      return undefined;\n    }\n\n    const finishedSpans = this.spanRecorder ? this.spanRecorder.spans.filter(s => s !== this && s.endTimestamp) : [];\n\n    if (this._trimEnd && finishedSpans.length > 0) {\n      this.endTimestamp = finishedSpans.reduce((prev: SpanClass, current: SpanClass) => {\n        if (prev.endTimestamp && current.endTimestamp) {\n          return prev.endTimestamp > current.endTimestamp ? prev : current;\n        }\n        return prev;\n      }).endTimestamp;\n    }\n\n    return this._hub.captureEvent({\n      contexts: {\n        trace: this.getTraceContext(),\n      },\n      spans: finishedSpans,\n      start_timestamp: this.startTimestamp,\n      tags: this.tags,\n      timestamp: this.endTimestamp,\n      transaction: this.name,\n      type: 'transaction',\n    });\n  }\n}\n","import { Hub } from '@sentry/hub';\nimport { TransactionContext } from '@sentry/types';\nimport { logger, timestampWithMs } from '@sentry/utils';\n\nimport { Span, SpanRecorder } from './span';\nimport { SpanStatus } from './spanstatus';\nimport { Transaction } from './transaction';\n\nexport const DEFAULT_IDLE_TIMEOUT = 1000;\n\n/**\n * @inheritDoc\n */\nexport class IdleTransactionSpanRecorder extends SpanRecorder {\n  public constructor(\n    private readonly _pushActivity: (id: string) => void,\n    private readonly _popActivity: (id: string) => void,\n    public transactionSpanId: string = '',\n    maxlen?: number,\n  ) {\n    super(maxlen);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public add(span: Span): void {\n    // We should make sure we do not push and pop activities for\n    // the transaction that this span recorder belongs to.\n    if (span.spanId !== this.transactionSpanId) {\n      // We patch span.finish() to pop an activity after setting an endTimestamp.\n      span.finish = (endTimestamp?: number) => {\n        span.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : timestampWithMs();\n        this._popActivity(span.spanId);\n      };\n\n      // We should only push new activities if the span does not have an end timestamp.\n      if (span.endTimestamp === undefined) {\n        this._pushActivity(span.spanId);\n      }\n    }\n\n    super.add(span);\n  }\n}\n\nexport type BeforeFinishCallback = (transactionSpan: IdleTransaction, endTimestamp: number) => void;\n\n/**\n * An IdleTransaction is a transaction that automatically finishes. It does this by tracking child spans as activities.\n * You can have multiple IdleTransactions active, but if the `onScope` option is specified, the idle transaction will\n * put itself on the scope on creation.\n */\nexport class IdleTransaction extends Transaction {\n  // Activities store a list of active spans\n  public activities: Record<string, boolean> = {};\n\n  // Stores reference to the timeout that calls _beat().\n  private _heartbeatTimer: number = 0;\n\n  // Track state of activities in previous heartbeat\n  private _prevHeartbeatString: string | undefined;\n\n  // Amount of times heartbeat has counted. Will cause transaction to finish after 3 beats.\n  private _heartbeatCounter: number = 0;\n\n  // We should not use heartbeat if we finished a transaction\n  private _finished: boolean = false;\n\n  private readonly _beforeFinishCallbacks: BeforeFinishCallback[] = [];\n\n  // If a transaction is created and no activities are added, we want to make sure that\n  // it times out properly. This is cleared and not used when activities are added.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _initTimeout: any;\n\n  public constructor(\n    transactionContext: TransactionContext,\n    private readonly _idleHub?: Hub,\n    // The time to wait in ms until the idle transaction will be finished. Default: 1000\n    private readonly _idleTimeout: number = DEFAULT_IDLE_TIMEOUT,\n    // If an idle transaction should be put itself on and off the scope automatically.\n    private readonly _onScope: boolean = false,\n  ) {\n    super(transactionContext, _idleHub);\n\n    if (_idleHub && _onScope) {\n      // There should only be one active transaction on the scope\n      clearActiveTransaction(_idleHub);\n\n      // We set the transaction here on the scope so error events pick up the trace\n      // context and attach it to the error.\n      logger.log(`Setting idle transaction on scope. Span ID: ${this.spanId}`);\n      _idleHub.configureScope(scope => scope.setSpan(this));\n    }\n  }\n\n  /** {@inheritDoc} */\n  public finish(endTimestamp: number = timestampWithMs()): string | undefined {\n    this._finished = true;\n    this.activities = {};\n\n    if (this.spanRecorder) {\n      logger.log('[Tracing] finishing IdleTransaction', new Date(endTimestamp * 1000).toISOString(), this.op);\n\n      for (const callback of this._beforeFinishCallbacks) {\n        callback(this, endTimestamp);\n      }\n\n      this.spanRecorder.spans = this.spanRecorder.spans.filter((span: Span) => {\n        // If we are dealing with the transaction itself, we just return it\n        if (span.spanId === this.spanId) {\n          return true;\n        }\n\n        // We cancel all pending spans with status \"cancelled\" to indicate the idle transaction was finished early\n        if (!span.endTimestamp) {\n          span.endTimestamp = endTimestamp;\n          span.setStatus(SpanStatus.Cancelled);\n          logger.log('[Tracing] cancelling span since transaction ended early', JSON.stringify(span, undefined, 2));\n        }\n\n        const keepSpan = span.startTimestamp < endTimestamp;\n        if (!keepSpan) {\n          logger.log(\n            '[Tracing] discarding Span since it happened after Transaction was finished',\n            JSON.stringify(span, undefined, 2),\n          );\n        }\n        return keepSpan;\n      });\n\n      // this._onScope is true if the transaction was previously on the scope.\n      if (this._onScope) {\n        clearActiveTransaction(this._idleHub);\n      }\n\n      logger.log('[Tracing] flushing IdleTransaction');\n    } else {\n      logger.log('[Tracing] No active IdleTransaction');\n    }\n\n    return super.finish(endTimestamp);\n  }\n\n  /**\n   * Register a callback function that gets excecuted before the transaction finishes.\n   * Useful for cleanup or if you want to add any additional spans based on current context.\n   *\n   * This is exposed because users have no other way of running something before an idle transaction\n   * finishes.\n   */\n  public registerBeforeFinishCallback(callback: BeforeFinishCallback): void {\n    this._beforeFinishCallbacks.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public initSpanRecorder(maxlen?: number): void {\n    if (!this.spanRecorder) {\n      this._initTimeout = setTimeout(() => {\n        if (!this._finished) {\n          this.finish();\n        }\n      }, this._idleTimeout);\n\n      const pushActivity = (id: string): void => {\n        if (this._finished) {\n          return;\n        }\n        this._pushActivity(id);\n      };\n      const popActivity = (id: string): void => {\n        if (this._finished) {\n          return;\n        }\n        this._popActivity(id);\n      };\n\n      this.spanRecorder = new IdleTransactionSpanRecorder(pushActivity, popActivity, this.spanId, maxlen);\n\n      // Start heartbeat so that transactions do not run forever.\n      logger.log('Starting heartbeat');\n      this._pingHeartbeat();\n    }\n    this.spanRecorder.add(this);\n  }\n\n  /**\n   * Start tracking a specific activity.\n   * @param spanId The span id that represents the activity\n   */\n  private _pushActivity(spanId: string): void {\n    if (this._initTimeout) {\n      clearTimeout(this._initTimeout);\n      this._initTimeout = undefined;\n    }\n    logger.log(`[Tracing] pushActivity: ${spanId}`);\n    this.activities[spanId] = true;\n    logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n  }\n\n  /**\n   * Remove an activity from usage\n   * @param spanId The span id that represents the activity\n   */\n  private _popActivity(spanId: string): void {\n    if (this.activities[spanId]) {\n      logger.log(`[Tracing] popActivity ${spanId}`);\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this.activities[spanId];\n      logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n    }\n\n    if (Object.keys(this.activities).length === 0) {\n      const timeout = this._idleTimeout;\n      // We need to add the timeout here to have the real endtimestamp of the transaction\n      // Remember timestampWithMs is in seconds, timeout is in ms\n      const end = timestampWithMs() + timeout / 1000;\n\n      setTimeout(() => {\n        if (!this._finished) {\n          this.finish(end);\n        }\n      }, timeout);\n    }\n  }\n\n  /**\n   * Checks when entries of this.activities are not changing for 3 beats.\n   * If this occurs we finish the transaction.\n   */\n  private _beat(): void {\n    clearTimeout(this._heartbeatTimer);\n    // We should not be running heartbeat if the idle transaction is finished.\n    if (this._finished) {\n      return;\n    }\n\n    const keys = Object.keys(this.activities);\n    const heartbeatString = keys.length ? keys.reduce((prev: string, current: string) => prev + current) : '';\n\n    if (heartbeatString === this._prevHeartbeatString) {\n      this._heartbeatCounter += 1;\n    } else {\n      this._heartbeatCounter = 1;\n    }\n\n    this._prevHeartbeatString = heartbeatString;\n\n    if (this._heartbeatCounter >= 3) {\n      logger.log(`[Tracing] Transaction finished because of no change for 3 heart beats`);\n      this.setStatus(SpanStatus.DeadlineExceeded);\n      this.setTag('heartbeat', 'failed');\n      this.finish();\n    } else {\n      this._pingHeartbeat();\n    }\n  }\n\n  /**\n   * Pings the heartbeat\n   */\n  private _pingHeartbeat(): void {\n    logger.log(`pinging Heartbeat -> current counter: ${this._heartbeatCounter}`);\n    this._heartbeatTimer = (setTimeout(() => {\n      this._beat();\n    }, 5000) as unknown) as number;\n  }\n}\n\n/**\n * Reset active transaction on scope\n */\nfunction clearActiveTransaction(hub?: Hub): void {\n  if (hub) {\n    const scope = hub.getScope();\n    if (scope) {\n      const transaction = scope.getTransaction();\n      if (transaction) {\n        scope.setSpan(undefined);\n      }\n    }\n  }\n}\n","import { getActiveDomain, getMainCarrier, Hub } from '@sentry/hub';\nimport { CustomSamplingContext, SamplingContext, TransactionContext } from '@sentry/types';\nimport {\n  dynamicRequire,\n  extractNodeRequestData,\n  getGlobalObject,\n  isInstanceOf,\n  isNodeEnv,\n  logger,\n} from '@sentry/utils';\n\nimport { registerErrorInstrumentation } from './errors';\nimport { IdleTransaction } from './idletransaction';\nimport { Transaction } from './transaction';\nimport { hasTracingEnabled } from './utils';\n\n/** Returns all trace headers that are currently on the top scope. */\nfunction traceHeaders(this: Hub): { [key: string]: string } {\n  const scope = this.getScope();\n  if (scope) {\n    const span = scope.getSpan();\n    if (span) {\n      return {\n        'sentry-trace': span.toTraceparent(),\n      };\n    }\n  }\n  return {};\n}\n\n/**\n * Implements sampling inheritance and falls back to user-provided static rate if no parent decision is available.\n *\n * @param parentSampled: The parent transaction's sampling decision, if any.\n * @param givenRate: The rate to use if no parental decision is available.\n *\n * @returns The parent's sampling decision (if one exists), or the provided static rate\n */\nfunction _inheritOrUseGivenRate(parentSampled: boolean | undefined, givenRate: unknown): boolean | unknown {\n  return parentSampled !== undefined ? parentSampled : givenRate;\n}\n\n/**\n * Makes a sampling decision for the given transaction and stores it on the transaction.\n *\n * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n *\n * @param hub: The hub off of which to read config options\n * @param transaction: The transaction needing a sampling decision\n * @param samplingContext: Default and user-provided data which may be used to help make the decision\n *\n * @returns The given transaction with its `sampled` value set\n */\nfunction sample<T extends Transaction>(hub: Hub, transaction: T, samplingContext: SamplingContext): T {\n  const client = hub.getClient();\n  const options = (client && client.getOptions()) || {};\n\n  // nothing to do if there's no client or if tracing is disabled\n  if (!client || !hasTracingEnabled(options)) {\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the user has forced a sampling decision by passing a `sampled` value in their transaction context, go with that\n  if (transaction.sampled !== undefined) {\n    return transaction;\n  }\n\n  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` were defined, so one of these should\n  // work; prefer the hook if so\n  const sampleRate =\n    typeof options.tracesSampler === 'function'\n      ? options.tracesSampler(samplingContext)\n      : _inheritOrUseGivenRate(samplingContext.parentSampled, options.tracesSampleRate);\n\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The\n  // only valid values are booleans or numbers between 0 and 1.)\n  if (!isValidSampleRate(sampleRate)) {\n    logger.warn(`[Tracing] Discarding transaction because of invalid sample rate.`);\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n  if (!sampleRate) {\n    logger.log(\n      `[Tracing] Discarding transaction because ${\n        typeof options.tracesSampler === 'function'\n          ? 'tracesSampler returned 0 or false'\n          : 'tracesSampleRate is set to 0'\n      }`,\n    );\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n  transaction.sampled = Math.random() < (sampleRate as number | boolean);\n\n  // if we're not going to keep it, we're done\n  if (!transaction.sampled) {\n    logger.log(\n      `[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(\n        sampleRate,\n      )})`,\n    );\n    return transaction;\n  }\n\n  // at this point we know we're keeping the transaction, whether because of an inherited decision or because it got\n  // lucky with the dice roll\n  transaction.initSpanRecorder(options._experiments?.maxSpans as number);\n\n  logger.log(`[Tracing] starting ${transaction.op} transaction - ${transaction.name}`);\n  return transaction;\n}\n/**\n * Gets the correct context to pass to the tracesSampler, based on the environment (i.e., which SDK is being used)\n *\n * @returns The default sample context\n */\nfunction getDefaultSamplingContext(transactionContext: TransactionContext): SamplingContext {\n  // promote parent sampling decision (if any) for easy access\n  const { parentSampled } = transactionContext;\n  const defaultSamplingContext: SamplingContext = { transactionContext, parentSampled };\n\n  if (isNodeEnv()) {\n    const domain = getActiveDomain();\n\n    if (domain) {\n      // for all node servers that we currently support, we store the incoming request object (which is an instance of\n      // http.IncomingMessage) on the domain\n\n      // the domain members are stored as an array, so our only way to find the request is to iterate through the array\n      // and compare types\n\n      const nodeHttpModule = dynamicRequire(module, 'http');\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      const requestType = nodeHttpModule.IncomingMessage;\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const request = domain.members.find((member: any) => isInstanceOf(member, requestType));\n\n      if (request) {\n        defaultSamplingContext.request = extractNodeRequestData(request);\n      }\n    }\n  }\n\n  // we must be in browser-js (or some derivative thereof)\n  else {\n    // we use `getGlobalObject()` rather than `window` since service workers also have a `location` property on `self`\n    const globalObject = getGlobalObject<WindowOrWorkerGlobalScope>();\n\n    if ('location' in globalObject) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n      defaultSamplingContext.location = { ...(globalObject as any).location };\n    }\n  }\n\n  return defaultSamplingContext;\n}\n\n/**\n * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).\n */\nfunction isValidSampleRate(rate: unknown): boolean {\n  // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (isNaN(rate as any) || !(typeof rate === 'number' || typeof rate === 'boolean')) {\n    logger.warn(\n      `[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(\n        rate,\n      )} of type ${JSON.stringify(typeof rate)}.`,\n    );\n    return false;\n  }\n\n  // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false\n  if (rate < 0 || rate > 1) {\n    logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got ${rate}.`);\n    return false;\n  }\n  return true;\n}\n\n/**\n * Creates a new transaction and adds a sampling decision if it doesn't yet have one.\n *\n * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if\n * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an\n * \"extension method.\"\n *\n * @param this: The Hub starting the transaction\n * @param transactionContext: Data used to configure the transaction\n * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)\n *\n * @returns The new transaction\n *\n * @see {@link Hub.startTransaction}\n */\nfunction _startTransaction(\n  this: Hub,\n  transactionContext: TransactionContext,\n  customSamplingContext?: CustomSamplingContext,\n): Transaction {\n  const transaction = new Transaction(transactionContext, this);\n  return sample(this, transaction, {\n    ...getDefaultSamplingContext(transactionContext),\n    ...customSamplingContext,\n  });\n}\n\n/**\n * Create new idle transaction.\n */\nexport function startIdleTransaction(\n  hub: Hub,\n  transactionContext: TransactionContext,\n  idleTimeout?: number,\n  onScope?: boolean,\n): IdleTransaction {\n  const transaction = new IdleTransaction(transactionContext, hub, idleTimeout, onScope);\n  return sample(hub, transaction, getDefaultSamplingContext(transactionContext));\n}\n\n/**\n * @private\n */\nexport function _addTracingExtensions(): void {\n  const carrier = getMainCarrier();\n  if (carrier.__SENTRY__) {\n    carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n    if (!carrier.__SENTRY__.extensions.startTransaction) {\n      carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n    }\n    if (!carrier.__SENTRY__.extensions.traceHeaders) {\n      carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;\n    }\n  }\n}\n\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\nexport function addExtensionMethods(): void {\n  _addTracingExtensions();\n\n  // If an error happens globally, we should make sure transaction status is set to error.\n  registerErrorInstrumentation();\n}\n","import { getGlobalObject, logger } from '@sentry/utils';\n\nimport { IdleTransaction } from '../idletransaction';\nimport { SpanStatus } from '../spanstatus';\nimport { getActiveTransaction } from '../utils';\n\nconst global = getGlobalObject<Window>();\n\n/**\n * Add a listener that cancels and finishes a transaction when the global\n * document is hidden.\n */\nexport function registerBackgroundTabDetection(): void {\n  if (global && global.document) {\n    global.document.addEventListener('visibilitychange', () => {\n      const activeTransaction = getActiveTransaction() as IdleTransaction;\n      if (global.document.hidden && activeTransaction) {\n        logger.log(\n          `[Tracing] Transaction: ${SpanStatus.Cancelled} -> since tab moved to the background, op: ${activeTransaction.op}`,\n        );\n        // We should not set status if it is already set, this prevent important statuses like\n        // error or data loss from being overwritten on transaction.\n        if (!activeTransaction.status) {\n          activeTransaction.setStatus(SpanStatus.Cancelled);\n        }\n        activeTransaction.setTag('visibilitychange', 'document.hidden');\n        activeTransaction.finish();\n      }\n    });\n  } else {\n    logger.warn('[Tracing] Could not set up background tab detection due to lack of global document');\n  }\n}\n","/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { SpanContext } from '@sentry/types';\nimport { browserPerformanceTimeOrigin, getGlobalObject, logger } from '@sentry/utils';\n\nimport { Span } from '../span';\nimport { Transaction } from '../transaction';\nimport { msToSec } from '../utils';\n\nconst global = getGlobalObject<Window>();\n\n/** Class tracking metrics  */\nexport class MetricsInstrumentation {\n  private _lcp: Record<string, any> = {};\n\n  private _performanceCursor: number = 0;\n\n  public constructor() {\n    if (global && global.performance) {\n      if (global.performance.mark) {\n        global.performance.mark('sentry-tracing-init');\n      }\n\n      this._trackLCP();\n    }\n  }\n\n  /** Add performance related spans to a transaction */\n  public addPerformanceEntries(transaction: Transaction): void {\n    if (!global || !global.performance || !global.performance.getEntries || !browserPerformanceTimeOrigin) {\n      // Gatekeeper if performance API not available\n      return;\n    }\n\n    logger.log('[Tracing] Adding & adjusting spans using Performance API');\n\n    // TODO(fixme): depending on the 'op' directly is brittle.\n    if (transaction.op === 'pageload') {\n      // Force any pending records to be dispatched.\n      this._forceLCP();\n      if (this._lcp) {\n        // Set the last observed LCP score.\n        transaction.setData('_sentry_web_vitals', { LCP: this._lcp });\n      }\n    }\n\n    const timeOrigin = msToSec(browserPerformanceTimeOrigin);\n    let entryScriptSrc: string | undefined;\n\n    if (global.document) {\n      // eslint-disable-next-line @typescript-eslint/prefer-for-of\n      for (let i = 0; i < document.scripts.length; i++) {\n        // We go through all scripts on the page and look for 'data-entry'\n        // We remember the name and measure the time between this script finished loading and\n        // our mark 'sentry-tracing-init'\n        if (document.scripts[i].dataset.entry === 'true') {\n          entryScriptSrc = document.scripts[i].src;\n          break;\n        }\n      }\n    }\n\n    let entryScriptStartTimestamp: number | undefined;\n    let tracingInitMarkStartTime: number | undefined;\n\n    global.performance\n      .getEntries()\n      .slice(this._performanceCursor)\n      .forEach((entry: Record<string, any>) => {\n        const startTime = msToSec(entry.startTime as number);\n        const duration = msToSec(entry.duration as number);\n\n        if (transaction.op === 'navigation' && timeOrigin + startTime < transaction.startTimestamp) {\n          return;\n        }\n\n        switch (entry.entryType) {\n          case 'navigation':\n            addNavigationSpans(transaction, entry, timeOrigin);\n            break;\n          case 'mark':\n          case 'paint':\n          case 'measure': {\n            const startTimestamp = addMeasureSpans(transaction, entry, startTime, duration, timeOrigin);\n            if (tracingInitMarkStartTime === undefined && entry.name === 'sentry-tracing-init') {\n              tracingInitMarkStartTime = startTimestamp;\n            }\n            break;\n          }\n          case 'resource': {\n            const resourceName = (entry.name as string).replace(window.location.origin, '');\n            const endTimestamp = addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin);\n            // We remember the entry script end time to calculate the difference to the first init mark\n            if (entryScriptStartTimestamp === undefined && (entryScriptSrc || '').indexOf(resourceName) > -1) {\n              entryScriptStartTimestamp = endTimestamp;\n            }\n            break;\n          }\n          default:\n          // Ignore other entry types.\n        }\n      });\n\n    if (entryScriptStartTimestamp !== undefined && tracingInitMarkStartTime !== undefined) {\n      _startChild(transaction, {\n        description: 'evaluation',\n        endTimestamp: tracingInitMarkStartTime,\n        op: 'script',\n        startTimestamp: entryScriptStartTimestamp,\n      });\n    }\n\n    this._performanceCursor = Math.max(performance.getEntries().length - 1, 0);\n  }\n\n  private _forceLCP: () => void = () => {\n    /* No-op, replaced later if LCP API is available. */\n    return;\n  };\n\n  /** Starts tracking the Largest Contentful Paint on the current page. */\n  private _trackLCP(): void {\n    // Based on reference implementation from https://web.dev/lcp/#measure-lcp-in-javascript.\n    // Use a try/catch instead of feature detecting `largest-contentful-paint`\n    // support, since some browsers throw when using the new `type` option.\n    // https://bugs.webkit.org/show_bug.cgi?id=209216\n    try {\n      // Keep track of whether (and when) the page was first hidden, see:\n      // https://github.com/w3c/page-visibility/issues/29\n      // NOTE: ideally this check would be performed in the document <head>\n      // to avoid cases where the visibility state changes before this code runs.\n      let firstHiddenTime = document.visibilityState === 'hidden' ? 0 : Infinity;\n      document.addEventListener(\n        'visibilitychange',\n        event => {\n          firstHiddenTime = Math.min(firstHiddenTime, event.timeStamp);\n        },\n        { once: true },\n      );\n\n      const updateLCP = (entry: PerformanceEntry): void => {\n        // Only include an LCP entry if the page wasn't hidden prior to\n        // the entry being dispatched. This typically happens when a page is\n        // loaded in a background tab.\n        if (entry.startTime < firstHiddenTime) {\n          // NOTE: the `startTime` value is a getter that returns the entry's\n          // `renderTime` value, if available, or its `loadTime` value otherwise.\n          // The `renderTime` value may not be available if the element is an image\n          // that's loaded cross-origin without the `Timing-Allow-Origin` header.\n          this._lcp = {\n            // @ts-ignore can't access id on entry\n            ...(entry.id && { elementId: entry.id }),\n            // @ts-ignore can't access id on entry\n            ...(entry.size && { elementSize: entry.size }),\n            value: entry.startTime,\n          };\n        }\n      };\n\n      // Create a PerformanceObserver that calls `updateLCP` for each entry.\n      const po = new PerformanceObserver(entryList => {\n        entryList.getEntries().forEach(updateLCP);\n      });\n\n      // Observe entries of type `largest-contentful-paint`, including buffered entries,\n      // i.e. entries that occurred before calling `observe()` below.\n      po.observe({\n        buffered: true,\n        // @ts-ignore type does not exist on obj\n        type: 'largest-contentful-paint',\n      });\n\n      this._forceLCP = () => {\n        if (po.takeRecords) {\n          po.takeRecords().forEach(updateLCP);\n        }\n      };\n    } catch (e) {\n      // Do nothing if the browser doesn't support this API.\n    }\n  }\n}\n\n/** Instrument navigation entries */\nfunction addNavigationSpans(transaction: Transaction, entry: Record<string, any>, timeOrigin: number): void {\n  addPerformanceNavigationTiming(transaction, entry, 'unloadEvent', timeOrigin);\n  addPerformanceNavigationTiming(transaction, entry, 'domContentLoadedEvent', timeOrigin);\n  addPerformanceNavigationTiming(transaction, entry, 'loadEvent', timeOrigin);\n  addPerformanceNavigationTiming(transaction, entry, 'connect', timeOrigin);\n  addPerformanceNavigationTiming(transaction, entry, 'domainLookup', timeOrigin);\n  addRequest(transaction, entry, timeOrigin);\n}\n\n/** Create measure related spans */\nfunction addMeasureSpans(\n  transaction: Transaction,\n  entry: Record<string, any>,\n  startTime: number,\n  duration: number,\n  timeOrigin: number,\n): number {\n  const measureStartTimestamp = timeOrigin + startTime;\n  const measureEndTimestamp = measureStartTimestamp + duration;\n\n  _startChild(transaction, {\n    description: entry.name as string,\n    endTimestamp: measureEndTimestamp,\n    op: entry.entryType as string,\n    startTimestamp: measureStartTimestamp,\n  });\n\n  return measureStartTimestamp;\n}\n\nexport interface ResourceEntry extends Record<string, unknown> {\n  initiatorType?: string;\n  transferSize?: number;\n  encodedBodySize?: number;\n  decodedBodySize?: number;\n}\n\n/** Create resource related spans */\nexport function addResourceSpans(\n  transaction: Transaction,\n  entry: ResourceEntry,\n  resourceName: string,\n  startTime: number,\n  duration: number,\n  timeOrigin: number,\n): number | undefined {\n  // we already instrument based on fetch and xhr, so we don't need to\n  // duplicate spans here.\n  if (entry.initiatorType === 'xmlhttprequest' || entry.initiatorType === 'fetch') {\n    return undefined;\n  }\n\n  const data: Record<string, any> = {};\n  if ('transferSize' in entry) {\n    data['Transfer Size'] = entry.transferSize;\n  }\n  if ('encodedBodySize' in entry) {\n    data['Encoded Body Size'] = entry.encodedBodySize;\n  }\n  if ('decodedBodySize' in entry) {\n    data['Decoded Body Size'] = entry.decodedBodySize;\n  }\n\n  const startTimestamp = timeOrigin + startTime;\n  const endTimestamp = startTimestamp + duration;\n\n  _startChild(transaction, {\n    description: resourceName,\n    endTimestamp,\n    op: entry.initiatorType ? `resource.${entry.initiatorType}` : 'resource',\n    startTimestamp,\n    data,\n  });\n\n  return endTimestamp;\n}\n\n/** Create performance navigation related spans */\nfunction addPerformanceNavigationTiming(\n  transaction: Transaction,\n  entry: Record<string, any>,\n  event: string,\n  timeOrigin: number,\n): void {\n  const end = entry[`${event}End`] as number | undefined;\n  const start = entry[`${event}Start`] as number | undefined;\n  if (!start || !end) {\n    return;\n  }\n  _startChild(transaction, {\n    description: event,\n    endTimestamp: timeOrigin + msToSec(end),\n    op: 'browser',\n    startTimestamp: timeOrigin + msToSec(start),\n  });\n}\n\n/** Create request and response related spans */\nfunction addRequest(transaction: Transaction, entry: Record<string, any>, timeOrigin: number): void {\n  _startChild(transaction, {\n    description: 'request',\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd as number),\n    op: 'browser',\n    startTimestamp: timeOrigin + msToSec(entry.requestStart as number),\n  });\n\n  _startChild(transaction, {\n    description: 'response',\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd as number),\n    op: 'browser',\n    startTimestamp: timeOrigin + msToSec(entry.responseStart as number),\n  });\n}\n\n/**\n * Helper function to start child on transactions. This function will make sure that the transaction will\n * use the start timestamp of the created child span if it is earlier than the transactions actual\n * start timestamp.\n */\nexport function _startChild(transaction: Transaction, { startTimestamp, ...ctx }: SpanContext): Span {\n  if (startTimestamp && transaction.startTimestamp > startTimestamp) {\n    transaction.startTimestamp = startTimestamp;\n  }\n\n  return transaction.startChild({\n    startTimestamp,\n    ...ctx,\n  });\n}\n","import { getCurrentHub } from '@sentry/hub';\nimport { addInstrumentationHandler, isInstanceOf, isMatchingPattern } from '@sentry/utils';\n\nimport { Span } from '../span';\nimport { getActiveTransaction, hasTracingEnabled } from '../utils';\n\nexport const DEFAULT_TRACING_ORIGINS = ['localhost', /^\\//];\n\n/** Options for Request Instrumentation */\nexport interface RequestInstrumentationOptions {\n  /**\n   * List of strings / regex where the integration should create Spans out of. Additionally this will be used\n   * to define which outgoing requests the `sentry-trace` header will be attached to.\n   *\n   * Default: ['localhost', /^\\//] {@see DEFAULT_TRACING_ORIGINS}\n   */\n  tracingOrigins: Array<string | RegExp>;\n\n  /**\n   * Flag to disable patching all together for fetch requests.\n   *\n   * Default: true\n   */\n  traceFetch: boolean;\n\n  /**\n   * Flag to disable patching all together for xhr requests.\n   *\n   * Default: true\n   */\n  traceXHR: boolean;\n\n  /**\n   * This function will be called before creating a span for a request with the given url.\n   * Return false if you don't want a span for the given url.\n   *\n   * By default it uses the `tracingOrigins` options as a url match.\n   */\n  shouldCreateSpanForRequest?(url: string): boolean;\n}\n\n/** Data returned from fetch callback */\nexport interface FetchData {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  args: any[]; // the arguments passed to the fetch call itself\n  fetchData?: {\n    method: string;\n    url: string;\n    // span_id\n    __span?: string;\n  };\n\n  // TODO Should this be unknown instead? If we vendor types, make it a Response\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  response?: any;\n\n  startTimestamp: number;\n  endTimestamp?: number;\n}\n\n/** Data returned from XHR request */\nexport interface XHRData {\n  xhr?: {\n    __sentry_xhr__?: {\n      method: string;\n      url: string;\n      status_code: number;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      data: Record<string, any>;\n    };\n    __sentry_xhr_span_id__?: string;\n    setRequestHeader?: (key: string, val: string) => void;\n    __sentry_own_request__?: boolean;\n  };\n  startTimestamp: number;\n  endTimestamp?: number;\n}\n\nexport const defaultRequestInstrumentionOptions: RequestInstrumentationOptions = {\n  traceFetch: true,\n  traceXHR: true,\n  tracingOrigins: DEFAULT_TRACING_ORIGINS,\n};\n\n/** Registers span creators for xhr and fetch requests  */\nexport function registerRequestInstrumentation(_options?: Partial<RequestInstrumentationOptions>): void {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  const { traceFetch, traceXHR, tracingOrigins, shouldCreateSpanForRequest } = {\n    ...defaultRequestInstrumentionOptions,\n    ..._options,\n  };\n\n  // We should cache url -> decision so that we don't have to compute\n  // regexp everytime we create a request.\n  const urlMap: Record<string, boolean> = {};\n\n  const defaultShouldCreateSpan = (url: string): boolean => {\n    if (urlMap[url]) {\n      return urlMap[url];\n    }\n    const origins = tracingOrigins;\n    urlMap[url] =\n      origins.some((origin: string | RegExp) => isMatchingPattern(url, origin)) &&\n      !isMatchingPattern(url, 'sentry_key');\n    return urlMap[url];\n  };\n\n  // We want that our users don't have to re-implement shouldCreateSpanForRequest themselves\n  // That's why we filter out already unwanted Spans from tracingOrigins\n  let shouldCreateSpan = defaultShouldCreateSpan;\n  if (typeof shouldCreateSpanForRequest === 'function') {\n    shouldCreateSpan = (url: string) => {\n      return defaultShouldCreateSpan(url) && shouldCreateSpanForRequest(url);\n    };\n  }\n\n  const spans: Record<string, Span> = {};\n\n  if (traceFetch) {\n    addInstrumentationHandler({\n      callback: (handlerData: FetchData) => {\n        fetchCallback(handlerData, shouldCreateSpan, spans);\n      },\n      type: 'fetch',\n    });\n  }\n\n  if (traceXHR) {\n    addInstrumentationHandler({\n      callback: (handlerData: XHRData) => {\n        xhrCallback(handlerData, shouldCreateSpan, spans);\n      },\n      type: 'xhr',\n    });\n  }\n}\n\n/**\n * Create and track fetch request spans\n */\nexport function fetchCallback(\n  handlerData: FetchData,\n  shouldCreateSpan: (url: string) => boolean,\n  spans: Record<string, Span>,\n): void {\n  const currentClientOptions = getCurrentHub()\n    .getClient()\n    ?.getOptions();\n  if (\n    !(currentClientOptions && hasTracingEnabled(currentClientOptions)) ||\n    !(handlerData.fetchData && shouldCreateSpan(handlerData.fetchData.url))\n  ) {\n    return;\n  }\n\n  if (handlerData.endTimestamp && handlerData.fetchData.__span) {\n    const span = spans[handlerData.fetchData.__span];\n    if (span) {\n      const response = handlerData.response;\n      if (response) {\n        // TODO (kmclb) remove this once types PR goes through\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        span.setHttpStatus(response.status);\n      }\n      span.finish();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[handlerData.fetchData.__span];\n    }\n    return;\n  }\n\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    const span = activeTransaction.startChild({\n      data: {\n        ...handlerData.fetchData,\n        type: 'fetch',\n      },\n      description: `${handlerData.fetchData.method} ${handlerData.fetchData.url}`,\n      op: 'http',\n    });\n\n    handlerData.fetchData.__span = span.spanId;\n    spans[span.spanId] = span;\n\n    const request = (handlerData.args[0] = handlerData.args[0] as string | Request);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const options = (handlerData.args[1] = (handlerData.args[1] as { [key: string]: any }) || {});\n    let headers = options.headers;\n    if (isInstanceOf(request, Request)) {\n      headers = (request as Request).headers;\n    }\n    if (headers) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (typeof headers.append === 'function') {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        headers.append('sentry-trace', span.toTraceparent());\n      } else if (Array.isArray(headers)) {\n        headers = [...headers, ['sentry-trace', span.toTraceparent()]];\n      } else {\n        headers = { ...headers, 'sentry-trace': span.toTraceparent() };\n      }\n    } else {\n      headers = { 'sentry-trace': span.toTraceparent() };\n    }\n    options.headers = headers;\n  }\n}\n\n/**\n * Create and track xhr request spans\n */\nexport function xhrCallback(\n  handlerData: XHRData,\n  shouldCreateSpan: (url: string) => boolean,\n  spans: Record<string, Span>,\n): void {\n  const currentClientOptions = getCurrentHub()\n    .getClient()\n    ?.getOptions();\n  if (\n    !(currentClientOptions && hasTracingEnabled(currentClientOptions)) ||\n    !(handlerData.xhr && handlerData.xhr.__sentry_xhr__ && shouldCreateSpan(handlerData.xhr.__sentry_xhr__.url)) ||\n    handlerData.xhr.__sentry_own_request__\n  ) {\n    return;\n  }\n\n  const xhr = handlerData.xhr.__sentry_xhr__;\n\n  // check first if the request has finished and is tracked by an existing span which should now end\n  if (handlerData.endTimestamp && handlerData.xhr.__sentry_xhr_span_id__) {\n    const span = spans[handlerData.xhr.__sentry_xhr_span_id__];\n    if (span) {\n      span.setHttpStatus(xhr.status_code);\n      span.finish();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[handlerData.xhr.__sentry_xhr_span_id__];\n    }\n    return;\n  }\n\n  // if not, create a new span to track it\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    const span = activeTransaction.startChild({\n      data: {\n        ...xhr.data,\n        type: 'xhr',\n        method: xhr.method,\n        url: xhr.url,\n      },\n      description: `${xhr.method} ${xhr.url}`,\n      op: 'http',\n    });\n\n    handlerData.xhr.__sentry_xhr_span_id__ = span.spanId;\n    spans[handlerData.xhr.__sentry_xhr_span_id__] = span;\n\n    if (handlerData.xhr.setRequestHeader) {\n      try {\n        handlerData.xhr.setRequestHeader('sentry-trace', span.toTraceparent());\n      } catch (_) {\n        // Error: InvalidStateError: Failed to execute 'setRequestHeader' on 'XMLHttpRequest': The object's state must be OPENED.\n      }\n    }\n  }\n}\n","import { Transaction as TransactionType, TransactionContext } from '@sentry/types';\nimport { addInstrumentationHandler, getGlobalObject, logger } from '@sentry/utils';\n\nconst global = getGlobalObject<Window>();\n\n/**\n * Default function implementing pageload and navigation transactions\n */\nexport function defaultRoutingInstrumentation<T extends TransactionType>(\n  startTransaction: (context: TransactionContext) => T | undefined,\n  startTransactionOnPageLoad: boolean = true,\n  startTransactionOnLocationChange: boolean = true,\n): void {\n  if (!global || !global.location) {\n    logger.warn('Could not initialize routing instrumentation due to invalid location');\n    return;\n  }\n\n  let startingUrl: string | undefined = global.location.href;\n\n  let activeTransaction: T | undefined;\n  if (startTransactionOnPageLoad) {\n    activeTransaction = startTransaction({ name: global.location.pathname, op: 'pageload' });\n  }\n\n  if (startTransactionOnLocationChange) {\n    addInstrumentationHandler({\n      callback: ({ to, from }: { to: string; from?: string }) => {\n        /**\n         * This early return is there to account for some cases where a navigation transaction starts right after\n         * long-running pageload. We make sure that if `from` is undefined and a valid `startingURL` exists, we don't\n         * create an uneccessary navigation transaction.\n         *\n         * This was hard to duplicate, but this behavior stopped as soon as this fix was applied. This issue might also\n         * only be caused in certain development environments where the usage of a hot module reloader is causing\n         * errors.\n         */\n        if (from === undefined && startingUrl && startingUrl.indexOf(to) !== -1) {\n          startingUrl = undefined;\n          return;\n        }\n\n        if (from !== to) {\n          startingUrl = undefined;\n          if (activeTransaction) {\n            logger.log(`[Tracing] Finishing current transaction with op: ${activeTransaction.op}`);\n            // If there's an open transaction on the scope, we need to finish it before creating an new one.\n            activeTransaction.finish();\n          }\n          activeTransaction = startTransaction({ name: global.location.pathname, op: 'navigation' });\n        }\n      },\n      type: 'history',\n    });\n  }\n}\n","import { Hub } from '@sentry/hub';\nimport { EventProcessor, Integration, Transaction as TransactionType, TransactionContext } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { startIdleTransaction } from '../hubextensions';\nimport { DEFAULT_IDLE_TIMEOUT, IdleTransaction } from '../idletransaction';\nimport { SpanStatus } from '../spanstatus';\nimport { extractTraceparentData, secToMs } from '../utils';\nimport { registerBackgroundTabDetection } from './backgroundtab';\nimport { MetricsInstrumentation } from './metrics';\nimport {\n  defaultRequestInstrumentionOptions,\n  registerRequestInstrumentation,\n  RequestInstrumentationOptions,\n} from './request';\nimport { defaultRoutingInstrumentation } from './router';\n\nexport const DEFAULT_MAX_TRANSACTION_DURATION_SECONDS = 600;\n\n/** Options for Browser Tracing integration */\nexport interface BrowserTracingOptions extends RequestInstrumentationOptions {\n  /**\n   * The time to wait in ms until the transaction will be finished. The transaction will use the end timestamp of\n   * the last finished span as the endtime for the transaction.\n   * Time is in ms.\n   *\n   * Default: 1000\n   */\n  idleTimeout: number;\n\n  /**\n   * Flag to enable/disable creation of `navigation` transaction on history changes.\n   *\n   * Default: true\n   */\n  startTransactionOnLocationChange: boolean;\n\n  /**\n   * Flag to enable/disable creation of `pageload` transaction on first pageload.\n   *\n   * Default: true\n   */\n  startTransactionOnPageLoad: boolean;\n\n  /**\n   * The maximum duration of a transaction before it will be marked as \"deadline_exceeded\".\n   * If you never want to mark a transaction set it to 0.\n   * Time is in seconds.\n   *\n   * Default: 600\n   */\n  maxTransactionDuration: number;\n\n  /**\n   * Flag Transactions where tabs moved to background with \"cancelled\". Browser background tab timing is\n   * not suited towards doing precise measurements of operations. By default, we recommend that this option\n   * be enabled as background transactions can mess up your statistics in nondeterministic ways.\n   *\n   * Default: true\n   */\n  markBackgroundTransactions: boolean;\n\n  /**\n   * beforeNavigate is called before a pageload/navigation transaction is created and allows users to modify transaction\n   * context data, or drop the transaction entirely (by setting `sampled = false` in the context).\n   *\n   * Note: For legacy reasons, transactions can also be dropped by returning `undefined`.\n   *\n   * @param context: The context data which will be passed to `startTransaction` by default\n   *\n   * @returns A (potentially) modified context object, with `sampled = false` if the transaction should be dropped.\n   */\n  beforeNavigate?(context: TransactionContext): TransactionContext | undefined;\n\n  /**\n   * Instrumentation that creates routing change transactions. By default creates\n   * pageload and navigation transactions.\n   */\n  routingInstrumentation<T extends TransactionType>(\n    startTransaction: (context: TransactionContext) => T | undefined,\n    startTransactionOnPageLoad?: boolean,\n    startTransactionOnLocationChange?: boolean,\n  ): void;\n}\n\nconst DEFAULT_BROWSER_TRACING_OPTIONS = {\n  idleTimeout: DEFAULT_IDLE_TIMEOUT,\n  markBackgroundTransactions: true,\n  maxTransactionDuration: DEFAULT_MAX_TRANSACTION_DURATION_SECONDS,\n  routingInstrumentation: defaultRoutingInstrumentation,\n  startTransactionOnLocationChange: true,\n  startTransactionOnPageLoad: true,\n  ...defaultRequestInstrumentionOptions,\n};\n\n/**\n * The Browser Tracing integration automatically instruments browser pageload/navigation\n * actions as transactions, and captures requests, metrics and errors as spans.\n *\n * The integration can be configured with a variety of options, and can be extended to use\n * any routing library. This integration uses {@see IdleTransaction} to create transactions.\n */\nexport class BrowserTracing implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'BrowserTracing';\n\n  /** Browser Tracing integration options */\n  public options: BrowserTracingOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = BrowserTracing.id;\n\n  private _getCurrentHub?: () => Hub;\n\n  private readonly _metrics: MetricsInstrumentation = new MetricsInstrumentation();\n\n  private readonly _emitOptionsWarning: boolean = false;\n\n  public constructor(_options?: Partial<BrowserTracingOptions>) {\n    let tracingOrigins = defaultRequestInstrumentionOptions.tracingOrigins;\n    // NOTE: Logger doesn't work in constructors, as it's initialized after integrations instances\n    if (\n      _options &&\n      _options.tracingOrigins &&\n      Array.isArray(_options.tracingOrigins) &&\n      _options.tracingOrigins.length !== 0\n    ) {\n      tracingOrigins = _options.tracingOrigins;\n    } else {\n      this._emitOptionsWarning = true;\n    }\n\n    this.options = {\n      ...DEFAULT_BROWSER_TRACING_OPTIONS,\n      ..._options,\n      tracingOrigins,\n    };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    this._getCurrentHub = getCurrentHub;\n\n    if (this._emitOptionsWarning) {\n      logger.warn(\n        '[Tracing] You need to define `tracingOrigins` in the options. Set an array of urls or patterns to trace.',\n      );\n      logger.warn(\n        `[Tracing] We added a reasonable default for you: ${defaultRequestInstrumentionOptions.tracingOrigins}`,\n      );\n    }\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const {\n      routingInstrumentation,\n      startTransactionOnLocationChange,\n      startTransactionOnPageLoad,\n      markBackgroundTransactions,\n      traceFetch,\n      traceXHR,\n      tracingOrigins,\n      shouldCreateSpanForRequest,\n    } = this.options;\n\n    routingInstrumentation(\n      (context: TransactionContext) => this._createRouteTransaction(context),\n      startTransactionOnPageLoad,\n      startTransactionOnLocationChange,\n    );\n\n    if (markBackgroundTransactions) {\n      registerBackgroundTabDetection();\n    }\n\n    registerRequestInstrumentation({ traceFetch, traceXHR, tracingOrigins, shouldCreateSpanForRequest });\n  }\n\n  /** Create routing idle transaction. */\n  private _createRouteTransaction(context: TransactionContext): TransactionType | undefined {\n    if (!this._getCurrentHub) {\n      logger.warn(`[Tracing] Did not create ${context.op} transaction because _getCurrentHub is invalid.`);\n      return undefined;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { beforeNavigate, idleTimeout, maxTransactionDuration } = this.options;\n\n    const parentContextFromHeader = context.op === 'pageload' ? getHeaderContext() : undefined;\n\n    const expandedContext = {\n      ...context,\n      ...parentContextFromHeader,\n      trimEnd: true,\n    };\n    const modifiedContext = typeof beforeNavigate === 'function' ? beforeNavigate(expandedContext) : expandedContext;\n\n    // For backwards compatibility reasons, beforeNavigate can return undefined to \"drop\" the transaction (prevent it\n    // from being sent to Sentry).\n    const finalContext = modifiedContext === undefined ? { ...expandedContext, sampled: false } : modifiedContext;\n\n    if (finalContext.sampled === false) {\n      logger.log(`[Tracing] Will not send ${finalContext.op} transaction because of beforeNavigate.`);\n    }\n\n    const hub = this._getCurrentHub();\n    const idleTransaction = startIdleTransaction(hub, finalContext, idleTimeout, true);\n    logger.log(`[Tracing] Starting ${finalContext.op} transaction on scope`);\n    idleTransaction.registerBeforeFinishCallback((transaction, endTimestamp) => {\n      this._metrics.addPerformanceEntries(transaction);\n      adjustTransactionDuration(secToMs(maxTransactionDuration), transaction, endTimestamp);\n    });\n\n    return idleTransaction as TransactionType;\n  }\n}\n\n/**\n * Gets transaction context from a sentry-trace meta.\n *\n * @returns Transaction context data from the header or undefined if there's no header or the header is malformed\n */\nexport function getHeaderContext(): Partial<TransactionContext> | undefined {\n  const header = getMetaContent('sentry-trace');\n  if (header) {\n    return extractTraceparentData(header);\n  }\n\n  return undefined;\n}\n\n/** Returns the value of a meta tag */\nexport function getMetaContent(metaName: string): string | null {\n  const el = document.querySelector(`meta[name=${metaName}]`);\n  return el ? el.getAttribute('content') : null;\n}\n\n/** Adjusts transaction value based on max transaction duration */\nfunction adjustTransactionDuration(maxDuration: number, transaction: IdleTransaction, endTimestamp: number): void {\n  const diff = endTimestamp - transaction.startTimestamp;\n  const isOutdatedTransaction = endTimestamp && (diff > maxDuration || diff < 0);\n  if (isOutdatedTransaction) {\n    transaction.setStatus(SpanStatus.DeadlineExceeded);\n    transaction.setTag('maxTransactionDurationExceeded', 'true');\n  }\n}\n","export {\n  Breadcrumb,\n  Request,\n  SdkInfo,\n  Event,\n  Exception,\n  Response,\n  Severity,\n  StackFrame,\n  Stacktrace,\n  Status,\n  Thread,\n  User,\n} from '@sentry/types';\n\nexport {\n  addGlobalEventProcessor,\n  addBreadcrumb,\n  captureException,\n  captureEvent,\n  captureMessage,\n  configureScope,\n  getHubFromCarrier,\n  getCurrentHub,\n  Hub,\n  Scope,\n  setContext,\n  setExtra,\n  setExtras,\n  setTag,\n  setTags,\n  setUser,\n  startTransaction,\n  Transports,\n  withScope,\n} from '@sentry/browser';\n\nexport { BrowserOptions } from '@sentry/browser';\nexport { BrowserClient, ReportDialogOptions } from '@sentry/browser';\nexport {\n  defaultIntegrations,\n  forceLoad,\n  init,\n  lastEventId,\n  onLoad,\n  showReportDialog,\n  flush,\n  close,\n  wrap,\n} from '@sentry/browser';\nexport { SDK_NAME, SDK_VERSION } from '@sentry/browser';\n\nimport { Integrations as BrowserIntegrations } from '@sentry/browser';\nimport { getGlobalObject } from '@sentry/utils';\n\nimport { BrowserTracing } from './browser';\nimport { addExtensionMethods } from './hubextensions';\n\nexport { Span } from './span';\n\nlet windowIntegrations = {};\n\n// This block is needed to add compatibility with the integrations packages when used with a CDN\nconst _window = getGlobalObject<Window>();\nif (_window.Sentry && _window.Sentry.Integrations) {\n  windowIntegrations = _window.Sentry.Integrations;\n}\n\nconst INTEGRATIONS = {\n  ...windowIntegrations,\n  ...BrowserIntegrations,\n  BrowserTracing,\n};\n\nexport { INTEGRATIONS as Integrations };\n\n// We are patching the global object with our hub extension methods\naddExtensionMethods();\n\nexport { addExtensionMethods };\n","import { getCurrentHub } from '@sentry/hub';\nimport { Client, Options } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\n/** A class object that can instanciate Client objects. */\nexport type ClientClass<F extends Client, O extends Options> = new (options: O) => F;\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instanciate.\n * @param options Options to pass to the client.\n */\nexport function initAndBind<F extends Client, O extends Options>(clientClass: ClientClass<F, O>, options: O): void {\n  if (options.debug === true) {\n    logger.enable();\n  }\n  const hub = getCurrentHub();\n  const client = new clientClass(options);\n  hub.bindClient(client);\n}\n"],"names":["LogLevel","Severity","Status","isError","wat","Object","prototype","toString","call","isInstanceOf","Error","isErrorEvent","isDOMError","isString","isPrimitive","isPlainObject","isEvent","Event","isElement","Element","isThenable","Boolean","then","base","_e","htmlTreeAsString","elem","currentElem","out","height","len","sepLength","length","nextStr","_htmlElementAsString","push","parentNode","reverse","join","_oO","el","className","classes","key","attr","i","tagName","toLowerCase","id","split","allowedAttrs","getAttribute","level","Debug","Info","Warning","Fatal","Critical","Log","code","Success","RateLimit","Invalid","Failed","Unknown","setPrototypeOf","__proto__","Array","obj","proto","prop","hasOwnProperty","message","_super","_this","name","_newTarget","constructor","__extends","DSN_REGEX","from","this","_fromString","_fromComponents","_validate","Dsn","withPassword","_a","host","path","pass","port","projectId","str","match","exec","SentryError","protocol","user","_b","_c","slice","pop","projectMatch","components","forEach","component","ERROR_MESSAGE","isNaN","parseInt","_hasWeakSet","WeakSet","_inner","Memo","has","add","delete","splice","defaultFunctionName","getFunctionName","fn","e","truncate","max","substr","safeJoin","input","delimiter","isArray","output","value","String","isMatchingPattern","pattern","test","indexOf","fill","source","replacement","original","wrapped","defineProperties","__sentry_original__","enumerable","_Oo","getWalkSource","error","err","stack","event_1","type","target","currentTarget","CustomEvent","detail","jsonSize","encodeURI","utf8Length","JSON","stringify","normalizeToSize","object","depth","maxSize","serialized","normalize","normalizeValue","_events","global","window","document","walk","memo","Infinity","normalized","serializeValue","toJSON","acc","memoize","innerKey","unmemoize","parse","extractExceptionKeysForMessage","exception","maxLength","keys","sort","includedKeys","dropUndefinedKeys","val","rv","__values","map","isNodeEnv","process","dynamicRequire","mod","request","require","DEFAULT_REQUEST_KEYS","fallbackGlobalObject","getGlobalObject","self","uuid4","crypto","msCrypto","getRandomValues","arr","Uint16Array","pad","num","v","replace","c","r","Math","random","parseUrl","url","query","fragment","relative","getEventDescription","event","values","event_id","consoleSandbox","callback","originalConsole","console","wrappedLevels","result","addExceptionTypeValue","addExceptionMechanism","mechanism","defaultRetryAfter","parseRetryAfterHeader","now","header","headerDelay","headerDate","Date","PREFIX","_enabled","Logger","_i","args","log","warn","__SENTRY__","logger","supportsFetch","Headers","Request","Response","isNativeFetch","func","supportsReferrerPolicy","referrerPolicy","lastHref","handlers","instrumented","instrument","originalConsoleLevel","triggerHandlers","Function","apply","instrumentConsole","addEventListener","domEventHandler","bind","keypressEventHandler","eventName","options","handleEvent","innerOriginal","__sentry_wrapped__","instrumentDOM","requestKeys","requestValues","xhrproto","XMLHttpRequest","originalOpen","xhr","__sentry_xhr__","method","toUpperCase","__sentry_own_request__","onreadystatechangeHandler","readyState","status_code","status","requestPos","args_1","undefined","body","endTimestamp","startTimestamp","onreadystatechange","readyStateArgs","originalSend","instrumentXHR","fetch","doc","createElement","sandbox","hidden","head","appendChild","contentWindow","removeChild","supportsNativeFetch","originalFetch","handlerData","fetchData","getFetchMethod","getFetchUrl","response","instrumentFetch","chrome","isChromePackagedApp","app","runtime","hasHistoryApi","history","pushState","replaceState","oldOnPopState","onpopstate","historyReplacementFunction","originalHistoryFunction","to","location","href","instrumentHistory","_oldOnErrorHandler","onerror","msg","line","column","arguments","_oldOnUnhandledRejectionHandler","onunhandledrejection","addInstrumentationHandler","handler","data","fetchArgs","keypressTimeout","lastCapturedEvent","debounceDuration","debounceTimer","debounce","clearTimeout","setTimeout","isContentEditable","States","executor","PENDING","_setResult","RESOLVED","reason","REJECTED","state","_state","_resolve","_reject","_value","_executeHandlers","_handlers","concat","cachedHandlers","done","onfulfilled","onrejected","SyncPromise","resolve","_","reject","collection","counter","resolvedCollection","item","index","TypeError","_attachHandler","onfinally","isRejected","_limit","PromiseBuffer","task","isReady","_buffer","remove","timeout","capturedSetTimeout","all","dateTimestampSource","nowSeconds","platformPerformance","module","performance","getNodePerformance","timeOrigin","getBrowserPerformance","timestampSource","dateTimestampInSeconds","timestampWithMs","browserPerformanceTimeOrigin","timing","navigationStart","Scope","scope","newScope","_breadcrumbs","_tags","_extra","_contexts","_user","_level","_span","_transactionName","_fingerprint","_eventProcessors","_scopeListeners","_notifyScopeListeners","tags","extras","extra","fingerprint","setTransactionName","context","span","getSpan","transaction","spanRecorder","spans","captureContext","updatedScope","contexts","breadcrumb","maxBreadcrumbs","mergedBreadcrumb","timestamp","__spread","hint","trace","getTraceContext","_applyFingerprint","breadcrumbs","_notifyEventProcessors","getGlobalEventProcessors","processors","processor","final","_notifyingListeners","globalEventProcessors","addGlobalEventProcessor","API_VERSION","client","_version","_stack","bindClient","Hub","version","getStackTop","setupIntegrations","getStack","parentScope","clone","getClient","pushScope","popScope","eventId","_lastEventId","finalHint","syntheticException","originalException","_invokeClient","top","beforeBreadcrumb","finalBreadcrumb","addBreadcrumb","min","setUser","setTags","setExtras","setTag","setExtra","setContext","oldHub","makeMain","integration","getIntegration","_callExtensionMethod","customSamplingContext","sentry","getMainCarrier","extensions","carrier","hub","registry","getHubFromCarrier","setHubOnCarrier","getCurrentHub","hasHubOnCarrier","isOlderThan","activeDomain","getActiveDomain","registryHubTopStack","getHubFromActiveDomain","domain","active","callOnHub","captureException","withScope","dsn","_dsnObject","API","_getIngestEndpoint","getStoreEndpoint","_encodedAuth","_getEnvelopeEndpoint","clientName","clientVersion","Content-Type","X-Sentry-Auth","dialogOptions","endpoint","getBaseApiEndpoint","encodedOptions","encodeURIComponent","email","auth","sentry_key","sentry_version","installedIntegrations","integrations","defaultIntegrations","userIntegrations","userIntegrationsNames_1","pickedIntegrationsNames_1","defaultIntegration","userIntegration","integrationsNames","getIntegrationsToSetup","setupOnce","setupIntegration","originalFunctionToString","backendClass","_backend","_options","_dsn","BaseClient","_processing","_getBackend","eventFromException","captureEvent","eventFromMessage","_processEvent","finalEvent","_isClientProcessing","clearInterval","interval","getTransport","close","transportFlushed","ready","flush","getOptions","enabled","_isEnabled","_integrations","ticked","setInterval","normalizeDepth","prepared","_applyClientOptions","_applyIntegrationsMetadata","finalScope","update","applyToEvent","evt","_normalizeEvent","b","environment","release","dist","maxValueLength","sdkInfo","sdk","integrationsArray","sendEvent","beforeSend","sampleRate","isTransaction","_prepareEvent","__sentry__","_sendEvent","beforeSendResult","_handleAsyncBeforeSend","processedEvent","NoopTransport","Skipped","_transport","_setupTransport","BaseBackend","_exception","_hint","_message","eventToSentryRequest","api","useEnvelope","req","getEnvelopeEndpointWithUrlEncodedAuth","getStoreEndpointWithUrlEncodedAuth","envelope","sent_at","toISOString","FunctionToString","DEFAULT_IGNORE_ERRORS","InboundFilters","clientOptions","_mergeOptions","_shouldDropEvent","_isSentryError","_isIgnoredError","_isDeniedUrl","_getEventFilterUrl","_isAllowedUrl","ignoreInternal","ignoreErrors","_getPossibleEventMessages","some","denyUrls","allowUrls","whitelistUrls","blacklistUrls","oO","stacktrace","frames_1","frames","filename","frames_2","UNKNOWN_FUNCTION","gecko","winjs","geckoEval","chromeEval","reactMinifiedRegexp","computeStackTrace","ex","popSize","framesToPop","parts","opera10Regex","opera11Regex","lines","element","extractMessage","computeStackTraceFromStacktraceProp","popFrames","submatch","isNative","columnNumber","computeStackTraceFromStackProp","failed","STACKTRACE_LIMIT","exceptionFromStacktrace","prepareFramesForEvent","eventFromStacktrace","localStack","firstFrameFunction","lastFrameFunction","frame","colno","function","in_app","lineno","eventFromUnknownInput","domException","name_1","eventFromString","rejection","__serialized__","eventFromPlainObject","synthetic","attachStacktrace","_api","BaseTransport","drain","FetchTransport","_disabledUntil","Promise","sentryReq","fetchParameters","assign","headers","fromHttpCode","retryAfterHeader","get","catch","XHRTransport","getResponseHeader","open","setRequestHeader","send","BrowserBackend","handled","transportOptions","transport","ignoreOnError","shouldIgnoreOnError","wrap","before","sentryWrapped","wrappedArguments","arg","addEventProcessor","property","defineProperty","getOwnPropertyDescriptor","configurable","injectReportDialog","script","async","src","getReportDialogEndpoint","onLoad","onload","GlobalHandlers","stackTraceLimit","_installGlobalOnErrorHandler","_installGlobalOnUnhandledRejectionHandler","_onErrorHandlerInstalled","currentHub","hasIntegration","isFailedOwnDelivery","_eventFromIncompleteOnError","_enhanceEventWithInitialFrame","_onUnhandledRejectionHandlerInstalled","_eventFromIncompleteRejection","groups","getLocationHref","DEFAULT_EVENT_TARGET","TryCatch","eventTarget","requestAnimationFrame","_wrapTimeFunction","_wrapRAF","_wrapXHR","_wrapEventTarget","originalCallback","wrapOptions","Breadcrumbs","dom","category","_consoleBreadcrumb","_domBreadcrumb","_xhrBreadcrumb","_fetchBreadcrumb","_historyBreadcrumb","fromString","parsedLoc","parsedFrom","parsedTo","DEFAULT_KEY","DEFAULT_LIMIT","LinkedErrors","_key","limit","_handler","linkedErrors","_walkErrorTree","UserAgent","navigator","referrer","userAgent","Referer","User-Agent","SDK_NAME","BrowserClient","getDsn","platform","packages","addSentryBreadcrumb","CoreIntegrations.InboundFilters","CoreIntegrations.FunctionToString","windowIntegrations","_window","Sentry","Integrations","SpanStatus","INTEGRATIONS","CoreIntegrations","BrowserIntegrations","httpStatus","Ok","Unauthenticated","PermissionDenied","NotFound","AlreadyExists","FailedPrecondition","ResourceExhausted","InvalidArgument","Unimplemented","Unavailable","DeadlineExceeded","InternalError","UnknownError","TRACEPARENT_REGEXP","RegExp","hasTracingEnabled","getActiveTransaction","getScope","getTransaction","msToSec","time","errorCallback","activeTransaction","setStatus","maxlen","_maxlen","SpanRecorder","spanContext","substring","traceId","spanId","parentSpanId","sampled","op","description","Span","startChild","childSpan","spanStatus","sampledString","parent_span_id","span_id","trace_id","start_timestamp","transactionContext","_hub","_trimEnd","trimEnd","Transaction","finish","finishedSpans","filter","s","reduce","prev","current","SpanClass","DEFAULT_IDLE_TIMEOUT","_pushActivity","_popActivity","transactionSpanId","IdleTransactionSpanRecorder","_idleHub","_idleTimeout","_onScope","clearActiveTransaction","configureScope","setSpan","IdleTransaction","_finished","activities","_beforeFinishCallbacks","Cancelled","keepSpan","_initTimeout","_pingHeartbeat","end_1","_heartbeatTimer","heartbeatString","_prevHeartbeatString","_heartbeatCounter","_beat","traceHeaders","sentry-trace","toTraceparent","sample","samplingContext","parentSampled","givenRate","tracesSampler","tracesSampleRate","rate","isValidSampleRate","initSpanRecorder","_experiments","maxSpans","Number","getDefaultSamplingContext","defaultSamplingContext","requestType_1","IncomingMessage","members","find","member","requestData","hostname","secure","socket","encrypted","originalUrl","absoluteUrl","cookies","cookie","query_string","extractNodeRequestData","globalObject","_startTransaction","addExtensionMethods","startTransaction","mark","_trackLCP","MetricsInstrumentation","getEntries","_forceLCP","_lcp","setData","LCP","entryScriptSrc","entryScriptStartTimestamp","tracingInitMarkStartTime","scripts","dataset","entry","_performanceCursor","startTime","duration","entryType","addPerformanceNavigationTiming","_startChild","responseEnd","requestStart","responseStart","addRequest","addNavigationSpans","measureStartTimestamp","measureEndTimestamp","addMeasureSpans","resourceName","origin","initiatorType","transferSize","encodedBodySize","decodedBodySize","addResourceSpans","firstHiddenTime_1","visibilityState","timeStamp","once","updateLCP_1","elementId","size","elementSize","po_1","PerformanceObserver","entryList","observe","buffered","takeRecords","end","start","ctx","defaultRequestInstrumentionOptions","traceFetch","traceXHR","tracingOrigins","registerRequestInstrumentation","shouldCreateSpanForRequest","urlMap","defaultShouldCreateSpan","origins","shouldCreateSpan","currentClientOptions","__span","setHttpStatus","append","fetchCallback","__sentry_xhr_span_id__","xhrCallback","DEFAULT_BROWSER_TRACING_OPTIONS","idleTimeout","markBackgroundTransactions","maxTransactionDuration","routingInstrumentation","startTransactionOnPageLoad","startTransactionOnLocationChange","startingUrl","pathname","BrowserTracing","_emitOptionsWarning","_getCurrentHub","_createRouteTransaction","beforeNavigate","parentContextFromHeader","metaName","querySelector","traceparent","matches","extractTraceparentData","getHeaderContext","expandedContext","modifiedContext","finalContext","idleTransaction","onScope","startIdleTransaction","registerBeforeFinishCallback","_metrics","addPerformanceEntries","maxDuration","diff","adjustTransactionDuration","window_1","SENTRY_RELEASE","clientClass","debug","enable","initAndBind","lastEventId","showReportDialog","internalWrap"],"mappings":"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"}