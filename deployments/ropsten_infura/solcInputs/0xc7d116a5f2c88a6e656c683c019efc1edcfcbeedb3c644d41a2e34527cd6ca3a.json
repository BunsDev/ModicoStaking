{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IStakedRewardsPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IStakedRewardsPool {\n\t/* Views */\n\n\tfunction balanceOf(address account) external view returns (uint256);\n\n\tfunction earned(address account) external view returns (uint256);\n\n\tfunction rewardsToken() external view returns (IERC20);\n\n\tfunction stakingToken() external view returns (IERC20);\n\n\tfunction stakingTokenDecimals() external view returns (uint8);\n\n\tfunction totalSupply() external view returns (uint256);\n\n\t/* Mutators */\n\n\tfunction exit() external;\n\n\tfunction getReward() external;\n\n\tfunction pause() external;\n\n\tfunction recoverUnsupportedERC20(\n\t\tIERC20 token,\n\t\taddress to,\n\t\tuint256 amount\n\t) external;\n\n\tfunction stake(uint256 amount) external;\n\n\tfunction unpause() external;\n\n\tfunction updateReward() external;\n\n\tfunction updateRewardFor(address account) external;\n\n\tfunction withdraw(uint256 amount) external;\n\n\t/* Events */\n\n\tevent RewardPaid(address indexed account, uint256 amount);\n\tevent Staked(address indexed account, uint256 amount);\n\tevent Withdrawn(address indexed account, uint256 amount);\n\tevent Recovered(IERC20 token, address indexed to, uint256 amount);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/interfaces/IStakedRewardsPoolTimedRate.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\nimport \"./IStakedRewardsPool.sol\";\n\ninterface IStakedRewardsPoolTimedRate is IStakedRewardsPool {\n\t/* Views */\n\n\tfunction accruedRewardPerToken() external view returns (uint256);\n\n\tfunction hasEnded() external view returns (bool);\n\n\tfunction hasStarted() external view returns (bool);\n\n\tfunction lastTimeRewardApplicable() external view returns (uint256);\n\n\tfunction periodDuration() external view returns (uint256);\n\n\tfunction periodEndTime() external view returns (uint256);\n\n\tfunction periodStartTime() external view returns (uint256);\n\n\tfunction timeRemainingInPeriod() external view returns (uint256);\n\n\t/* Mutators */\n\n\tfunction addToRewardsAllocation(uint256 amount) external;\n\n\tfunction setNewPeriod(uint256 startTime, uint256 endTime) external;\n\n\t/* Events */\n\n\tevent RewardAdded(uint256 amount);\n}\n"
    },
    "contracts/StakedRewardsPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/GSN/Context.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\nimport \"./interfaces/IStakedRewardsPool.sol\";\n\nabstract contract StakedRewardsPool is\n\tContext,\n\tReentrancyGuard,\n\tOwnable,\n\tPausable,\n\tIStakedRewardsPool\n{\n\tusing SafeERC20 for IERC20;\n\tusing SafeMath for uint256;\n\n\t/* Mutable Internal State */\n\n\tmapping(address => uint256) internal _rewards;\n\n\t/* Immutable Private State */\n\n\tuint8 private _stakingTokenDecimals;\n\tIERC20 private _rewardsToken;\n\tIERC20 private _stakingToken;\n\tuint256 private _stakingTokenBase;\n\n\t/* Mutable Private State */\n\n\tmapping(address => uint256) private _balances;\n\tuint256 private _totalSupply;\n\n\t/* Constructor */\n\n\tconstructor(\n\t\tIERC20 rewardsToken,\n\t\tIERC20 stakingToken,\n\t\tuint8 stakingTokenDecimals\n\t) Ownable() {\n\t\t// Prevent overflow, though 76 would create a safe but unusable contract\n\t\trequire(\n\t\t\tstakingTokenDecimals < 77,\n\t\t\t\"StakedRewardsPool: staking token has far too many decimals\"\n\t\t);\n\n\t\t_rewardsToken = rewardsToken;\n\n\t\t_stakingToken = stakingToken;\n\t\t_stakingTokenDecimals = stakingTokenDecimals;\n\t\t_stakingTokenBase = 10**stakingTokenDecimals;\n\t}\n\n\t/* Public Views */\n\n\tfunction balanceOf(address account) public view override returns (uint256) {\n\t\treturn _balances[account];\n\t}\n\n\tfunction earned(address account)\n\t\tpublic\n\t\tview\n\t\tvirtual\n\t\toverride\n\t\treturns (uint256);\n\n\tfunction rewardsToken() public view override returns (IERC20) {\n\t\treturn _rewardsToken;\n\t}\n\n\tfunction stakingToken() public view override returns (IERC20) {\n\t\treturn _stakingToken;\n\t}\n\n\tfunction stakingTokenDecimals() public view override returns (uint8) {\n\t\treturn _stakingTokenDecimals;\n\t}\n\n\tfunction totalSupply() public view override returns (uint256) {\n\t\treturn _totalSupply;\n\t}\n\n\t/* Public Mutators */\n\n\tfunction exit() public override nonReentrant {\n\t\t_exit();\n\t}\n\n\tfunction getReward() public override nonReentrant {\n\t\t_getReward();\n\t}\n\n\tfunction pause() public override onlyOwner {\n\t\t_pause();\n\t}\n\n\t// In the unlikely event that unsupported tokens are successfully sent to the\n\t// contract. This will also allow for removal of airdropped tokens.\n\tfunction recoverUnsupportedERC20(\n\t\tIERC20 token,\n\t\taddress to,\n\t\tuint256 amount\n\t) public override onlyOwner {\n\t\t_recoverUnsupportedERC20(token, to, amount);\n\t}\n\n\tfunction stake(uint256 amount) public override nonReentrant whenNotPaused {\n\t\t_stakeFrom(_msgSender(), amount);\n\t}\n\n\tfunction unpause() public override onlyOwner {\n\t\t_unpause();\n\t}\n\n\tfunction updateReward() public override nonReentrant {\n\t\t_updateRewardFor(_msgSender());\n\t}\n\n\tfunction updateRewardFor(address account) public override nonReentrant {\n\t\t_updateRewardFor(account);\n\t}\n\n\tfunction withdraw(uint256 amount) public override nonReentrant {\n\t\t_withdraw(amount);\n\t}\n\n\t/* Internal Views */\n\n\tfunction _getStakingTokenBase() internal view returns (uint256) {\n\t\treturn _stakingTokenBase;\n\t}\n\n\t/* Internal Mutators */\n\n\tfunction _exit() internal virtual {\n\t\t_withdraw(_balances[_msgSender()]);\n\t\t_getReward();\n\t}\n\n\tfunction _getReward() internal virtual {\n\t\t_updateRewardFor(_msgSender());\n\t\tuint256 reward = _rewards[_msgSender()];\n\t\tif (reward > 0) {\n\t\t\t_rewards[_msgSender()] = 0;\n\t\t\t_rewardsToken.safeTransfer(_msgSender(), reward);\n\t\t\temit RewardPaid(_msgSender(), reward);\n\t\t}\n\t}\n\n\tfunction _recoverUnsupportedERC20(\n\t\tIERC20 token,\n\t\taddress to,\n\t\tuint256 amount\n\t) internal virtual {\n\t\trequire(\n\t\t\ttoken != _stakingToken,\n\t\t\t\"StakedRewardsPool: cannot withdraw the staking token\"\n\t\t);\n\t\trequire(\n\t\t\ttoken != _rewardsToken,\n\t\t\t\"StakedRewardsPool: cannot withdraw the rewards token\"\n\t\t);\n\t\ttoken.safeTransfer(to, amount);\n\t\temit Recovered(token, to, amount);\n\t}\n\n\tfunction _stakeFrom(address account, uint256 amount) internal virtual {\n\t\trequire(\n\t\t\taccount != address(0),\n\t\t\t\"StakedRewardsPool: cannot stake from the zero address\"\n\t\t);\n\t\trequire(amount > 0, \"StakedRewardsPool: cannot stake zero\");\n\t\t_updateRewardFor(account);\n\t\t_totalSupply = _totalSupply.add(amount);\n\t\t_balances[account] = _balances[account].add(amount);\n\t\t_stakingToken.safeTransferFrom(account, address(this), amount);\n\t\temit Staked(account, amount);\n\t}\n\n\tfunction _updateRewardFor(address account) internal virtual;\n\n\tfunction _withdraw(uint256 amount) internal virtual {\n\t\trequire(amount > 0, \"StakedRewardsPool: cannot withdraw zero\");\n\t\t_updateRewardFor(_msgSender());\n\t\t_totalSupply = _totalSupply.sub(amount);\n\t\t_balances[_msgSender()] = _balances[_msgSender()].sub(amount);\n\t\t_stakingToken.safeTransfer(_msgSender(), amount);\n\t\temit Withdrawn(_msgSender(), amount);\n\t}\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"../GSN/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/GSN/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"../GSN/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\ncontract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor () {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\ncontract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/StakedRewardsPoolTimedRate.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.0;\n\nimport \"@openzeppelin/contracts/math/Math.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\nimport \"./interfaces/IStakedRewardsPoolTimedRate.sol\";\nimport \"./StakedRewardsPool.sol\";\n\n// Accuracy in block.timestamps is not needed.\n// https://consensys.github.io/smart-contract-best-practices/recommendations/#the-15-second-rule\n/* solhint-disable not-rely-on-time */\n\ncontract StakedRewardsPoolTimedRate is\n\tStakedRewardsPool,\n\tIStakedRewardsPoolTimedRate\n{\n\tusing SafeMath for uint256;\n\n\t/* Mutable Private State */\n\n\tuint256 private _accruedRewardPerToken;\n\tmapping(address => uint256) private _accruedRewardPerTokenPaid;\n\tuint256 private _lastUpdateTime;\n\tuint256 private _periodEndTime;\n\tuint256 private _periodStartTime;\n\tuint256 private _rewardRate;\n\n\t/* Modifiers */\n\n\tmodifier whenStarted {\n\t\trequire(\n\t\t\thasStarted(),\n\t\t\t\"StakedRewardsPoolTimedRate: current rewards distribution period has not yet begun\"\n\t\t);\n\t\t_;\n\t}\n\n\t/* Constructor */\n\n\tconstructor(\n\t\tIERC20 rewardsToken,\n\t\tIERC20 stakingToken,\n\t\tuint8 stakingTokenDecimals,\n\t\tuint256 periodStartTime,\n\t\tuint256 periodEndTime\n\t) StakedRewardsPool(rewardsToken, stakingToken, stakingTokenDecimals) {\n\t\t_periodStartTime = periodStartTime;\n\t\t_periodEndTime = periodEndTime;\n\t}\n\n\t/* Public Views */\n\n\t// Represents the ratio of reward token to staking token accrued thus far,\n\t// multiplied by 10**stakingTokenDecimal in case of a fraction.\n\tfunction accruedRewardPerToken() public view override returns (uint256) {\n\t\tuint256 totalSupply = totalSupply();\n\t\tif (totalSupply == 0) {\n\t\t\treturn _accruedRewardPerToken;\n\t\t}\n\n\t\tuint256 dt = lastTimeRewardApplicable().sub(_lastUpdateTime);\n\t\tif (dt == 0) {\n\t\t\treturn _accruedRewardPerToken;\n\t\t}\n\n\t\tuint256 accruedReward = _rewardRate.mul(dt);\n\n\t\treturn\n\t\t\t_accruedRewardPerToken.add(\n\t\t\t\taccruedReward.mul(_getStakingTokenBase()).div(totalSupply)\n\t\t\t);\n\t}\n\n\tfunction earned(address account)\n\t\tpublic\n\t\tview\n\t\toverride(IStakedRewardsPool, StakedRewardsPool)\n\t\treturns (uint256)\n\t{\n\t\t// Divide by stakingTokenBase in accordance with accruedRewardPerToken()\n\t\treturn\n\t\t\tbalanceOf(account)\n\t\t\t\t.mul(accruedRewardPerToken().sub(_accruedRewardPerTokenPaid[account]))\n\t\t\t\t.div(_getStakingTokenBase())\n\t\t\t\t.add(_rewards[account]);\n\t}\n\n\tfunction hasStarted() public view override returns (bool) {\n\t\treturn block.timestamp >= _periodStartTime;\n\t}\n\n\tfunction hasEnded() public view override returns (bool) {\n\t\treturn block.timestamp >= _periodEndTime;\n\t}\n\n\tfunction lastTimeRewardApplicable() public view override returns (uint256) {\n\t\t// Returns 0 if we have never run a staking period.\n\t\t// Returns _periodEndTime if we have but we're not in a staking period.\n\t\tif (!hasStarted()) {\n\t\t\treturn _lastUpdateTime;\n\t\t}\n\t\treturn Math.min(block.timestamp, _periodEndTime);\n\t}\n\n\tfunction periodDuration() public view override returns (uint256) {\n\t\treturn _periodEndTime.sub(_periodStartTime);\n\t}\n\n\tfunction periodEndTime() public view override returns (uint256) {\n\t\treturn _periodEndTime;\n\t}\n\n\tfunction periodStartTime() public view override returns (uint256) {\n\t\treturn _periodStartTime;\n\t}\n\n\tfunction timeRemainingInPeriod()\n\t\tpublic\n\t\tview\n\t\toverride\n\t\twhenStarted\n\t\treturns (uint256)\n\t{\n\t\tif (hasEnded()) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn _periodEndTime.sub(block.timestamp);\n\t}\n\n\t/* Public Mutators */\n\n\tfunction addToRewardsAllocation(uint256 amount)\n\t\tpublic\n\t\toverride\n\t\tnonReentrant\n\t\tonlyOwner\n\t{\n\t\t_addToRewardsAllocation(amount);\n\t}\n\n\tfunction setNewPeriod(uint256 startTime, uint256 endTime)\n\t\tpublic\n\t\toverride\n\t\tonlyOwner\n\t{\n\t\trequire(\n\t\t\t!hasStarted() || hasEnded(),\n\t\t\t\"StakedRewardsPoolTimedRate: cannot change an ongoing staking period\"\n\t\t);\n\t\trequire(\n\t\t\tendTime > startTime,\n\t\t\t\"StakedRewardsPoolTimedRate: endTime must be greater than startTime\"\n\t\t);\n\t\t// The lastTimeRewardApplicable() function would not allow rewards for a\n\t\t// past period that was never started.\n\t\trequire(\n\t\t\tstartTime > block.timestamp,\n\t\t\t\"StakedRewardsPoolTimedRate: startTime must be greater than the current block time\"\n\t\t);\n\t\t// Ensure that rewards are fully granted before changing the period.\n\t\t_updateAccrual();\n\t\t_periodStartTime = startTime;\n\t\t_periodEndTime = endTime;\n\t}\n\n\t/* Internal Mutators */\n\n\t// Ensure that the amount param is equal to the amount you've added to the contract, otherwise the funds will run out before _periodEndTime.\n\t// If called during an ongoing staking period, the amount will be allocated\n\t// to the current staking period.\n\t// If called before or after a staking period, the amount will only be\n\t// applied to the next staking period.\n\tfunction _addToRewardsAllocation(uint256 amount) internal {\n\t\t_updateAccrual();\n\n\t\t// Update reward rate based on remaining time\n\t\tuint256 remainingTime;\n\t\tif (!hasStarted() || hasEnded()) {\n\t\t\tremainingTime = periodDuration();\n\t\t} else {\n\t\t\tremainingTime = timeRemainingInPeriod();\n\t\t}\n\n\t\t_rewardRate = _rewardRate.add(amount.div(remainingTime));\n\n\t\temit RewardAdded(amount);\n\t}\n\n\tfunction _updateAccrual() internal {\n\t\t_accruedRewardPerToken = accruedRewardPerToken();\n\t\t_lastUpdateTime = lastTimeRewardApplicable();\n\t}\n\n\t// This logic is needed for any interaction that may manipulate rewards.\n\tfunction _updateRewardFor(address account) internal override {\n\t\t_updateAccrual();\n\t\t// Allocate due rewards.\n\t\t_rewards[account] = earned(account);\n\t\t// Remove ability to earn rewards on or before the current timestamp.\n\t\t_accruedRewardPerTokenPaid[account] = _accruedRewardPerToken;\n\t}\n}\n"
    },
    "@openzeppelin/contracts/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "id",
          "ast"
        ]
      }
    }
  }
}