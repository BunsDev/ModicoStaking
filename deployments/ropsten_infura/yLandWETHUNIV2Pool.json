{
  "address": "0xDbF190055db23AFb3Dd73f8357eCDb67B5109D18",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "rewardsToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "stakingToken",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "stakingTokenDecimals",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "periodStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "periodEndTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "accruedRewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addToRewardsAllocation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasEnded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverUnsupportedERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "setNewPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingTokenDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeRemainingInPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "updateRewardFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9c9e35ec0829adc953c2ae67111f20193a8f0db1bbc4ffd7cd5d2e72c11653a8",
  "receipt": {
    "to": null,
    "from": "0x9964f33ec88Fe90C9e8119a30E8649699145163A",
    "contractAddress": "0xDbF190055db23AFb3Dd73f8357eCDb67B5109D18",
    "transactionIndex": 8,
    "gasUsed": "1746166",
    "logsBloom": "0x
    "blockHash": "0x82dc3a598b90269951a8df58edb2c2f92d19a254af2d1360add569c0721d2265",
    "transactionHash": "0x9c9e35ec0829adc953c2ae67111f20193a8f0db1bbc4ffd7cd5d2e72c11653a8",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 8860394,
        "transactionHash": "0x9c9e35ec0829adc953c2ae67111f20193a8f0db1bbc4ffd7cd5d2e72c11653a8",
        "address": "0xDbF190055db23AFb3Dd73f8357eCDb67B5109D18",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009964f33ec88fe90c9e8119a30e8649699145163a"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x82dc3a598b90269951a8df58edb2c2f92d19a254af2d1360add569c0721d2265"
      }
    ],
    "blockNumber": 8860394,
    "cumulativeGasUsed": "2270583",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x42F319E7c1cc0638722a524B0351E6E7DD451f87",
    "0x835cA352b658500eAe43e76021E1f8dbb01D0acA",
    18,
    0,
    10
  ],
  "solcInputHash": "0xc7d116a5f2c88a6e656c683c019efc1edcfcbeedb3c644d41a2e34527cd6ca3a",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"rewardsToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"stakingTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"periodStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodEndTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accruedRewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addToRewardsAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverUnsupportedERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"setNewPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingTokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeRemainingInPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"updateRewardFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakedRewardsPoolTimedRate.sol\":\"StakedRewardsPoolTimedRate\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x910a2e625b71168563edf9eeef55a50d6d699acfe27ceba3921f291829a8f938\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x74b0525c81e47810f1bd795755962bdb84de3a4f71cfcb063f4c4d4999a3e96b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0xa4fdec0ea7d943692cac780111ff2ff9d89848cad0494a59cfaed63a705054b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc77dd6233a82c7c6e3dc49da8f3456baa00ecd3ea4dfa9222002a9aebf155dcd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x698f929f1097637d051976b322a2d532c27df022b09010e8d091e2888a5ebdf8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xc22459eee3dda8a2d9090884d3fcf3a219b1d899955188c2bdf2f1f3f5e51c62\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x938f2783ceb543ad266344cc5c420e1294026507081d6b7c2ec01b3303056265\",\"license\":\"MIT\"},\"contracts/StakedRewardsPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./interfaces/IStakedRewardsPool.sol\\\";\\n\\nabstract contract StakedRewardsPool is\\n\\tContext,\\n\\tReentrancyGuard,\\n\\tOwnable,\\n\\tPausable,\\n\\tIStakedRewardsPool\\n{\\n\\tusing SafeERC20 for IERC20;\\n\\tusing SafeMath for uint256;\\n\\n\\t/* Mutable Internal State */\\n\\n\\tmapping(address => uint256) internal _rewards;\\n\\n\\t/* Immutable Private State */\\n\\n\\tuint8 private _stakingTokenDecimals;\\n\\tIERC20 private _rewardsToken;\\n\\tIERC20 private _stakingToken;\\n\\tuint256 private _stakingTokenBase;\\n\\n\\t/* Mutable Private State */\\n\\n\\tmapping(address => uint256) private _balances;\\n\\tuint256 private _totalSupply;\\n\\n\\t/* Constructor */\\n\\n\\tconstructor(\\n\\t\\tIERC20 rewardsToken,\\n\\t\\tIERC20 stakingToken,\\n\\t\\tuint8 stakingTokenDecimals\\n\\t) Ownable() {\\n\\t\\t// Prevent overflow, though 76 would create a safe but unusable contract\\n\\t\\trequire(\\n\\t\\t\\tstakingTokenDecimals < 77,\\n\\t\\t\\t\\\"StakedRewardsPool: staking token has far too many decimals\\\"\\n\\t\\t);\\n\\n\\t\\t_rewardsToken = rewardsToken;\\n\\n\\t\\t_stakingToken = stakingToken;\\n\\t\\t_stakingTokenDecimals = stakingTokenDecimals;\\n\\t\\t_stakingTokenBase = 10**stakingTokenDecimals;\\n\\t}\\n\\n\\t/* Public Views */\\n\\n\\tfunction balanceOf(address account) public view override returns (uint256) {\\n\\t\\treturn _balances[account];\\n\\t}\\n\\n\\tfunction earned(address account)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256);\\n\\n\\tfunction rewardsToken() public view override returns (IERC20) {\\n\\t\\treturn _rewardsToken;\\n\\t}\\n\\n\\tfunction stakingToken() public view override returns (IERC20) {\\n\\t\\treturn _stakingToken;\\n\\t}\\n\\n\\tfunction stakingTokenDecimals() public view override returns (uint8) {\\n\\t\\treturn _stakingTokenDecimals;\\n\\t}\\n\\n\\tfunction totalSupply() public view override returns (uint256) {\\n\\t\\treturn _totalSupply;\\n\\t}\\n\\n\\t/* Public Mutators */\\n\\n\\tfunction exit() public override nonReentrant {\\n\\t\\t_exit();\\n\\t}\\n\\n\\tfunction getReward() public override nonReentrant {\\n\\t\\t_getReward();\\n\\t}\\n\\n\\tfunction pause() public override onlyOwner {\\n\\t\\t_pause();\\n\\t}\\n\\n\\t// In the unlikely event that unsupported tokens are successfully sent to the\\n\\t// contract. This will also allow for removal of airdropped tokens.\\n\\tfunction recoverUnsupportedERC20(\\n\\t\\tIERC20 token,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) public override onlyOwner {\\n\\t\\t_recoverUnsupportedERC20(token, to, amount);\\n\\t}\\n\\n\\tfunction stake(uint256 amount) public override nonReentrant whenNotPaused {\\n\\t\\t_stakeFrom(_msgSender(), amount);\\n\\t}\\n\\n\\tfunction unpause() public override onlyOwner {\\n\\t\\t_unpause();\\n\\t}\\n\\n\\tfunction updateReward() public override nonReentrant {\\n\\t\\t_updateRewardFor(_msgSender());\\n\\t}\\n\\n\\tfunction updateRewardFor(address account) public override nonReentrant {\\n\\t\\t_updateRewardFor(account);\\n\\t}\\n\\n\\tfunction withdraw(uint256 amount) public override nonReentrant {\\n\\t\\t_withdraw(amount);\\n\\t}\\n\\n\\t/* Internal Views */\\n\\n\\tfunction _getStakingTokenBase() internal view returns (uint256) {\\n\\t\\treturn _stakingTokenBase;\\n\\t}\\n\\n\\t/* Internal Mutators */\\n\\n\\tfunction _exit() internal virtual {\\n\\t\\t_withdraw(_balances[_msgSender()]);\\n\\t\\t_getReward();\\n\\t}\\n\\n\\tfunction _getReward() internal virtual {\\n\\t\\t_updateRewardFor(_msgSender());\\n\\t\\tuint256 reward = _rewards[_msgSender()];\\n\\t\\tif (reward > 0) {\\n\\t\\t\\t_rewards[_msgSender()] = 0;\\n\\t\\t\\t_rewardsToken.safeTransfer(_msgSender(), reward);\\n\\t\\t\\temit RewardPaid(_msgSender(), reward);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _recoverUnsupportedERC20(\\n\\t\\tIERC20 token,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) internal virtual {\\n\\t\\trequire(\\n\\t\\t\\ttoken != _stakingToken,\\n\\t\\t\\t\\\"StakedRewardsPool: cannot withdraw the staking token\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\ttoken != _rewardsToken,\\n\\t\\t\\t\\\"StakedRewardsPool: cannot withdraw the rewards token\\\"\\n\\t\\t);\\n\\t\\ttoken.safeTransfer(to, amount);\\n\\t\\temit Recovered(token, to, amount);\\n\\t}\\n\\n\\tfunction _stakeFrom(address account, uint256 amount) internal virtual {\\n\\t\\trequire(\\n\\t\\t\\taccount != address(0),\\n\\t\\t\\t\\\"StakedRewardsPool: cannot stake from the zero address\\\"\\n\\t\\t);\\n\\t\\trequire(amount > 0, \\\"StakedRewardsPool: cannot stake zero\\\");\\n\\t\\t_updateRewardFor(account);\\n\\t\\t_totalSupply = _totalSupply.add(amount);\\n\\t\\t_balances[account] = _balances[account].add(amount);\\n\\t\\t_stakingToken.safeTransferFrom(account, address(this), amount);\\n\\t\\temit Staked(account, amount);\\n\\t}\\n\\n\\tfunction _updateRewardFor(address account) internal virtual;\\n\\n\\tfunction _withdraw(uint256 amount) internal virtual {\\n\\t\\trequire(amount > 0, \\\"StakedRewardsPool: cannot withdraw zero\\\");\\n\\t\\t_updateRewardFor(_msgSender());\\n\\t\\t_totalSupply = _totalSupply.sub(amount);\\n\\t\\t_balances[_msgSender()] = _balances[_msgSender()].sub(amount);\\n\\t\\t_stakingToken.safeTransfer(_msgSender(), amount);\\n\\t\\temit Withdrawn(_msgSender(), amount);\\n\\t}\\n}\\n\",\"keccak256\":\"0x080f00eb701bb0e8bffaba7fc8a7862b638982f7a4d074bf7df52e2b2d2602c4\",\"license\":\"MIT\"},\"contracts/StakedRewardsPoolTimedRate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./interfaces/IStakedRewardsPoolTimedRate.sol\\\";\\nimport \\\"./StakedRewardsPool.sol\\\";\\n\\n// Accuracy in block.timestamps is not needed.\\n// https://consensys.github.io/smart-contract-best-practices/recommendations/#the-15-second-rule\\n/* solhint-disable not-rely-on-time */\\n\\ncontract StakedRewardsPoolTimedRate is\\n\\tStakedRewardsPool,\\n\\tIStakedRewardsPoolTimedRate\\n{\\n\\tusing SafeMath for uint256;\\n\\n\\t/* Mutable Private State */\\n\\n\\tuint256 private _accruedRewardPerToken;\\n\\tmapping(address => uint256) private _accruedRewardPerTokenPaid;\\n\\tuint256 private _lastUpdateTime;\\n\\tuint256 private _periodEndTime;\\n\\tuint256 private _periodStartTime;\\n\\tuint256 private _rewardRate;\\n\\n\\t/* Modifiers */\\n\\n\\tmodifier whenStarted {\\n\\t\\trequire(\\n\\t\\t\\thasStarted(),\\n\\t\\t\\t\\\"StakedRewardsPoolTimedRate: current rewards distribution period has not yet begun\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\t/* Constructor */\\n\\n\\tconstructor(\\n\\t\\tIERC20 rewardsToken,\\n\\t\\tIERC20 stakingToken,\\n\\t\\tuint8 stakingTokenDecimals,\\n\\t\\tuint256 periodStartTime,\\n\\t\\tuint256 periodEndTime\\n\\t) StakedRewardsPool(rewardsToken, stakingToken, stakingTokenDecimals) {\\n\\t\\t_periodStartTime = periodStartTime;\\n\\t\\t_periodEndTime = periodEndTime;\\n\\t}\\n\\n\\t/* Public Views */\\n\\n\\t// Represents the ratio of reward token to staking token accrued thus far,\\n\\t// multiplied by 10**stakingTokenDecimal in case of a fraction.\\n\\tfunction accruedRewardPerToken() public view override returns (uint256) {\\n\\t\\tuint256 totalSupply = totalSupply();\\n\\t\\tif (totalSupply == 0) {\\n\\t\\t\\treturn _accruedRewardPerToken;\\n\\t\\t}\\n\\n\\t\\tuint256 dt = lastTimeRewardApplicable().sub(_lastUpdateTime);\\n\\t\\tif (dt == 0) {\\n\\t\\t\\treturn _accruedRewardPerToken;\\n\\t\\t}\\n\\n\\t\\tuint256 accruedReward = _rewardRate.mul(dt);\\n\\n\\t\\treturn\\n\\t\\t\\t_accruedRewardPerToken.add(\\n\\t\\t\\t\\taccruedReward.mul(_getStakingTokenBase()).div(totalSupply)\\n\\t\\t\\t);\\n\\t}\\n\\n\\tfunction earned(address account)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride(IStakedRewardsPool, StakedRewardsPool)\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\t// Divide by stakingTokenBase in accordance with accruedRewardPerToken()\\n\\t\\treturn\\n\\t\\t\\tbalanceOf(account)\\n\\t\\t\\t\\t.mul(accruedRewardPerToken().sub(_accruedRewardPerTokenPaid[account]))\\n\\t\\t\\t\\t.div(_getStakingTokenBase())\\n\\t\\t\\t\\t.add(_rewards[account]);\\n\\t}\\n\\n\\tfunction hasStarted() public view override returns (bool) {\\n\\t\\treturn block.timestamp >= _periodStartTime;\\n\\t}\\n\\n\\tfunction hasEnded() public view override returns (bool) {\\n\\t\\treturn block.timestamp >= _periodEndTime;\\n\\t}\\n\\n\\tfunction lastTimeRewardApplicable() public view override returns (uint256) {\\n\\t\\t// Returns 0 if we have never run a staking period.\\n\\t\\t// Returns _periodEndTime if we have but we're not in a staking period.\\n\\t\\tif (!hasStarted()) {\\n\\t\\t\\treturn _lastUpdateTime;\\n\\t\\t}\\n\\t\\treturn Math.min(block.timestamp, _periodEndTime);\\n\\t}\\n\\n\\tfunction periodDuration() public view override returns (uint256) {\\n\\t\\treturn _periodEndTime.sub(_periodStartTime);\\n\\t}\\n\\n\\tfunction periodEndTime() public view override returns (uint256) {\\n\\t\\treturn _periodEndTime;\\n\\t}\\n\\n\\tfunction periodStartTime() public view override returns (uint256) {\\n\\t\\treturn _periodStartTime;\\n\\t}\\n\\n\\tfunction timeRemainingInPeriod()\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride\\n\\t\\twhenStarted\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tif (hasEnded()) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\treturn _periodEndTime.sub(block.timestamp);\\n\\t}\\n\\n\\t/* Public Mutators */\\n\\n\\tfunction addToRewardsAllocation(uint256 amount)\\n\\t\\tpublic\\n\\t\\toverride\\n\\t\\tnonReentrant\\n\\t\\tonlyOwner\\n\\t{\\n\\t\\t_addToRewardsAllocation(amount);\\n\\t}\\n\\n\\tfunction setNewPeriod(uint256 startTime, uint256 endTime)\\n\\t\\tpublic\\n\\t\\toverride\\n\\t\\tonlyOwner\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\t!hasStarted() || hasEnded(),\\n\\t\\t\\t\\\"StakedRewardsPoolTimedRate: cannot change an ongoing staking period\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tendTime > startTime,\\n\\t\\t\\t\\\"StakedRewardsPoolTimedRate: endTime must be greater than startTime\\\"\\n\\t\\t);\\n\\t\\t// The lastTimeRewardApplicable() function would not allow rewards for a\\n\\t\\t// past period that was never started.\\n\\t\\trequire(\\n\\t\\t\\tstartTime > block.timestamp,\\n\\t\\t\\t\\\"StakedRewardsPoolTimedRate: startTime must be greater than the current block time\\\"\\n\\t\\t);\\n\\t\\t// Ensure that rewards are fully granted before changing the period.\\n\\t\\t_updateAccrual();\\n\\t\\t_periodStartTime = startTime;\\n\\t\\t_periodEndTime = endTime;\\n\\t}\\n\\n\\t/* Internal Mutators */\\n\\n\\t// Ensure that the amount param is equal to the amount you've added to the contract, otherwise the funds will run out before _periodEndTime.\\n\\t// If called during an ongoing staking period, the amount will be allocated\\n\\t// to the current staking period.\\n\\t// If called before or after a staking period, the amount will only be\\n\\t// applied to the next staking period.\\n\\tfunction _addToRewardsAllocation(uint256 amount) internal {\\n\\t\\t_updateAccrual();\\n\\n\\t\\t// Update reward rate based on remaining time\\n\\t\\tuint256 remainingTime;\\n\\t\\tif (!hasStarted() || hasEnded()) {\\n\\t\\t\\tremainingTime = periodDuration();\\n\\t\\t} else {\\n\\t\\t\\tremainingTime = timeRemainingInPeriod();\\n\\t\\t}\\n\\n\\t\\t_rewardRate = _rewardRate.add(amount.div(remainingTime));\\n\\n\\t\\temit RewardAdded(amount);\\n\\t}\\n\\n\\tfunction _updateAccrual() internal {\\n\\t\\t_accruedRewardPerToken = accruedRewardPerToken();\\n\\t\\t_lastUpdateTime = lastTimeRewardApplicable();\\n\\t}\\n\\n\\t// This logic is needed for any interaction that may manipulate rewards.\\n\\tfunction _updateRewardFor(address account) internal override {\\n\\t\\t_updateAccrual();\\n\\t\\t// Allocate due rewards.\\n\\t\\t_rewards[account] = earned(account);\\n\\t\\t// Remove ability to earn rewards on or before the current timestamp.\\n\\t\\t_accruedRewardPerTokenPaid[account] = _accruedRewardPerToken;\\n\\t}\\n}\\n\",\"keccak256\":\"0x48e34ce5fdc80a403bd0594a7e72842de242a01e11bf97cc550ee71398dc4bb6\",\"license\":\"MIT\"},\"contracts/interfaces/IStakedRewardsPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStakedRewardsPool {\\n\\t/* Views */\\n\\n\\tfunction balanceOf(address account) external view returns (uint256);\\n\\n\\tfunction earned(address account) external view returns (uint256);\\n\\n\\tfunction rewardsToken() external view returns (IERC20);\\n\\n\\tfunction stakingToken() external view returns (IERC20);\\n\\n\\tfunction stakingTokenDecimals() external view returns (uint8);\\n\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\t/* Mutators */\\n\\n\\tfunction exit() external;\\n\\n\\tfunction getReward() external;\\n\\n\\tfunction pause() external;\\n\\n\\tfunction recoverUnsupportedERC20(\\n\\t\\tIERC20 token,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) external;\\n\\n\\tfunction stake(uint256 amount) external;\\n\\n\\tfunction unpause() external;\\n\\n\\tfunction updateReward() external;\\n\\n\\tfunction updateRewardFor(address account) external;\\n\\n\\tfunction withdraw(uint256 amount) external;\\n\\n\\t/* Events */\\n\\n\\tevent RewardPaid(address indexed account, uint256 amount);\\n\\tevent Staked(address indexed account, uint256 amount);\\n\\tevent Withdrawn(address indexed account, uint256 amount);\\n\\tevent Recovered(IERC20 token, address indexed to, uint256 amount);\\n}\\n\",\"keccak256\":\"0xb29aa6d97bab01869ef74810ae5a680f8bf9c2d0faab58e02e57a179282f4947\",\"license\":\"MIT\"},\"contracts/interfaces/IStakedRewardsPoolTimedRate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IStakedRewardsPool.sol\\\";\\n\\ninterface IStakedRewardsPoolTimedRate is IStakedRewardsPool {\\n\\t/* Views */\\n\\n\\tfunction accruedRewardPerToken() external view returns (uint256);\\n\\n\\tfunction hasEnded() external view returns (bool);\\n\\n\\tfunction hasStarted() external view returns (bool);\\n\\n\\tfunction lastTimeRewardApplicable() external view returns (uint256);\\n\\n\\tfunction periodDuration() external view returns (uint256);\\n\\n\\tfunction periodEndTime() external view returns (uint256);\\n\\n\\tfunction periodStartTime() external view returns (uint256);\\n\\n\\tfunction timeRemainingInPeriod() external view returns (uint256);\\n\\n\\t/* Mutators */\\n\\n\\tfunction addToRewardsAllocation(uint256 amount) external;\\n\\n\\tfunction setNewPeriod(uint256 startTime, uint256 endTime) external;\\n\\n\\t/* Events */\\n\\n\\tevent RewardAdded(uint256 amount);\\n}\\n\",\"keccak256\":\"0xdd8cc1b2296d9baf1814ccbb86242cbba30f4e4c0b57f734a368264c3c23732e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051611de1380380611de1833981810160405260a081101561003357600080fd5b5080516020820151604083015160608401516080909401516001600090815593949293919291859085908590610067610166565b600180546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001805460ff60a01b19169055604d60ff8216106101045760405162461bcd60e51b815260040180806020018281038252603a815260200180611da7603a913960400191505060405180910390fd5b60038054600480546001600160a01b0319166001600160a01b03958616179055610100600160a81b03191661010094909316939093029190911760ff191660ff91909116908117909155600a0a600555600c91909155600b555061016a915050565b3390565b611c2e806101796000396000f3fe608060405234801561001057600080fd5b50600436106101ce5760003560e01c806381b7268411610104578063b9f7a7b5116100a2578063ecb70fb711610071578063ecb70fb7146103d7578063f2fde38b146103df578063f36c0a7214610405578063f46951991461040d576101ce565b8063b9f7a7b5146103a1578063bdf7acce146103bf578063d1af0c7d146103c7578063e9fad8ee146103cf576101ce565b80638da5cb5b116100de5780638da5cb5b1461036c578063996f093214610374578063a694fc3a1461037c578063b470aade14610399576101ce565b806381b72684146103085780638456cb591461032e57806386a86d4114610336576101ce565b806344691f7e11610171578063715018a61161014b578063715018a6146102cc57806372f702f3146102d4578063736d7c23146102f857806380faa57d14610300576101ce565b806344691f7e146102825780635c975abb1461029e57806370a08231146102a6576101ce565b80631d8df8f9116101ad5780631d8df8f9146102385780632e1a7d4d146102555780633d18b912146102725780633f4ba83a1461027a576101ce565b80628cc262146101d35780630c2d27ac1461020b57806318160ddd14610230575b600080fd5b6101f9600480360360208110156101e957600080fd5b50356001600160a01b0316610415565b60408051918252519081900360200190f35b61022e6004803603604081101561022157600080fd5b508035906020013561048d565b005b6101f96105c6565b61022e6004803603602081101561024e57600080fd5b50356105cd565b61022e6004803603602081101561026b57600080fd5b5035610681565b61022e6106d5565b61022e61072f565b61028a610791565b604080519115158252519081900360200190f35b61028a61079a565b6101f9600480360360208110156102bc57600080fd5b50356001600160a01b03166107aa565b61022e6107c5565b6102dc610867565b604080516001600160a01b039092168252519081900360200190f35b6101f9610876565b6101f96108e2565b61022e6004803603602081101561031e57600080fd5b50356001600160a01b0316610905565b61022e610959565b61022e6004803603606081101561034c57600080fd5b506001600160a01b038135811691602081013590911690604001356109b9565b6102dc610a21565b6101f9610a30565b61022e6004803603602081101561039257600080fd5b5035610a36565b6101f9610ae4565b6103a9610afd565b6040805160ff9092168252519081900360200190f35b6101f9610b06565b6102dc610b0c565b61022e610b20565b61028a610b73565b61022e600480360360208110156103f557600080fd5b50356001600160a01b0316610b7c565b61022e610c75565b6101f9610cd0565b6001600160a01b0381166000908152600260205260408120546104879061048161043d610d4b565b6001600160a01b03861660009081526009602052604090205461047b9061046c90610466610cd0565b90610d51565b610475886107aa565b90610d9a565b90610df3565b90610e35565b92915050565b610495610e8f565b6001546001600160a01b039081169116146104e5576040805162461bcd60e51b81526020600482018190526024820152600080516020611b29833981519152604482015290519081900360640190fd5b6104ed610791565b15806104fc57506104fc610b73565b6105375760405162461bcd60e51b815260040180806020018281038252604381526020018061198d6043913960600191505060405180910390fd5b8181116105755760405162461bcd60e51b8152600401808060200182810382526042815260200180611a4e6042913960600191505060405180910390fd5b4282116105b35760405162461bcd60e51b8152600401808060200182810382526051815260200180611ab76051913960600191505060405180910390fd5b6105bb610e93565b600c91909155600b55565b6007545b90565b60026000541415610613576040805162461bcd60e51b815260206004820152601f602482015260008051602061196d833981519152604482015290519081900360640190fd5b6002600055610620610e8f565b6001546001600160a01b03908116911614610670576040805162461bcd60e51b81526020600482018190526024820152600080516020611b29833981519152604482015290519081900360640190fd5b61067981610eab565b506001600055565b600260005414156106c7576040805162461bcd60e51b815260206004820152601f602482015260008051602061196d833981519152604482015290519081900360640190fd5b600260005561067981610f3b565b6002600054141561071b576040805162461bcd60e51b815260206004820152601f602482015260008051602061196d833981519152604482015290519081900360640190fd5b6002600055610728611054565b6001600055565b610737610e8f565b6001546001600160a01b03908116911614610787576040805162461bcd60e51b81526020600482018190526024820152600080516020611b29833981519152604482015290519081900360640190fd5b61078f611126565b565b600c5442101590565b600154600160a01b900460ff1690565b6001600160a01b031660009081526006602052604090205490565b6107cd610e8f565b6001546001600160a01b0390811691161461081d576040805162461bcd60e51b81526020600482018190526024820152600080516020611b29833981519152604482015290519081900360640190fd5b6001546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600180546001600160a01b0319169055565b6004546001600160a01b031690565b6000610880610791565b6108bb5760405162461bcd60e51b8152600401808060200182810382526051815260200180611b496051913960600191505060405180910390fd5b6108c3610b73565b156108d0575060006105ca565b600b546108dd9042610d51565b905090565b60006108ec610791565b6108f95750600a546105ca565b6108dd42600b546111ce565b6002600054141561094b576040805162461bcd60e51b815260206004820152601f602482015260008051602061196d833981519152604482015290519081900360640190fd5b6002600055610679816111e4565b610961610e8f565b6001546001600160a01b039081169116146109b1576040805162461bcd60e51b81526020600482018190526024820152600080516020611b29833981519152604482015290519081900360640190fd5b61078f611223565b6109c1610e8f565b6001546001600160a01b03908116911614610a11576040805162461bcd60e51b81526020600482018190526024820152600080516020611b29833981519152604482015290519081900360640190fd5b610a1c8383836112b1565b505050565b6001546001600160a01b031690565b600b5490565b60026000541415610a7c576040805162461bcd60e51b815260206004820152601f602482015260008051602061196d833981519152604482015290519081900360640190fd5b6002600055600154600160a01b900460ff1615610ad3576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b610679610ade610e8f565b826113af565b60006108dd600c54600b54610d5190919063ffffffff16565b60035460ff1690565b600c5490565b60035461010090046001600160a01b031690565b60026000541415610b66576040805162461bcd60e51b815260206004820152601f602482015260008051602061196d833981519152604482015290519081900360640190fd5b60026000556107286114df565b600b5442101590565b610b84610e8f565b6001546001600160a01b03908116911614610bd4576040805162461bcd60e51b81526020600482018190526024820152600080516020611b29833981519152604482015290519081900360640190fd5b6001600160a01b038116610c195760405162461bcd60e51b81526004018080602001828103825260268152602001806119d06026913960400191505060405180910390fd5b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b60026000541415610cbb576040805162461bcd60e51b815260206004820152601f602482015260008051602061196d833981519152604482015290519081900360640190fd5b6002600055610728610ccb610e8f565b6111e4565b600080610cdb6105c6565b905080610cec5750506008546105ca565b6000610cfc600a546104666108e2565b905080610d0f57600854925050506105ca565b600d54600090610d1f9083610d9a565b9050610d43610d3a8461047b610d33610d4b565b8590610d9a565b60085490610e35565b935050505090565b60055490565b6000610d9383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061151c565b9392505050565b600082610da957506000610487565b82820282848281610db657fe5b0414610d935760405162461bcd60e51b8152600401808060200182810382526021815260200180611b086021913960400191505060405180910390fd5b6000610d9383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506115b3565b600082820183811015610d93576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b3390565b610e9b610cd0565b600855610ea66108e2565b600a55565b610eb3610e93565b6000610ebd610791565b1580610ecc5750610ecc610b73565b15610ee057610ed9610ae4565b9050610eeb565b610ee8610876565b90505b610f01610ef88383610df3565b600d5490610e35565b600d556040805183815290517fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9181900360200190a15050565b60008111610f7a5760405162461bcd60e51b8152600401808060200182810382526027815260200180611a906027913960400191505060405180910390fd5b610f85610ccb610e8f565b600754610f929082610d51565b600755610fc58160066000610fa5610e8f565b6001600160a01b0316815260208101919091526040016000205490610d51565b60066000610fd1610e8f565b6001600160a01b03168152602081019190915260400160002055611009610ff6610e8f565b6004546001600160a01b03169083611618565b611011610e8f565b6001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5826040518082815260200191505060405180910390a250565b61105f610ccb610e8f565b60006002600061106d610e8f565b6001600160a01b03168152602081019190915260400160002054905080156111235760006002600061109d610e8f565b6001600160a01b031681526020810191909152604001600020556110da6110c2610e8f565b60035461010090046001600160a01b03169083611618565b6110e2610e8f565b6001600160a01b03167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486826040518082815260200191505060405180910390a25b50565b600154600160a01b900460ff1661117b576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6001805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6111b1610e8f565b604080516001600160a01b039092168252519081900360200190a1565b60008183106111dd5781610d93565b5090919050565b6111ec610e93565b6111f581610415565b6001600160a01b03909116600090815260026020908152604080832093909355600854600990915291902055565b600154600160a01b900460ff1615611275576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6001805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586111b1610e8f565b6004546001600160a01b03848116911614156112fe5760405162461bcd60e51b81526004018080602001828103825260348152602001806119396034913960400191505060405180910390fd5b6003546001600160a01b038481166101009092041614156113505760405162461bcd60e51b8152600401808060200182810382526034815260200180611a1a6034913960400191505060405180910390fd5b6113646001600160a01b0384168383611618565b604080516001600160a01b038581168252602082018490528251908516927ffff3b3844276f57024e0b42afec1a37f75db36511e43819a4f2a63ab7862b648928290030190a2505050565b6001600160a01b0382166113f45760405162461bcd60e51b8152600401808060200182810382526035815260200180611b9a6035913960400191505060405180910390fd5b600081116114335760405162461bcd60e51b81526004018080602001828103825260248152602001806119f66024913960400191505060405180910390fd5b61143c826111e4565b6007546114499082610e35565b6007556001600160a01b03821660009081526006602052604090205461146f9082610e35565b6001600160a01b0380841660009081526006602052604090209190915560045461149c911683308461166a565b6040805182815290516001600160a01b038416917f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d919081900360200190a25050565b611514600660006114ee610e8f565b6001600160a01b03166001600160a01b0316815260200190815260200160002054610f3b565b61078f611054565b600081848411156115ab5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611570578181015183820152602001611558565b50505050905090810190601f16801561159d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600081836116025760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611570578181015183820152602001611558565b50600083858161160e57fe5b0495945050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610a1c9084906116ca565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526116c49085906116ca565b50505050565b606061171f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661177b9092919063ffffffff16565b805190915015610a1c5780806020019051602081101561173e57600080fd5b5051610a1c5760405162461bcd60e51b815260040180806020018281038252602a815260200180611bcf602a913960400191505060405180910390fd5b606061178a8484600085611792565b949350505050565b606061179d856118ff565b6117ee576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061182d5780518252601f19909201916020918201910161180e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461188f576040519150601f19603f3d011682016040523d82523d6000602084013e611894565b606091505b509150915081156118a857915061178a9050565b8051156118b85780518082602001fd5b60405162461bcd60e51b8152602060048201818152865160248401528651879391928392604401919085019080838360008315611570578181015183820152602001611558565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061178a57505015159291505056fe5374616b656452657761726473506f6f6c3a2063616e6e6f7420776974686472617720746865207374616b696e6720746f6b656e5265656e7472616e637947756172643a207265656e7472616e742063616c6c005374616b656452657761726473506f6f6c54696d6564526174653a2063616e6e6f74206368616e676520616e206f6e676f696e67207374616b696e6720706572696f644f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573735374616b656452657761726473506f6f6c3a2063616e6e6f74207374616b65207a65726f5374616b656452657761726473506f6f6c3a2063616e6e6f7420776974686472617720746865207265776172647320746f6b656e5374616b656452657761726473506f6f6c54696d6564526174653a20656e6454696d65206d7573742062652067726561746572207468616e20737461727454696d655374616b656452657761726473506f6f6c3a2063616e6e6f74207769746864726177207a65726f5374616b656452657761726473506f6f6c54696d6564526174653a20737461727454696d65206d7573742062652067726561746572207468616e207468652063757272656e7420626c6f636b2074696d65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725374616b656452657761726473506f6f6c54696d6564526174653a2063757272656e74207265776172647320646973747269627574696f6e20706572696f6420686173206e6f742079657420626567756e5374616b656452657761726473506f6f6c3a2063616e6e6f74207374616b652066726f6d20746865207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212209bdd2d5b5bcf59e2c603aad88d97ca934e47555d74f01ad14ffd50ba10b95e2464736f6c634300070300335374616b656452657761726473506f6f6c3a207374616b696e6720746f6b656e206861732066617220746f6f206d616e7920646563696d616c73",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101ce5760003560e01c806381b7268411610104578063b9f7a7b5116100a2578063ecb70fb711610071578063ecb70fb7146103d7578063f2fde38b146103df578063f36c0a7214610405578063f46951991461040d576101ce565b8063b9f7a7b5146103a1578063bdf7acce146103bf578063d1af0c7d146103c7578063e9fad8ee146103cf576101ce565b80638da5cb5b116100de5780638da5cb5b1461036c578063996f093214610374578063a694fc3a1461037c578063b470aade14610399576101ce565b806381b72684146103085780638456cb591461032e57806386a86d4114610336576101ce565b806344691f7e11610171578063715018a61161014b578063715018a6146102cc57806372f702f3146102d4578063736d7c23146102f857806380faa57d14610300576101ce565b806344691f7e146102825780635c975abb1461029e57806370a08231146102a6576101ce565b80631d8df8f9116101ad5780631d8df8f9146102385780632e1a7d4d146102555780633d18b912146102725780633f4ba83a1461027a576101ce565b80628cc262146101d35780630c2d27ac1461020b57806318160ddd14610230575b600080fd5b6101f9600480360360208110156101e957600080fd5b50356001600160a01b0316610415565b60408051918252519081900360200190f35b61022e6004803603604081101561022157600080fd5b508035906020013561048d565b005b6101f96105c6565b61022e6004803603602081101561024e57600080fd5b50356105cd565b61022e6004803603602081101561026b57600080fd5b5035610681565b61022e6106d5565b61022e61072f565b61028a610791565b604080519115158252519081900360200190f35b61028a61079a565b6101f9600480360360208110156102bc57600080fd5b50356001600160a01b03166107aa565b61022e6107c5565b6102dc610867565b604080516001600160a01b039092168252519081900360200190f35b6101f9610876565b6101f96108e2565b61022e6004803603602081101561031e57600080fd5b50356001600160a01b0316610905565b61022e610959565b61022e6004803603606081101561034c57600080fd5b506001600160a01b038135811691602081013590911690604001356109b9565b6102dc610a21565b6101f9610a30565b61022e6004803603602081101561039257600080fd5b5035610a36565b6101f9610ae4565b6103a9610afd565b6040805160ff9092168252519081900360200190f35b6101f9610b06565b6102dc610b0c565b61022e610b20565b61028a610b73565b61022e600480360360208110156103f557600080fd5b50356001600160a01b0316610b7c565b61022e610c75565b6101f9610cd0565b6001600160a01b0381166000908152600260205260408120546104879061048161043d610d4b565b6001600160a01b03861660009081526009602052604090205461047b9061046c90610466610cd0565b90610d51565b610475886107aa565b90610d9a565b90610df3565b90610e35565b92915050565b610495610e8f565b6001546001600160a01b039081169116146104e5576040805162461bcd60e51b81526020600482018190526024820152600080516020611b29833981519152604482015290519081900360640190fd5b6104ed610791565b15806104fc57506104fc610b73565b6105375760405162461bcd60e51b815260040180806020018281038252604381526020018061198d6043913960600191505060405180910390fd5b8181116105755760405162461bcd60e51b8152600401808060200182810382526042815260200180611a4e6042913960600191505060405180910390fd5b4282116105b35760405162461bcd60e51b8152600401808060200182810382526051815260200180611ab76051913960600191505060405180910390fd5b6105bb610e93565b600c91909155600b55565b6007545b90565b60026000541415610613576040805162461bcd60e51b815260206004820152601f602482015260008051602061196d833981519152604482015290519081900360640190fd5b6002600055610620610e8f565b6001546001600160a01b03908116911614610670576040805162461bcd60e51b81526020600482018190526024820152600080516020611b29833981519152604482015290519081900360640190fd5b61067981610eab565b506001600055565b600260005414156106c7576040805162461bcd60e51b815260206004820152601f602482015260008051602061196d833981519152604482015290519081900360640190fd5b600260005561067981610f3b565b6002600054141561071b576040805162461bcd60e51b815260206004820152601f602482015260008051602061196d833981519152604482015290519081900360640190fd5b6002600055610728611054565b6001600055565b610737610e8f565b6001546001600160a01b03908116911614610787576040805162461bcd60e51b81526020600482018190526024820152600080516020611b29833981519152604482015290519081900360640190fd5b61078f611126565b565b600c5442101590565b600154600160a01b900460ff1690565b6001600160a01b031660009081526006602052604090205490565b6107cd610e8f565b6001546001600160a01b0390811691161461081d576040805162461bcd60e51b81526020600482018190526024820152600080516020611b29833981519152604482015290519081900360640190fd5b6001546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600180546001600160a01b0319169055565b6004546001600160a01b031690565b6000610880610791565b6108bb5760405162461bcd60e51b8152600401808060200182810382526051815260200180611b496051913960600191505060405180910390fd5b6108c3610b73565b156108d0575060006105ca565b600b546108dd9042610d51565b905090565b60006108ec610791565b6108f95750600a546105ca565b6108dd42600b546111ce565b6002600054141561094b576040805162461bcd60e51b815260206004820152601f602482015260008051602061196d833981519152604482015290519081900360640190fd5b6002600055610679816111e4565b610961610e8f565b6001546001600160a01b039081169116146109b1576040805162461bcd60e51b81526020600482018190526024820152600080516020611b29833981519152604482015290519081900360640190fd5b61078f611223565b6109c1610e8f565b6001546001600160a01b03908116911614610a11576040805162461bcd60e51b81526020600482018190526024820152600080516020611b29833981519152604482015290519081900360640190fd5b610a1c8383836112b1565b505050565b6001546001600160a01b031690565b600b5490565b60026000541415610a7c576040805162461bcd60e51b815260206004820152601f602482015260008051602061196d833981519152604482015290519081900360640190fd5b6002600055600154600160a01b900460ff1615610ad3576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b610679610ade610e8f565b826113af565b60006108dd600c54600b54610d5190919063ffffffff16565b60035460ff1690565b600c5490565b60035461010090046001600160a01b031690565b60026000541415610b66576040805162461bcd60e51b815260206004820152601f602482015260008051602061196d833981519152604482015290519081900360640190fd5b60026000556107286114df565b600b5442101590565b610b84610e8f565b6001546001600160a01b03908116911614610bd4576040805162461bcd60e51b81526020600482018190526024820152600080516020611b29833981519152604482015290519081900360640190fd5b6001600160a01b038116610c195760405162461bcd60e51b81526004018080602001828103825260268152602001806119d06026913960400191505060405180910390fd5b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b60026000541415610cbb576040805162461bcd60e51b815260206004820152601f602482015260008051602061196d833981519152604482015290519081900360640190fd5b6002600055610728610ccb610e8f565b6111e4565b600080610cdb6105c6565b905080610cec5750506008546105ca565b6000610cfc600a546104666108e2565b905080610d0f57600854925050506105ca565b600d54600090610d1f9083610d9a565b9050610d43610d3a8461047b610d33610d4b565b8590610d9a565b60085490610e35565b935050505090565b60055490565b6000610d9383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061151c565b9392505050565b600082610da957506000610487565b82820282848281610db657fe5b0414610d935760405162461bcd60e51b8152600401808060200182810382526021815260200180611b086021913960400191505060405180910390fd5b6000610d9383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506115b3565b600082820183811015610d93576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b3390565b610e9b610cd0565b600855610ea66108e2565b600a55565b610eb3610e93565b6000610ebd610791565b1580610ecc5750610ecc610b73565b15610ee057610ed9610ae4565b9050610eeb565b610ee8610876565b90505b610f01610ef88383610df3565b600d5490610e35565b600d556040805183815290517fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9181900360200190a15050565b60008111610f7a5760405162461bcd60e51b8152600401808060200182810382526027815260200180611a906027913960400191505060405180910390fd5b610f85610ccb610e8f565b600754610f929082610d51565b600755610fc58160066000610fa5610e8f565b6001600160a01b0316815260208101919091526040016000205490610d51565b60066000610fd1610e8f565b6001600160a01b03168152602081019190915260400160002055611009610ff6610e8f565b6004546001600160a01b03169083611618565b611011610e8f565b6001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5826040518082815260200191505060405180910390a250565b61105f610ccb610e8f565b60006002600061106d610e8f565b6001600160a01b03168152602081019190915260400160002054905080156111235760006002600061109d610e8f565b6001600160a01b031681526020810191909152604001600020556110da6110c2610e8f565b60035461010090046001600160a01b03169083611618565b6110e2610e8f565b6001600160a01b03167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486826040518082815260200191505060405180910390a25b50565b600154600160a01b900460ff1661117b576040805162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015290519081900360640190fd5b6001805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6111b1610e8f565b604080516001600160a01b039092168252519081900360200190a1565b60008183106111dd5781610d93565b5090919050565b6111ec610e93565b6111f581610415565b6001600160a01b03909116600090815260026020908152604080832093909355600854600990915291902055565b600154600160a01b900460ff1615611275576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6001805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586111b1610e8f565b6004546001600160a01b03848116911614156112fe5760405162461bcd60e51b81526004018080602001828103825260348152602001806119396034913960400191505060405180910390fd5b6003546001600160a01b038481166101009092041614156113505760405162461bcd60e51b8152600401808060200182810382526034815260200180611a1a6034913960400191505060405180910390fd5b6113646001600160a01b0384168383611618565b604080516001600160a01b038581168252602082018490528251908516927ffff3b3844276f57024e0b42afec1a37f75db36511e43819a4f2a63ab7862b648928290030190a2505050565b6001600160a01b0382166113f45760405162461bcd60e51b8152600401808060200182810382526035815260200180611b9a6035913960400191505060405180910390fd5b600081116114335760405162461bcd60e51b81526004018080602001828103825260248152602001806119f66024913960400191505060405180910390fd5b61143c826111e4565b6007546114499082610e35565b6007556001600160a01b03821660009081526006602052604090205461146f9082610e35565b6001600160a01b0380841660009081526006602052604090209190915560045461149c911683308461166a565b6040805182815290516001600160a01b038416917f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d919081900360200190a25050565b611514600660006114ee610e8f565b6001600160a01b03166001600160a01b0316815260200190815260200160002054610f3b565b61078f611054565b600081848411156115ab5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611570578181015183820152602001611558565b50505050905090810190601f16801561159d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600081836116025760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611570578181015183820152602001611558565b50600083858161160e57fe5b0495945050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610a1c9084906116ca565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526116c49085906116ca565b50505050565b606061171f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661177b9092919063ffffffff16565b805190915015610a1c5780806020019051602081101561173e57600080fd5b5051610a1c5760405162461bcd60e51b815260040180806020018281038252602a815260200180611bcf602a913960400191505060405180910390fd5b606061178a8484600085611792565b949350505050565b606061179d856118ff565b6117ee576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061182d5780518252601f19909201916020918201910161180e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461188f576040519150601f19603f3d011682016040523d82523d6000602084013e611894565b606091505b509150915081156118a857915061178a9050565b8051156118b85780518082602001fd5b60405162461bcd60e51b8152602060048201818152865160248401528651879391928392604401919085019080838360008315611570578181015183820152602001611558565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061178a57505015159291505056fe5374616b656452657761726473506f6f6c3a2063616e6e6f7420776974686472617720746865207374616b696e6720746f6b656e5265656e7472616e637947756172643a207265656e7472616e742063616c6c005374616b656452657761726473506f6f6c54696d6564526174653a2063616e6e6f74206368616e676520616e206f6e676f696e67207374616b696e6720706572696f644f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573735374616b656452657761726473506f6f6c3a2063616e6e6f74207374616b65207a65726f5374616b656452657761726473506f6f6c3a2063616e6e6f7420776974686472617720746865207265776172647320746f6b656e5374616b656452657761726473506f6f6c54696d6564526174653a20656e6454696d65206d7573742062652067726561746572207468616e20737461727454696d655374616b656452657761726473506f6f6c3a2063616e6e6f74207769746864726177207a65726f5374616b656452657761726473506f6f6c54696d6564526174653a20737461727454696d65206d7573742062652067726561746572207468616e207468652063757272656e7420626c6f636b2074696d65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725374616b656452657761726473506f6f6c54696d6564526174653a2063757272656e74207265776172647320646973747269627574696f6e20706572696f6420686173206e6f742079657420626567756e5374616b656452657761726473506f6f6c3a2063616e6e6f74207374616b652066726f6d20746865207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212209bdd2d5b5bcf59e2c603aad88d97ca934e47555d74f01ad14ffd50ba10b95e2464736f6c63430007030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 996,
        "contract": "contracts/StakedRewardsPoolTimedRate.sol:StakedRewardsPoolTimedRate",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 30,
        "contract": "contracts/StakedRewardsPoolTimedRate.sol:StakedRewardsPoolTimedRate",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 913,
        "contract": "contracts/StakedRewardsPoolTimedRate.sol:StakedRewardsPoolTimedRate",
        "label": "_paused",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 1055,
        "contract": "contracts/StakedRewardsPoolTimedRate.sol:StakedRewardsPoolTimedRate",
        "label": "_rewards",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1057,
        "contract": "contracts/StakedRewardsPoolTimedRate.sol:StakedRewardsPoolTimedRate",
        "label": "_stakingTokenDecimals",
        "offset": 0,
        "slot": "3",
        "type": "t_uint8"
      },
      {
        "astId": 1059,
        "contract": "contracts/StakedRewardsPoolTimedRate.sol:StakedRewardsPoolTimedRate",
        "label": "_rewardsToken",
        "offset": 1,
        "slot": "3",
        "type": "t_contract(IERC20)478"
      },
      {
        "astId": 1061,
        "contract": "contracts/StakedRewardsPoolTimedRate.sol:StakedRewardsPoolTimedRate",
        "label": "_stakingToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)478"
      },
      {
        "astId": 1063,
        "contract": "contracts/StakedRewardsPoolTimedRate.sol:StakedRewardsPoolTimedRate",
        "label": "_stakingTokenBase",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1067,
        "contract": "contracts/StakedRewardsPoolTimedRate.sol:StakedRewardsPoolTimedRate",
        "label": "_balances",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1069,
        "contract": "contracts/StakedRewardsPoolTimedRate.sol:StakedRewardsPoolTimedRate",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1514,
        "contract": "contracts/StakedRewardsPoolTimedRate.sol:StakedRewardsPoolTimedRate",
        "label": "_accruedRewardPerToken",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1518,
        "contract": "contracts/StakedRewardsPoolTimedRate.sol:StakedRewardsPoolTimedRate",
        "label": "_accruedRewardPerTokenPaid",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1520,
        "contract": "contracts/StakedRewardsPoolTimedRate.sol:StakedRewardsPoolTimedRate",
        "label": "_lastUpdateTime",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1522,
        "contract": "contracts/StakedRewardsPoolTimedRate.sol:StakedRewardsPoolTimedRate",
        "label": "_periodEndTime",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1524,
        "contract": "contracts/StakedRewardsPoolTimedRate.sol:StakedRewardsPoolTimedRate",
        "label": "_periodStartTime",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1526,
        "contract": "contracts/StakedRewardsPoolTimedRate.sol:StakedRewardsPoolTimedRate",
        "label": "_rewardRate",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)478": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  },
  "gasEstimates": {
    "creation": {
      "codeDepositCost": "1442800",
      "executionCost": "infinite",
      "totalCost": "infinite"
    },
    "external": {
      "accruedRewardPerToken()": "infinite",
      "addToRewardsAllocation(uint256)": "infinite",
      "balanceOf(address)": "1232",
      "earned(address)": "infinite",
      "exit()": "infinite",
      "getReward()": "infinite",
      "hasEnded()": "1056",
      "hasStarted()": "1058",
      "lastTimeRewardApplicable()": "2047",
      "owner()": "1082",
      "pause()": "infinite",
      "paused()": "1095",
      "periodDuration()": "infinite",
      "periodEndTime()": "1065",
      "periodStartTime()": "1065",
      "recoverUnsupportedERC20(address,address,uint256)": "infinite",
      "renounceOwnership()": "infinite",
      "rewardsToken()": "1137",
      "setNewPeriod(uint256,uint256)": "infinite",
      "stake(uint256)": "infinite",
      "stakingToken()": "1104",
      "stakingTokenDecimals()": "1058",
      "timeRemainingInPeriod()": "infinite",
      "totalSupply()": "1090",
      "transferOwnership(address)": "infinite",
      "unpause()": "infinite",
      "updateReward()": "infinite",
      "updateRewardFor(address)": "infinite",
      "withdraw(uint256)": "infinite"
    },
    "internal": {
      "_addToRewardsAllocation(uint256)": "infinite",
      "_updateAccrual()": "infinite",
      "_updateRewardFor(address)": "infinite"
    }
  }
}